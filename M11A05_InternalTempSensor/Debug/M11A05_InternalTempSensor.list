
M11A05_InternalTempSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f5c  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080030e8  080030e8  000130e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003128  08003128  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003128  08003128  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003128  08003128  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003128  08003128  00013128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800312c  0800312c  0001312c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003130  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  2000000c  0800313c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  0800313c  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009397  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001831  00000000  00000000  000293d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000978  00000000  00000000  0002ac08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008b0  00000000  00000000  0002b580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fe17  00000000  00000000  0002be30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000097cf  00000000  00000000  0004bc47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6df1  00000000  00000000  00055416  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011c207  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002608  00000000  00000000  0011c258  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080030d0 	.word	0x080030d0

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	080030d0 	.word	0x080030d0

080001cc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b086      	sub	sp, #24
 80001d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80001d2:	463b      	mov	r3, r7
 80001d4:	2200      	movs	r2, #0
 80001d6:	601a      	str	r2, [r3, #0]
 80001d8:	605a      	str	r2, [r3, #4]
 80001da:	609a      	str	r2, [r3, #8]
 80001dc:	60da      	str	r2, [r3, #12]
 80001de:	611a      	str	r2, [r3, #16]
 80001e0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80001e2:	4b29      	ldr	r3, [pc, #164]	; (8000288 <MX_ADC1_Init+0xbc>)
 80001e4:	4a29      	ldr	r2, [pc, #164]	; (800028c <MX_ADC1_Init+0xc0>)
 80001e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80001e8:	4b27      	ldr	r3, [pc, #156]	; (8000288 <MX_ADC1_Init+0xbc>)
 80001ea:	2200      	movs	r2, #0
 80001ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80001ee:	4b26      	ldr	r3, [pc, #152]	; (8000288 <MX_ADC1_Init+0xbc>)
 80001f0:	2200      	movs	r2, #0
 80001f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80001f4:	4b24      	ldr	r3, [pc, #144]	; (8000288 <MX_ADC1_Init+0xbc>)
 80001f6:	2200      	movs	r2, #0
 80001f8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80001fa:	4b23      	ldr	r3, [pc, #140]	; (8000288 <MX_ADC1_Init+0xbc>)
 80001fc:	2200      	movs	r2, #0
 80001fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000200:	4b21      	ldr	r3, [pc, #132]	; (8000288 <MX_ADC1_Init+0xbc>)
 8000202:	2204      	movs	r2, #4
 8000204:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000206:	4b20      	ldr	r3, [pc, #128]	; (8000288 <MX_ADC1_Init+0xbc>)
 8000208:	2200      	movs	r2, #0
 800020a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800020c:	4b1e      	ldr	r3, [pc, #120]	; (8000288 <MX_ADC1_Init+0xbc>)
 800020e:	2201      	movs	r2, #1
 8000210:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000212:	4b1d      	ldr	r3, [pc, #116]	; (8000288 <MX_ADC1_Init+0xbc>)
 8000214:	2201      	movs	r2, #1
 8000216:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000218:	4b1b      	ldr	r3, [pc, #108]	; (8000288 <MX_ADC1_Init+0xbc>)
 800021a:	2200      	movs	r2, #0
 800021c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000220:	4b19      	ldr	r3, [pc, #100]	; (8000288 <MX_ADC1_Init+0xbc>)
 8000222:	2200      	movs	r2, #0
 8000224:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000226:	4b18      	ldr	r3, [pc, #96]	; (8000288 <MX_ADC1_Init+0xbc>)
 8000228:	2200      	movs	r2, #0
 800022a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800022c:	4b16      	ldr	r3, [pc, #88]	; (8000288 <MX_ADC1_Init+0xbc>)
 800022e:	2200      	movs	r2, #0
 8000230:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000234:	4b14      	ldr	r3, [pc, #80]	; (8000288 <MX_ADC1_Init+0xbc>)
 8000236:	2200      	movs	r2, #0
 8000238:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800023a:	4b13      	ldr	r3, [pc, #76]	; (8000288 <MX_ADC1_Init+0xbc>)
 800023c:	2200      	movs	r2, #0
 800023e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000242:	4811      	ldr	r0, [pc, #68]	; (8000288 <MX_ADC1_Init+0xbc>)
 8000244:	f000 fc5e 	bl	8000b04 <HAL_ADC_Init>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d001      	beq.n	8000252 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800024e:	f000 f93f 	bl	80004d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000252:	4b0f      	ldr	r3, [pc, #60]	; (8000290 <MX_ADC1_Init+0xc4>)
 8000254:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000256:	2306      	movs	r3, #6
 8000258:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 800025a:	2306      	movs	r3, #6
 800025c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800025e:	237f      	movs	r3, #127	; 0x7f
 8000260:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000262:	2304      	movs	r3, #4
 8000264:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000266:	2300      	movs	r3, #0
 8000268:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800026a:	463b      	mov	r3, r7
 800026c:	4619      	mov	r1, r3
 800026e:	4806      	ldr	r0, [pc, #24]	; (8000288 <MX_ADC1_Init+0xbc>)
 8000270:	f000 fec2 	bl	8000ff8 <HAL_ADC_ConfigChannel>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800027a:	f000 f929 	bl	80004d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800027e:	bf00      	nop
 8000280:	3718      	adds	r7, #24
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}
 8000286:	bf00      	nop
 8000288:	20000028 	.word	0x20000028
 800028c:	50040000 	.word	0x50040000
 8000290:	c7520000 	.word	0xc7520000

08000294 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b098      	sub	sp, #96	; 0x60
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800029c:	f107 030c 	add.w	r3, r7, #12
 80002a0:	2254      	movs	r2, #84	; 0x54
 80002a2:	2100      	movs	r1, #0
 80002a4:	4618      	mov	r0, r3
 80002a6:	f002 ff0b 	bl	80030c0 <memset>
  if(adcHandle->Instance==ADC1)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	4a19      	ldr	r2, [pc, #100]	; (8000314 <HAL_ADC_MspInit+0x80>)
 80002b0:	4293      	cmp	r3, r2
 80002b2:	d12a      	bne.n	800030a <HAL_ADC_MspInit+0x76>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80002b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80002b8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80002ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80002be:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80002c0:	2301      	movs	r3, #1
 80002c2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80002c4:	2301      	movs	r3, #1
 80002c6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80002c8:	2310      	movs	r3, #16
 80002ca:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80002cc:	2307      	movs	r3, #7
 80002ce:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80002d0:	2302      	movs	r3, #2
 80002d2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 80002d4:	2304      	movs	r3, #4
 80002d6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80002d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80002dc:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002de:	f107 030c 	add.w	r3, r7, #12
 80002e2:	4618      	mov	r0, r3
 80002e4:	f002 fbe0 	bl	8002aa8 <HAL_RCCEx_PeriphCLKConfig>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <HAL_ADC_MspInit+0x5e>
    {
      Error_Handler();
 80002ee:	f000 f8ef 	bl	80004d0 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80002f2:	4b09      	ldr	r3, [pc, #36]	; (8000318 <HAL_ADC_MspInit+0x84>)
 80002f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002f6:	4a08      	ldr	r2, [pc, #32]	; (8000318 <HAL_ADC_MspInit+0x84>)
 80002f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002fe:	4b06      	ldr	r3, [pc, #24]	; (8000318 <HAL_ADC_MspInit+0x84>)
 8000300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000302:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000306:	60bb      	str	r3, [r7, #8]
 8000308:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800030a:	bf00      	nop
 800030c:	3760      	adds	r7, #96	; 0x60
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	50040000 	.word	0x50040000
 8000318:	40021000 	.word	0x40021000

0800031c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000320:	f000 f965 	bl	80005ee <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000324:	f000 f882 	bl	800042c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_ADC1_Init();
 8000328:	f7ff ff50 	bl	80001cc <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800032c:	217f      	movs	r1, #127	; 0x7f
 800032e:	4834      	ldr	r0, [pc, #208]	; (8000400 <main+0xe4>)
 8000330:	f001 fc10 	bl	8001b54 <HAL_ADCEx_Calibration_Start>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	avaregeSlope = (float) (TS_CAL2_TEMP - TS_CAL1_TEMP) / (TS_CAL2 - TS_CAL1 );
 8000334:	4b33      	ldr	r3, [pc, #204]	; (8000404 <main+0xe8>)
 8000336:	881b      	ldrh	r3, [r3, #0]
 8000338:	461a      	mov	r2, r3
 800033a:	4b33      	ldr	r3, [pc, #204]	; (8000408 <main+0xec>)
 800033c:	881b      	ldrh	r3, [r3, #0]
 800033e:	1ad3      	subs	r3, r2, r3
 8000340:	ee07 3a90 	vmov	s15, r3
 8000344:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000348:	eddf 6a30 	vldr	s13, [pc, #192]	; 800040c <main+0xf0>
 800034c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000350:	4b2f      	ldr	r3, [pc, #188]	; (8000410 <main+0xf4>)
 8000352:	edc3 7a00 	vstr	s15, [r3]
	ratio = (float) REFERENCE_VOLTAGE/CALIBRATION_REFERENCE_VOLTAGE;
 8000356:	4b2f      	ldr	r3, [pc, #188]	; (8000414 <main+0xf8>)
 8000358:	4a2f      	ldr	r2, [pc, #188]	; (8000418 <main+0xfc>)
 800035a:	601a      	str	r2, [r3, #0]
	while (1) {
		HAL_ADC_Start(&hadc1);
 800035c:	4828      	ldr	r0, [pc, #160]	; (8000400 <main+0xe4>)
 800035e:	f000 fd19 	bl	8000d94 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 100);
 8000362:	2164      	movs	r1, #100	; 0x64
 8000364:	4826      	ldr	r0, [pc, #152]	; (8000400 <main+0xe4>)
 8000366:	f000 fdab 	bl	8000ec0 <HAL_ADC_PollForConversion>

		raw_data = HAL_ADC_GetValue(&hadc1);
 800036a:	4825      	ldr	r0, [pc, #148]	; (8000400 <main+0xe4>)
 800036c:	f000 fe37 	bl	8000fde <HAL_ADC_GetValue>
 8000370:	4603      	mov	r3, r0
 8000372:	4a2a      	ldr	r2, [pc, #168]	; (800041c <main+0x100>)
 8000374:	6013      	str	r3, [r2, #0]
		temperature1 = __HAL_ADC_CALC_TEMPERATURE(3300, raw_data, ADC_RESOLUTION_12B);
 8000376:	4b29      	ldr	r3, [pc, #164]	; (800041c <main+0x100>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	f640 42e4 	movw	r2, #3300	; 0xce4
 800037e:	fb02 f303 	mul.w	r3, r2, r3
 8000382:	4a27      	ldr	r2, [pc, #156]	; (8000420 <main+0x104>)
 8000384:	fba2 2303 	umull	r2, r3, r2, r3
 8000388:	099b      	lsrs	r3, r3, #6
 800038a:	461a      	mov	r2, r3
 800038c:	4b1e      	ldr	r3, [pc, #120]	; (8000408 <main+0xec>)
 800038e:	881b      	ldrh	r3, [r3, #0]
 8000390:	1ad3      	subs	r3, r2, r3
 8000392:	2264      	movs	r2, #100	; 0x64
 8000394:	fb03 f202 	mul.w	r2, r3, r2
 8000398:	4b1a      	ldr	r3, [pc, #104]	; (8000404 <main+0xe8>)
 800039a:	881b      	ldrh	r3, [r3, #0]
 800039c:	4619      	mov	r1, r3
 800039e:	4b1a      	ldr	r3, [pc, #104]	; (8000408 <main+0xec>)
 80003a0:	881b      	ldrh	r3, [r3, #0]
 80003a2:	1acb      	subs	r3, r1, r3
 80003a4:	fb92 f3f3 	sdiv	r3, r2, r3
 80003a8:	331e      	adds	r3, #30
 80003aa:	ee07 3a90 	vmov	s15, r3
 80003ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80003b2:	4b1c      	ldr	r3, [pc, #112]	; (8000424 <main+0x108>)
 80003b4:	edc3 7a00 	vstr	s15, [r3]
		temperature2 = (float) (raw_data * ratio - TS_CAL1 ) * avaregeSlope + TS_CAL1_TEMP;
 80003b8:	4b18      	ldr	r3, [pc, #96]	; (800041c <main+0x100>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	ee07 3a90 	vmov	s15, r3
 80003c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80003c4:	4b13      	ldr	r3, [pc, #76]	; (8000414 <main+0xf8>)
 80003c6:	edd3 7a00 	vldr	s15, [r3]
 80003ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80003ce:	4b0e      	ldr	r3, [pc, #56]	; (8000408 <main+0xec>)
 80003d0:	881b      	ldrh	r3, [r3, #0]
 80003d2:	ee07 3a90 	vmov	s15, r3
 80003d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80003da:	ee37 7a67 	vsub.f32	s14, s14, s15
 80003de:	4b0c      	ldr	r3, [pc, #48]	; (8000410 <main+0xf4>)
 80003e0:	edd3 7a00 	vldr	s15, [r3]
 80003e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80003e8:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80003ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80003f0:	4b0d      	ldr	r3, [pc, #52]	; (8000428 <main+0x10c>)
 80003f2:	edc3 7a00 	vstr	s15, [r3]

		HAL_ADC_Stop(&hadc1);
 80003f6:	4802      	ldr	r0, [pc, #8]	; (8000400 <main+0xe4>)
 80003f8:	f000 fd2f 	bl	8000e5a <HAL_ADC_Stop>
		HAL_ADC_Start(&hadc1);
 80003fc:	e7ae      	b.n	800035c <main+0x40>
 80003fe:	bf00      	nop
 8000400:	20000028 	.word	0x20000028
 8000404:	1fff75ca 	.word	0x1fff75ca
 8000408:	1fff75a8 	.word	0x1fff75a8
 800040c:	42c80000 	.word	0x42c80000
 8000410:	20000098 	.word	0x20000098
 8000414:	2000009c 	.word	0x2000009c
 8000418:	3f8ccccd 	.word	0x3f8ccccd
 800041c:	2000008c 	.word	0x2000008c
 8000420:	057619f1 	.word	0x057619f1
 8000424:	20000090 	.word	0x20000090
 8000428:	20000094 	.word	0x20000094

0800042c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800042c:	b580      	push	{r7, lr}
 800042e:	b096      	sub	sp, #88	; 0x58
 8000430:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000432:	f107 0314 	add.w	r3, r7, #20
 8000436:	2244      	movs	r2, #68	; 0x44
 8000438:	2100      	movs	r1, #0
 800043a:	4618      	mov	r0, r3
 800043c:	f002 fe40 	bl	80030c0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000440:	463b      	mov	r3, r7
 8000442:	2200      	movs	r2, #0
 8000444:	601a      	str	r2, [r3, #0]
 8000446:	605a      	str	r2, [r3, #4]
 8000448:	609a      	str	r2, [r3, #8]
 800044a:	60da      	str	r2, [r3, #12]
 800044c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 800044e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000452:	f001 fcd3 	bl	8001dfc <HAL_PWREx_ControlVoltageScaling>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d001      	beq.n	8000460 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 800045c:	f000 f838 	bl	80004d0 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000460:	2310      	movs	r3, #16
 8000462:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000464:	2301      	movs	r3, #1
 8000466:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8000468:	2300      	movs	r3, #0
 800046a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800046c:	2360      	movs	r3, #96	; 0x60
 800046e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000470:	2302      	movs	r3, #2
 8000472:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000474:	2301      	movs	r3, #1
 8000476:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000478:	2301      	movs	r3, #1
 800047a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 16;
 800047c:	2310      	movs	r3, #16
 800047e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000480:	2307      	movs	r3, #7
 8000482:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000484:	2302      	movs	r3, #2
 8000486:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000488:	2302      	movs	r3, #2
 800048a:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800048c:	f107 0314 	add.w	r3, r7, #20
 8000490:	4618      	mov	r0, r3
 8000492:	f001 fd09 	bl	8001ea8 <HAL_RCC_OscConfig>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d001      	beq.n	80004a0 <SystemClock_Config+0x74>
		Error_Handler();
 800049c:	f000 f818 	bl	80004d0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80004a0:	230f      	movs	r3, #15
 80004a2:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004a4:	2303      	movs	r3, #3
 80004a6:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004a8:	2300      	movs	r3, #0
 80004aa:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004ac:	2300      	movs	r3, #0
 80004ae:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004b0:	2300      	movs	r3, #0
 80004b2:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80004b4:	463b      	mov	r3, r7
 80004b6:	2101      	movs	r1, #1
 80004b8:	4618      	mov	r0, r3
 80004ba:	f002 f909 	bl	80026d0 <HAL_RCC_ClockConfig>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d001      	beq.n	80004c8 <SystemClock_Config+0x9c>
		Error_Handler();
 80004c4:	f000 f804 	bl	80004d0 <Error_Handler>
	}
}
 80004c8:	bf00      	nop
 80004ca:	3758      	adds	r7, #88	; 0x58
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}

080004d0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004d4:	b672      	cpsid	i
}
 80004d6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80004d8:	e7fe      	b.n	80004d8 <Error_Handler+0x8>
	...

080004dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004e2:	4b0f      	ldr	r3, [pc, #60]	; (8000520 <HAL_MspInit+0x44>)
 80004e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004e6:	4a0e      	ldr	r2, [pc, #56]	; (8000520 <HAL_MspInit+0x44>)
 80004e8:	f043 0301 	orr.w	r3, r3, #1
 80004ec:	6613      	str	r3, [r2, #96]	; 0x60
 80004ee:	4b0c      	ldr	r3, [pc, #48]	; (8000520 <HAL_MspInit+0x44>)
 80004f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004f2:	f003 0301 	and.w	r3, r3, #1
 80004f6:	607b      	str	r3, [r7, #4]
 80004f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004fa:	4b09      	ldr	r3, [pc, #36]	; (8000520 <HAL_MspInit+0x44>)
 80004fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004fe:	4a08      	ldr	r2, [pc, #32]	; (8000520 <HAL_MspInit+0x44>)
 8000500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000504:	6593      	str	r3, [r2, #88]	; 0x58
 8000506:	4b06      	ldr	r3, [pc, #24]	; (8000520 <HAL_MspInit+0x44>)
 8000508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800050a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800050e:	603b      	str	r3, [r7, #0]
 8000510:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000512:	bf00      	nop
 8000514:	370c      	adds	r7, #12
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	40021000 	.word	0x40021000

08000524 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000528:	e7fe      	b.n	8000528 <NMI_Handler+0x4>

0800052a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800052a:	b480      	push	{r7}
 800052c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800052e:	e7fe      	b.n	800052e <HardFault_Handler+0x4>

08000530 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000534:	e7fe      	b.n	8000534 <MemManage_Handler+0x4>

08000536 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000536:	b480      	push	{r7}
 8000538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800053a:	e7fe      	b.n	800053a <BusFault_Handler+0x4>

0800053c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000540:	e7fe      	b.n	8000540 <UsageFault_Handler+0x4>

08000542 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000542:	b480      	push	{r7}
 8000544:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000546:	bf00      	nop
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr

08000550 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000554:	bf00      	nop
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr

0800055e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800055e:	b480      	push	{r7}
 8000560:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000562:	bf00      	nop
 8000564:	46bd      	mov	sp, r7
 8000566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056a:	4770      	bx	lr

0800056c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000570:	f000 f892 	bl	8000698 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000574:	bf00      	nop
 8000576:	bd80      	pop	{r7, pc}

08000578 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800057c:	4b06      	ldr	r3, [pc, #24]	; (8000598 <SystemInit+0x20>)
 800057e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000582:	4a05      	ldr	r2, [pc, #20]	; (8000598 <SystemInit+0x20>)
 8000584:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000588:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800058c:	bf00      	nop
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	e000ed00 	.word	0xe000ed00

0800059c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800059c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005d4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005a0:	f7ff ffea 	bl	8000578 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005a4:	480c      	ldr	r0, [pc, #48]	; (80005d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80005a6:	490d      	ldr	r1, [pc, #52]	; (80005dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80005a8:	4a0d      	ldr	r2, [pc, #52]	; (80005e0 <LoopForever+0xe>)
  movs r3, #0
 80005aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005ac:	e002      	b.n	80005b4 <LoopCopyDataInit>

080005ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005b2:	3304      	adds	r3, #4

080005b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005b8:	d3f9      	bcc.n	80005ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ba:	4a0a      	ldr	r2, [pc, #40]	; (80005e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005bc:	4c0a      	ldr	r4, [pc, #40]	; (80005e8 <LoopForever+0x16>)
  movs r3, #0
 80005be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005c0:	e001      	b.n	80005c6 <LoopFillZerobss>

080005c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005c4:	3204      	adds	r2, #4

080005c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005c8:	d3fb      	bcc.n	80005c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005ca:	f002 fd55 	bl	8003078 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005ce:	f7ff fea5 	bl	800031c <main>

080005d2 <LoopForever>:

LoopForever:
    b LoopForever
 80005d2:	e7fe      	b.n	80005d2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80005d4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80005d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005dc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005e0:	08003130 	.word	0x08003130
  ldr r2, =_sbss
 80005e4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005e8:	200000a4 	.word	0x200000a4

080005ec <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005ec:	e7fe      	b.n	80005ec <ADC1_IRQHandler>

080005ee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005ee:	b580      	push	{r7, lr}
 80005f0:	b082      	sub	sp, #8
 80005f2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005f4:	2300      	movs	r3, #0
 80005f6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005f8:	2003      	movs	r0, #3
 80005fa:	f001 fbbd 	bl	8001d78 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005fe:	2000      	movs	r0, #0
 8000600:	f000 f80e 	bl	8000620 <HAL_InitTick>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d002      	beq.n	8000610 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800060a:	2301      	movs	r3, #1
 800060c:	71fb      	strb	r3, [r7, #7]
 800060e:	e001      	b.n	8000614 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000610:	f7ff ff64 	bl	80004dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000614:	79fb      	ldrb	r3, [r7, #7]
}
 8000616:	4618      	mov	r0, r3
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
	...

08000620 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000628:	2300      	movs	r3, #0
 800062a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800062c:	4b17      	ldr	r3, [pc, #92]	; (800068c <HAL_InitTick+0x6c>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d023      	beq.n	800067c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000634:	4b16      	ldr	r3, [pc, #88]	; (8000690 <HAL_InitTick+0x70>)
 8000636:	681a      	ldr	r2, [r3, #0]
 8000638:	4b14      	ldr	r3, [pc, #80]	; (800068c <HAL_InitTick+0x6c>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	4619      	mov	r1, r3
 800063e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000642:	fbb3 f3f1 	udiv	r3, r3, r1
 8000646:	fbb2 f3f3 	udiv	r3, r2, r3
 800064a:	4618      	mov	r0, r3
 800064c:	f001 fbbb 	bl	8001dc6 <HAL_SYSTICK_Config>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d10f      	bne.n	8000676 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	2b0f      	cmp	r3, #15
 800065a:	d809      	bhi.n	8000670 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800065c:	2200      	movs	r2, #0
 800065e:	6879      	ldr	r1, [r7, #4]
 8000660:	f04f 30ff 	mov.w	r0, #4294967295
 8000664:	f001 fb93 	bl	8001d8e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000668:	4a0a      	ldr	r2, [pc, #40]	; (8000694 <HAL_InitTick+0x74>)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	6013      	str	r3, [r2, #0]
 800066e:	e007      	b.n	8000680 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000670:	2301      	movs	r3, #1
 8000672:	73fb      	strb	r3, [r7, #15]
 8000674:	e004      	b.n	8000680 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000676:	2301      	movs	r3, #1
 8000678:	73fb      	strb	r3, [r7, #15]
 800067a:	e001      	b.n	8000680 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800067c:	2301      	movs	r3, #1
 800067e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000680:	7bfb      	ldrb	r3, [r7, #15]
}
 8000682:	4618      	mov	r0, r3
 8000684:	3710      	adds	r7, #16
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	20000008 	.word	0x20000008
 8000690:	20000000 	.word	0x20000000
 8000694:	20000004 	.word	0x20000004

08000698 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800069c:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <HAL_IncTick+0x20>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	461a      	mov	r2, r3
 80006a2:	4b06      	ldr	r3, [pc, #24]	; (80006bc <HAL_IncTick+0x24>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4413      	add	r3, r2
 80006a8:	4a04      	ldr	r2, [pc, #16]	; (80006bc <HAL_IncTick+0x24>)
 80006aa:	6013      	str	r3, [r2, #0]
}
 80006ac:	bf00      	nop
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	20000008 	.word	0x20000008
 80006bc:	200000a0 	.word	0x200000a0

080006c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  return uwTick;
 80006c4:	4b03      	ldr	r3, [pc, #12]	; (80006d4 <HAL_GetTick+0x14>)
 80006c6:	681b      	ldr	r3, [r3, #0]
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	200000a0 	.word	0x200000a0

080006d8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
 80006e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	689b      	ldr	r3, [r3, #8]
 80006e6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	431a      	orrs	r2, r3
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	609a      	str	r2, [r3, #8]
}
 80006f2:	bf00      	nop
 80006f4:	370c      	adds	r7, #12
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr

080006fe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80006fe:	b480      	push	{r7}
 8000700:	b083      	sub	sp, #12
 8000702:	af00      	add	r7, sp, #0
 8000704:	6078      	str	r0, [r7, #4]
 8000706:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	689b      	ldr	r3, [r3, #8]
 800070c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	431a      	orrs	r2, r3
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	609a      	str	r2, [r3, #8]
}
 8000718:	bf00      	nop
 800071a:	370c      	adds	r7, #12
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr

08000724 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	689b      	ldr	r3, [r3, #8]
 8000730:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000734:	4618      	mov	r0, r3
 8000736:	370c      	adds	r7, #12
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr

08000740 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000740:	b480      	push	{r7}
 8000742:	b087      	sub	sp, #28
 8000744:	af00      	add	r7, sp, #0
 8000746:	60f8      	str	r0, [r7, #12]
 8000748:	60b9      	str	r1, [r7, #8]
 800074a:	607a      	str	r2, [r7, #4]
 800074c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	3360      	adds	r3, #96	; 0x60
 8000752:	461a      	mov	r2, r3
 8000754:	68bb      	ldr	r3, [r7, #8]
 8000756:	009b      	lsls	r3, r3, #2
 8000758:	4413      	add	r3, r2
 800075a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800075c:	697b      	ldr	r3, [r7, #20]
 800075e:	681a      	ldr	r2, [r3, #0]
 8000760:	4b08      	ldr	r3, [pc, #32]	; (8000784 <LL_ADC_SetOffset+0x44>)
 8000762:	4013      	ands	r3, r2
 8000764:	687a      	ldr	r2, [r7, #4]
 8000766:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800076a:	683a      	ldr	r2, [r7, #0]
 800076c:	430a      	orrs	r2, r1
 800076e:	4313      	orrs	r3, r2
 8000770:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000774:	697b      	ldr	r3, [r7, #20]
 8000776:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000778:	bf00      	nop
 800077a:	371c      	adds	r7, #28
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr
 8000784:	03fff000 	.word	0x03fff000

08000788 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000788:	b480      	push	{r7}
 800078a:	b085      	sub	sp, #20
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
 8000790:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	3360      	adds	r3, #96	; 0x60
 8000796:	461a      	mov	r2, r3
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	009b      	lsls	r3, r3, #2
 800079c:	4413      	add	r3, r2
 800079e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3714      	adds	r7, #20
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr

080007b4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b087      	sub	sp, #28
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	60f8      	str	r0, [r7, #12]
 80007bc:	60b9      	str	r1, [r7, #8]
 80007be:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	3360      	adds	r3, #96	; 0x60
 80007c4:	461a      	mov	r2, r3
 80007c6:	68bb      	ldr	r3, [r7, #8]
 80007c8:	009b      	lsls	r3, r3, #2
 80007ca:	4413      	add	r3, r2
 80007cc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80007ce:	697b      	ldr	r3, [r7, #20]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	431a      	orrs	r2, r3
 80007da:	697b      	ldr	r3, [r7, #20]
 80007dc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80007de:	bf00      	nop
 80007e0:	371c      	adds	r7, #28
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr

080007ea <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80007ea:	b480      	push	{r7}
 80007ec:	b083      	sub	sp, #12
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	68db      	ldr	r3, [r3, #12]
 80007f6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d101      	bne.n	8000802 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80007fe:	2301      	movs	r3, #1
 8000800:	e000      	b.n	8000804 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000802:	2300      	movs	r3, #0
}
 8000804:	4618      	mov	r0, r3
 8000806:	370c      	adds	r7, #12
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr

08000810 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000810:	b480      	push	{r7}
 8000812:	b087      	sub	sp, #28
 8000814:	af00      	add	r7, sp, #0
 8000816:	60f8      	str	r0, [r7, #12]
 8000818:	60b9      	str	r1, [r7, #8]
 800081a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	3330      	adds	r3, #48	; 0x30
 8000820:	461a      	mov	r2, r3
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	0a1b      	lsrs	r3, r3, #8
 8000826:	009b      	lsls	r3, r3, #2
 8000828:	f003 030c 	and.w	r3, r3, #12
 800082c:	4413      	add	r3, r2
 800082e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	681a      	ldr	r2, [r3, #0]
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	f003 031f 	and.w	r3, r3, #31
 800083a:	211f      	movs	r1, #31
 800083c:	fa01 f303 	lsl.w	r3, r1, r3
 8000840:	43db      	mvns	r3, r3
 8000842:	401a      	ands	r2, r3
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	0e9b      	lsrs	r3, r3, #26
 8000848:	f003 011f 	and.w	r1, r3, #31
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	f003 031f 	and.w	r3, r3, #31
 8000852:	fa01 f303 	lsl.w	r3, r1, r3
 8000856:	431a      	orrs	r2, r3
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800085c:	bf00      	nop
 800085e:	371c      	adds	r7, #28
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr

08000868 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000868:	b480      	push	{r7}
 800086a:	b087      	sub	sp, #28
 800086c:	af00      	add	r7, sp, #0
 800086e:	60f8      	str	r0, [r7, #12]
 8000870:	60b9      	str	r1, [r7, #8]
 8000872:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	3314      	adds	r3, #20
 8000878:	461a      	mov	r2, r3
 800087a:	68bb      	ldr	r3, [r7, #8]
 800087c:	0e5b      	lsrs	r3, r3, #25
 800087e:	009b      	lsls	r3, r3, #2
 8000880:	f003 0304 	and.w	r3, r3, #4
 8000884:	4413      	add	r3, r2
 8000886:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	681a      	ldr	r2, [r3, #0]
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	0d1b      	lsrs	r3, r3, #20
 8000890:	f003 031f 	and.w	r3, r3, #31
 8000894:	2107      	movs	r1, #7
 8000896:	fa01 f303 	lsl.w	r3, r1, r3
 800089a:	43db      	mvns	r3, r3
 800089c:	401a      	ands	r2, r3
 800089e:	68bb      	ldr	r3, [r7, #8]
 80008a0:	0d1b      	lsrs	r3, r3, #20
 80008a2:	f003 031f 	and.w	r3, r3, #31
 80008a6:	6879      	ldr	r1, [r7, #4]
 80008a8:	fa01 f303 	lsl.w	r3, r1, r3
 80008ac:	431a      	orrs	r2, r3
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80008b2:	bf00      	nop
 80008b4:	371c      	adds	r7, #28
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
	...

080008c0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b085      	sub	sp, #20
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	60b9      	str	r1, [r7, #8]
 80008ca:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80008d2:	68bb      	ldr	r3, [r7, #8]
 80008d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80008d8:	43db      	mvns	r3, r3
 80008da:	401a      	ands	r2, r3
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	f003 0318 	and.w	r3, r3, #24
 80008e2:	4908      	ldr	r1, [pc, #32]	; (8000904 <LL_ADC_SetChannelSingleDiff+0x44>)
 80008e4:	40d9      	lsrs	r1, r3
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	400b      	ands	r3, r1
 80008ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80008ee:	431a      	orrs	r2, r3
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80008f6:	bf00      	nop
 80008f8:	3714      	adds	r7, #20
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	0007ffff 	.word	0x0007ffff

08000908 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	689b      	ldr	r3, [r3, #8]
 8000914:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000918:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800091c:	687a      	ldr	r2, [r7, #4]
 800091e:	6093      	str	r3, [r2, #8]
}
 8000920:	bf00      	nop
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	689b      	ldr	r3, [r3, #8]
 8000938:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800093c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000940:	d101      	bne.n	8000946 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000942:	2301      	movs	r3, #1
 8000944:	e000      	b.n	8000948 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000946:	2300      	movs	r3, #0
}
 8000948:	4618      	mov	r0, r3
 800094a:	370c      	adds	r7, #12
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr

08000954 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	689b      	ldr	r3, [r3, #8]
 8000960:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000964:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000968:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000970:	bf00      	nop
 8000972:	370c      	adds	r7, #12
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr

0800097c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	689b      	ldr	r3, [r3, #8]
 8000988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000990:	d101      	bne.n	8000996 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000992:	2301      	movs	r3, #1
 8000994:	e000      	b.n	8000998 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000996:	2300      	movs	r3, #0
}
 8000998:	4618      	mov	r0, r3
 800099a:	370c      	adds	r7, #12
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr

080009a4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	689b      	ldr	r3, [r3, #8]
 80009b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80009b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80009b8:	f043 0201 	orr.w	r2, r3, #1
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80009c0:	bf00      	nop
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	689b      	ldr	r3, [r3, #8]
 80009d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80009dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80009e0:	f043 0202 	orr.w	r2, r3, #2
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80009e8:	bf00      	nop
 80009ea:	370c      	adds	r7, #12
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	689b      	ldr	r3, [r3, #8]
 8000a00:	f003 0301 	and.w	r3, r3, #1
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d101      	bne.n	8000a0c <LL_ADC_IsEnabled+0x18>
 8000a08:	2301      	movs	r3, #1
 8000a0a:	e000      	b.n	8000a0e <LL_ADC_IsEnabled+0x1a>
 8000a0c:	2300      	movs	r3, #0
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr

08000a1a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	b083      	sub	sp, #12
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	689b      	ldr	r3, [r3, #8]
 8000a26:	f003 0302 	and.w	r3, r3, #2
 8000a2a:	2b02      	cmp	r3, #2
 8000a2c:	d101      	bne.n	8000a32 <LL_ADC_IsDisableOngoing+0x18>
 8000a2e:	2301      	movs	r3, #1
 8000a30:	e000      	b.n	8000a34 <LL_ADC_IsDisableOngoing+0x1a>
 8000a32:	2300      	movs	r3, #0
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	689b      	ldr	r3, [r3, #8]
 8000a4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000a50:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000a54:	f043 0204 	orr.w	r2, r3, #4
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000a5c:	bf00      	nop
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	689b      	ldr	r3, [r3, #8]
 8000a74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000a78:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000a7c:	f043 0210 	orr.w	r2, r3, #16
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8000a84:	bf00      	nop
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	689b      	ldr	r3, [r3, #8]
 8000a9c:	f003 0304 	and.w	r3, r3, #4
 8000aa0:	2b04      	cmp	r3, #4
 8000aa2:	d101      	bne.n	8000aa8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	e000      	b.n	8000aaa <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000aa8:	2300      	movs	r3, #0
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr

08000ab6 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	b083      	sub	sp, #12
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	689b      	ldr	r3, [r3, #8]
 8000ac2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000aca:	f043 0220 	orr.w	r2, r3, #32
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8000ad2:	bf00      	nop
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	b083      	sub	sp, #12
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	689b      	ldr	r3, [r3, #8]
 8000aea:	f003 0308 	and.w	r3, r3, #8
 8000aee:	2b08      	cmp	r3, #8
 8000af0:	d101      	bne.n	8000af6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000af2:	2301      	movs	r3, #1
 8000af4:	e000      	b.n	8000af8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000af6:	2300      	movs	r3, #0
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr

08000b04 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b088      	sub	sp, #32
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d101      	bne.n	8000b1e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	e12c      	b.n	8000d78 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	691b      	ldr	r3, [r3, #16]
 8000b22:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d109      	bne.n	8000b40 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b2c:	6878      	ldr	r0, [r7, #4]
 8000b2e:	f7ff fbb1 	bl	8000294 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2200      	movs	r2, #0
 8000b36:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff fef1 	bl	800092c <LL_ADC_IsDeepPowerDownEnabled>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d004      	beq.n	8000b5a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff fed7 	bl	8000908 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff ff0c 	bl	800097c <LL_ADC_IsInternalRegulatorEnabled>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d115      	bne.n	8000b96 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff fef0 	bl	8000954 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000b74:	4b82      	ldr	r3, [pc, #520]	; (8000d80 <HAL_ADC_Init+0x27c>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	099b      	lsrs	r3, r3, #6
 8000b7a:	4a82      	ldr	r2, [pc, #520]	; (8000d84 <HAL_ADC_Init+0x280>)
 8000b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b80:	099b      	lsrs	r3, r3, #6
 8000b82:	3301      	adds	r3, #1
 8000b84:	005b      	lsls	r3, r3, #1
 8000b86:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000b88:	e002      	b.n	8000b90 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	3b01      	subs	r3, #1
 8000b8e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d1f9      	bne.n	8000b8a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f7ff feee 	bl	800097c <LL_ADC_IsInternalRegulatorEnabled>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d10d      	bne.n	8000bc2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000baa:	f043 0210 	orr.w	r2, r3, #16
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bb6:	f043 0201 	orr.w	r2, r3, #1
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff ff62 	bl	8000a90 <LL_ADC_REG_IsConversionOngoing>
 8000bcc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000bd2:	f003 0310 	and.w	r3, r3, #16
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	f040 80c5 	bne.w	8000d66 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	f040 80c1 	bne.w	8000d66 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000be8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000bec:	f043 0202 	orr.w	r2, r3, #2
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff fefb 	bl	80009f4 <LL_ADC_IsEnabled>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d10b      	bne.n	8000c1c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000c04:	4860      	ldr	r0, [pc, #384]	; (8000d88 <HAL_ADC_Init+0x284>)
 8000c06:	f7ff fef5 	bl	80009f4 <LL_ADC_IsEnabled>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d105      	bne.n	8000c1c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	4619      	mov	r1, r3
 8000c16:	485d      	ldr	r0, [pc, #372]	; (8000d8c <HAL_ADC_Init+0x288>)
 8000c18:	f7ff fd5e 	bl	80006d8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	7e5b      	ldrb	r3, [r3, #25]
 8000c20:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000c26:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8000c2c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8000c32:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c3a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d106      	bne.n	8000c58 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c4e:	3b01      	subs	r3, #1
 8000c50:	045b      	lsls	r3, r3, #17
 8000c52:	69ba      	ldr	r2, [r7, #24]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d009      	beq.n	8000c74 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c64:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c6c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000c6e:	69ba      	ldr	r2, [r7, #24]
 8000c70:	4313      	orrs	r3, r2
 8000c72:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	68da      	ldr	r2, [r3, #12]
 8000c7a:	4b45      	ldr	r3, [pc, #276]	; (8000d90 <HAL_ADC_Init+0x28c>)
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	6812      	ldr	r2, [r2, #0]
 8000c82:	69b9      	ldr	r1, [r7, #24]
 8000c84:	430b      	orrs	r3, r1
 8000c86:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff feff 	bl	8000a90 <LL_ADC_REG_IsConversionOngoing>
 8000c92:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff ff20 	bl	8000ade <LL_ADC_INJ_IsConversionOngoing>
 8000c9e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000ca0:	693b      	ldr	r3, [r7, #16]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d13d      	bne.n	8000d22 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d13a      	bne.n	8000d22 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000cb0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000cb8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000cc8:	f023 0302 	bic.w	r3, r3, #2
 8000ccc:	687a      	ldr	r2, [r7, #4]
 8000cce:	6812      	ldr	r2, [r2, #0]
 8000cd0:	69b9      	ldr	r1, [r7, #24]
 8000cd2:	430b      	orrs	r3, r1
 8000cd4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d118      	bne.n	8000d12 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	691b      	ldr	r3, [r3, #16]
 8000ce6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000cea:	f023 0304 	bic.w	r3, r3, #4
 8000cee:	687a      	ldr	r2, [r7, #4]
 8000cf0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8000cf2:	687a      	ldr	r2, [r7, #4]
 8000cf4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000cf6:	4311      	orrs	r1, r2
 8000cf8:	687a      	ldr	r2, [r7, #4]
 8000cfa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000cfc:	4311      	orrs	r1, r2
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000d02:	430a      	orrs	r2, r1
 8000d04:	431a      	orrs	r2, r3
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f042 0201 	orr.w	r2, r2, #1
 8000d0e:	611a      	str	r2, [r3, #16]
 8000d10:	e007      	b.n	8000d22 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	691a      	ldr	r2, [r3, #16]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f022 0201 	bic.w	r2, r2, #1
 8000d20:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	691b      	ldr	r3, [r3, #16]
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d10c      	bne.n	8000d44 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d30:	f023 010f 	bic.w	r1, r3, #15
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	69db      	ldr	r3, [r3, #28]
 8000d38:	1e5a      	subs	r2, r3, #1
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	430a      	orrs	r2, r1
 8000d40:	631a      	str	r2, [r3, #48]	; 0x30
 8000d42:	e007      	b.n	8000d54 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f022 020f 	bic.w	r2, r2, #15
 8000d52:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d58:	f023 0303 	bic.w	r3, r3, #3
 8000d5c:	f043 0201 	orr.w	r2, r3, #1
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	655a      	str	r2, [r3, #84]	; 0x54
 8000d64:	e007      	b.n	8000d76 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d6a:	f043 0210 	orr.w	r2, r3, #16
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000d76:	7ffb      	ldrb	r3, [r7, #31]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3720      	adds	r7, #32
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20000000 	.word	0x20000000
 8000d84:	053e2d63 	.word	0x053e2d63
 8000d88:	50040000 	.word	0x50040000
 8000d8c:	50040300 	.word	0x50040300
 8000d90:	fff0c007 	.word	0xfff0c007

08000d94 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff fe75 	bl	8000a90 <LL_ADC_REG_IsConversionOngoing>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d14f      	bne.n	8000e4c <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d101      	bne.n	8000dba <HAL_ADC_Start+0x26>
 8000db6:	2302      	movs	r3, #2
 8000db8:	e04b      	b.n	8000e52 <HAL_ADC_Start+0xbe>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f000 fdb4 	bl	8001930 <ADC_Enable>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000dcc:	7bfb      	ldrb	r3, [r7, #15]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d137      	bne.n	8000e42 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dd6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000dda:	f023 0301 	bic.w	r3, r3, #1
 8000dde:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000df2:	d106      	bne.n	8000e02 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000df8:	f023 0206 	bic.w	r2, r3, #6
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	659a      	str	r2, [r3, #88]	; 0x58
 8000e00:	e002      	b.n	8000e08 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2200      	movs	r2, #0
 8000e06:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	221c      	movs	r2, #28
 8000e0e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2200      	movs	r2, #0
 8000e14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	68db      	ldr	r3, [r3, #12]
 8000e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d007      	beq.n	8000e36 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e2a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e2e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff fe00 	bl	8000a40 <LL_ADC_REG_StartConversion>
 8000e40:	e006      	b.n	8000e50 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2200      	movs	r2, #0
 8000e46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8000e4a:	e001      	b.n	8000e50 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8000e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3710      	adds	r7, #16
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b084      	sub	sp, #16
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d101      	bne.n	8000e70 <HAL_ADC_Stop+0x16>
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	e023      	b.n	8000eb8 <HAL_ADC_Stop+0x5e>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2201      	movs	r2, #1
 8000e74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8000e78:	2103      	movs	r1, #3
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	f000 fc9c 	bl	80017b8 <ADC_ConversionStop>
 8000e80:	4603      	mov	r3, r0
 8000e82:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8000e84:	7bfb      	ldrb	r3, [r7, #15]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d111      	bne.n	8000eae <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f000 fdd6 	bl	8001a3c <ADC_Disable>
 8000e90:	4603      	mov	r3, r0
 8000e92:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8000e94:	7bfb      	ldrb	r3, [r7, #15]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d109      	bne.n	8000eae <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e9e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ea2:	f023 0301 	bic.w	r3, r3, #1
 8000ea6:	f043 0201 	orr.w	r2, r3, #1
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8000eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3710      	adds	r7, #16
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	695b      	ldr	r3, [r3, #20]
 8000ece:	2b08      	cmp	r3, #8
 8000ed0:	d102      	bne.n	8000ed8 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8000ed2:	2308      	movs	r3, #8
 8000ed4:	617b      	str	r3, [r7, #20]
 8000ed6:	e010      	b.n	8000efa <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	68db      	ldr	r3, [r3, #12]
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d007      	beq.n	8000ef6 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000eea:	f043 0220 	orr.w	r2, r3, #32
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e06f      	b.n	8000fd6 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8000ef6:	2304      	movs	r3, #4
 8000ef8:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8000efa:	f7ff fbe1 	bl	80006c0 <HAL_GetTick>
 8000efe:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8000f00:	e021      	b.n	8000f46 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f08:	d01d      	beq.n	8000f46 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8000f0a:	f7ff fbd9 	bl	80006c0 <HAL_GetTick>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	683a      	ldr	r2, [r7, #0]
 8000f16:	429a      	cmp	r2, r3
 8000f18:	d302      	bcc.n	8000f20 <HAL_ADC_PollForConversion+0x60>
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d112      	bne.n	8000f46 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d10b      	bne.n	8000f46 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f32:	f043 0204 	orr.w	r2, r3, #4
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8000f42:	2303      	movs	r3, #3
 8000f44:	e047      	b.n	8000fd6 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	4013      	ands	r3, r2
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d0d6      	beq.n	8000f02 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f58:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff fc40 	bl	80007ea <LL_ADC_REG_IsTriggerSourceSWStart>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d01c      	beq.n	8000faa <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	7e5b      	ldrb	r3, [r3, #25]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d118      	bne.n	8000faa <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f003 0308 	and.w	r3, r3, #8
 8000f82:	2b08      	cmp	r3, #8
 8000f84:	d111      	bne.n	8000faa <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d105      	bne.n	8000faa <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fa2:	f043 0201 	orr.w	r2, r3, #1
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	2b08      	cmp	r3, #8
 8000fb6:	d104      	bne.n	8000fc2 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2208      	movs	r2, #8
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	e008      	b.n	8000fd4 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d103      	bne.n	8000fd4 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	220c      	movs	r2, #12
 8000fd2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3718      	adds	r7, #24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	b083      	sub	sp, #12
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b0b6      	sub	sp, #216	; 0xd8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001002:	2300      	movs	r3, #0
 8001004:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001008:	2300      	movs	r3, #0
 800100a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001012:	2b01      	cmp	r3, #1
 8001014:	d101      	bne.n	800101a <HAL_ADC_ConfigChannel+0x22>
 8001016:	2302      	movs	r3, #2
 8001018:	e3b9      	b.n	800178e <HAL_ADC_ConfigChannel+0x796>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2201      	movs	r2, #1
 800101e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff fd32 	bl	8000a90 <LL_ADC_REG_IsConversionOngoing>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	f040 839e 	bne.w	8001770 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	2b05      	cmp	r3, #5
 800103a:	d824      	bhi.n	8001086 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	3b02      	subs	r3, #2
 8001042:	2b03      	cmp	r3, #3
 8001044:	d81b      	bhi.n	800107e <HAL_ADC_ConfigChannel+0x86>
 8001046:	a201      	add	r2, pc, #4	; (adr r2, 800104c <HAL_ADC_ConfigChannel+0x54>)
 8001048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800104c:	0800105d 	.word	0x0800105d
 8001050:	08001065 	.word	0x08001065
 8001054:	0800106d 	.word	0x0800106d
 8001058:	08001075 	.word	0x08001075
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	220c      	movs	r2, #12
 8001060:	605a      	str	r2, [r3, #4]
          break;
 8001062:	e011      	b.n	8001088 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	2212      	movs	r2, #18
 8001068:	605a      	str	r2, [r3, #4]
          break;
 800106a:	e00d      	b.n	8001088 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	2218      	movs	r2, #24
 8001070:	605a      	str	r2, [r3, #4]
          break;
 8001072:	e009      	b.n	8001088 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	f44f 7280 	mov.w	r2, #256	; 0x100
 800107a:	605a      	str	r2, [r3, #4]
          break;
 800107c:	e004      	b.n	8001088 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	2206      	movs	r2, #6
 8001082:	605a      	str	r2, [r3, #4]
          break;
 8001084:	e000      	b.n	8001088 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001086:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6818      	ldr	r0, [r3, #0]
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	6859      	ldr	r1, [r3, #4]
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	461a      	mov	r2, r3
 8001096:	f7ff fbbb 	bl	8000810 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff fcf6 	bl	8000a90 <LL_ADC_REG_IsConversionOngoing>
 80010a4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff fd16 	bl	8000ade <LL_ADC_INJ_IsConversionOngoing>
 80010b2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80010b6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	f040 81a6 	bne.w	800140c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80010c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	f040 81a1 	bne.w	800140c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6818      	ldr	r0, [r3, #0]
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	6819      	ldr	r1, [r3, #0]
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	461a      	mov	r2, r3
 80010d8:	f7ff fbc6 	bl	8000868 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	695a      	ldr	r2, [r3, #20]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	68db      	ldr	r3, [r3, #12]
 80010e6:	08db      	lsrs	r3, r3, #3
 80010e8:	f003 0303 	and.w	r3, r3, #3
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	691b      	ldr	r3, [r3, #16]
 80010fa:	2b04      	cmp	r3, #4
 80010fc:	d00a      	beq.n	8001114 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6818      	ldr	r0, [r3, #0]
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	6919      	ldr	r1, [r3, #16]
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800110e:	f7ff fb17 	bl	8000740 <LL_ADC_SetOffset>
 8001112:	e17b      	b.n	800140c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2100      	movs	r1, #0
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff fb34 	bl	8000788 <LL_ADC_GetOffsetChannel>
 8001120:	4603      	mov	r3, r0
 8001122:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001126:	2b00      	cmp	r3, #0
 8001128:	d10a      	bne.n	8001140 <HAL_ADC_ConfigChannel+0x148>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2100      	movs	r1, #0
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff fb29 	bl	8000788 <LL_ADC_GetOffsetChannel>
 8001136:	4603      	mov	r3, r0
 8001138:	0e9b      	lsrs	r3, r3, #26
 800113a:	f003 021f 	and.w	r2, r3, #31
 800113e:	e01e      	b.n	800117e <HAL_ADC_ConfigChannel+0x186>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2100      	movs	r1, #0
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff fb1e 	bl	8000788 <LL_ADC_GetOffsetChannel>
 800114c:	4603      	mov	r3, r0
 800114e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001152:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001156:	fa93 f3a3 	rbit	r3, r3
 800115a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800115e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001162:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001166:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d101      	bne.n	8001172 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800116e:	2320      	movs	r3, #32
 8001170:	e004      	b.n	800117c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001172:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001176:	fab3 f383 	clz	r3, r3
 800117a:	b2db      	uxtb	r3, r3
 800117c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001186:	2b00      	cmp	r3, #0
 8001188:	d105      	bne.n	8001196 <HAL_ADC_ConfigChannel+0x19e>
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	0e9b      	lsrs	r3, r3, #26
 8001190:	f003 031f 	and.w	r3, r3, #31
 8001194:	e018      	b.n	80011c8 <HAL_ADC_ConfigChannel+0x1d0>
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800119e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80011a2:	fa93 f3a3 	rbit	r3, r3
 80011a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80011aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80011ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80011b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d101      	bne.n	80011be <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80011ba:	2320      	movs	r3, #32
 80011bc:	e004      	b.n	80011c8 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80011be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80011c2:	fab3 f383 	clz	r3, r3
 80011c6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d106      	bne.n	80011da <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2200      	movs	r2, #0
 80011d2:	2100      	movs	r1, #0
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff faed 	bl	80007b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2101      	movs	r1, #1
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff fad1 	bl	8000788 <LL_ADC_GetOffsetChannel>
 80011e6:	4603      	mov	r3, r0
 80011e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d10a      	bne.n	8001206 <HAL_ADC_ConfigChannel+0x20e>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2101      	movs	r1, #1
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff fac6 	bl	8000788 <LL_ADC_GetOffsetChannel>
 80011fc:	4603      	mov	r3, r0
 80011fe:	0e9b      	lsrs	r3, r3, #26
 8001200:	f003 021f 	and.w	r2, r3, #31
 8001204:	e01e      	b.n	8001244 <HAL_ADC_ConfigChannel+0x24c>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2101      	movs	r1, #1
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff fabb 	bl	8000788 <LL_ADC_GetOffsetChannel>
 8001212:	4603      	mov	r3, r0
 8001214:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001218:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800121c:	fa93 f3a3 	rbit	r3, r3
 8001220:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001224:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001228:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800122c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001230:	2b00      	cmp	r3, #0
 8001232:	d101      	bne.n	8001238 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001234:	2320      	movs	r3, #32
 8001236:	e004      	b.n	8001242 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001238:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800123c:	fab3 f383 	clz	r3, r3
 8001240:	b2db      	uxtb	r3, r3
 8001242:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800124c:	2b00      	cmp	r3, #0
 800124e:	d105      	bne.n	800125c <HAL_ADC_ConfigChannel+0x264>
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	0e9b      	lsrs	r3, r3, #26
 8001256:	f003 031f 	and.w	r3, r3, #31
 800125a:	e018      	b.n	800128e <HAL_ADC_ConfigChannel+0x296>
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001264:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001268:	fa93 f3a3 	rbit	r3, r3
 800126c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001270:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001274:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001278:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800127c:	2b00      	cmp	r3, #0
 800127e:	d101      	bne.n	8001284 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001280:	2320      	movs	r3, #32
 8001282:	e004      	b.n	800128e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001284:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001288:	fab3 f383 	clz	r3, r3
 800128c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800128e:	429a      	cmp	r2, r3
 8001290:	d106      	bne.n	80012a0 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	2200      	movs	r2, #0
 8001298:	2101      	movs	r1, #1
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff fa8a 	bl	80007b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2102      	movs	r1, #2
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff fa6e 	bl	8000788 <LL_ADC_GetOffsetChannel>
 80012ac:	4603      	mov	r3, r0
 80012ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d10a      	bne.n	80012cc <HAL_ADC_ConfigChannel+0x2d4>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2102      	movs	r1, #2
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff fa63 	bl	8000788 <LL_ADC_GetOffsetChannel>
 80012c2:	4603      	mov	r3, r0
 80012c4:	0e9b      	lsrs	r3, r3, #26
 80012c6:	f003 021f 	and.w	r2, r3, #31
 80012ca:	e01e      	b.n	800130a <HAL_ADC_ConfigChannel+0x312>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2102      	movs	r1, #2
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff fa58 	bl	8000788 <LL_ADC_GetOffsetChannel>
 80012d8:	4603      	mov	r3, r0
 80012da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80012e2:	fa93 f3a3 	rbit	r3, r3
 80012e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80012ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80012ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80012f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d101      	bne.n	80012fe <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80012fa:	2320      	movs	r3, #32
 80012fc:	e004      	b.n	8001308 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80012fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001302:	fab3 f383 	clz	r3, r3
 8001306:	b2db      	uxtb	r3, r3
 8001308:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001312:	2b00      	cmp	r3, #0
 8001314:	d105      	bne.n	8001322 <HAL_ADC_ConfigChannel+0x32a>
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	0e9b      	lsrs	r3, r3, #26
 800131c:	f003 031f 	and.w	r3, r3, #31
 8001320:	e016      	b.n	8001350 <HAL_ADC_ConfigChannel+0x358>
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800132a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800132e:	fa93 f3a3 	rbit	r3, r3
 8001332:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001334:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001336:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800133a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800133e:	2b00      	cmp	r3, #0
 8001340:	d101      	bne.n	8001346 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001342:	2320      	movs	r3, #32
 8001344:	e004      	b.n	8001350 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001346:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800134a:	fab3 f383 	clz	r3, r3
 800134e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001350:	429a      	cmp	r2, r3
 8001352:	d106      	bne.n	8001362 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2200      	movs	r2, #0
 800135a:	2102      	movs	r1, #2
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff fa29 	bl	80007b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2103      	movs	r1, #3
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff fa0d 	bl	8000788 <LL_ADC_GetOffsetChannel>
 800136e:	4603      	mov	r3, r0
 8001370:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001374:	2b00      	cmp	r3, #0
 8001376:	d10a      	bne.n	800138e <HAL_ADC_ConfigChannel+0x396>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2103      	movs	r1, #3
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff fa02 	bl	8000788 <LL_ADC_GetOffsetChannel>
 8001384:	4603      	mov	r3, r0
 8001386:	0e9b      	lsrs	r3, r3, #26
 8001388:	f003 021f 	and.w	r2, r3, #31
 800138c:	e017      	b.n	80013be <HAL_ADC_ConfigChannel+0x3c6>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2103      	movs	r1, #3
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff f9f7 	bl	8000788 <LL_ADC_GetOffsetChannel>
 800139a:	4603      	mov	r3, r0
 800139c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800139e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80013a0:	fa93 f3a3 	rbit	r3, r3
 80013a4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80013a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80013a8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80013aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d101      	bne.n	80013b4 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80013b0:	2320      	movs	r3, #32
 80013b2:	e003      	b.n	80013bc <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80013b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80013b6:	fab3 f383 	clz	r3, r3
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d105      	bne.n	80013d6 <HAL_ADC_ConfigChannel+0x3de>
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	0e9b      	lsrs	r3, r3, #26
 80013d0:	f003 031f 	and.w	r3, r3, #31
 80013d4:	e011      	b.n	80013fa <HAL_ADC_ConfigChannel+0x402>
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80013de:	fa93 f3a3 	rbit	r3, r3
 80013e2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80013e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80013e6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80013e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d101      	bne.n	80013f2 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80013ee:	2320      	movs	r3, #32
 80013f0:	e003      	b.n	80013fa <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80013f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013f4:	fab3 f383 	clz	r3, r3
 80013f8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d106      	bne.n	800140c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2200      	movs	r2, #0
 8001404:	2103      	movs	r1, #3
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff f9d4 	bl	80007b4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff faef 	bl	80009f4 <LL_ADC_IsEnabled>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	f040 813f 	bne.w	800169c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6818      	ldr	r0, [r3, #0]
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	6819      	ldr	r1, [r3, #0]
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	68db      	ldr	r3, [r3, #12]
 800142a:	461a      	mov	r2, r3
 800142c:	f7ff fa48 	bl	80008c0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	4a8e      	ldr	r2, [pc, #568]	; (8001670 <HAL_ADC_ConfigChannel+0x678>)
 8001436:	4293      	cmp	r3, r2
 8001438:	f040 8130 	bne.w	800169c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001448:	2b00      	cmp	r3, #0
 800144a:	d10b      	bne.n	8001464 <HAL_ADC_ConfigChannel+0x46c>
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	0e9b      	lsrs	r3, r3, #26
 8001452:	3301      	adds	r3, #1
 8001454:	f003 031f 	and.w	r3, r3, #31
 8001458:	2b09      	cmp	r3, #9
 800145a:	bf94      	ite	ls
 800145c:	2301      	movls	r3, #1
 800145e:	2300      	movhi	r3, #0
 8001460:	b2db      	uxtb	r3, r3
 8001462:	e019      	b.n	8001498 <HAL_ADC_ConfigChannel+0x4a0>
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800146a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800146c:	fa93 f3a3 	rbit	r3, r3
 8001470:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001472:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001474:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001476:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001478:	2b00      	cmp	r3, #0
 800147a:	d101      	bne.n	8001480 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 800147c:	2320      	movs	r3, #32
 800147e:	e003      	b.n	8001488 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001480:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001482:	fab3 f383 	clz	r3, r3
 8001486:	b2db      	uxtb	r3, r3
 8001488:	3301      	adds	r3, #1
 800148a:	f003 031f 	and.w	r3, r3, #31
 800148e:	2b09      	cmp	r3, #9
 8001490:	bf94      	ite	ls
 8001492:	2301      	movls	r3, #1
 8001494:	2300      	movhi	r3, #0
 8001496:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001498:	2b00      	cmp	r3, #0
 800149a:	d079      	beq.n	8001590 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d107      	bne.n	80014b8 <HAL_ADC_ConfigChannel+0x4c0>
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	0e9b      	lsrs	r3, r3, #26
 80014ae:	3301      	adds	r3, #1
 80014b0:	069b      	lsls	r3, r3, #26
 80014b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80014b6:	e015      	b.n	80014e4 <HAL_ADC_ConfigChannel+0x4ec>
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80014c0:	fa93 f3a3 	rbit	r3, r3
 80014c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80014c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014c8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80014ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d101      	bne.n	80014d4 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80014d0:	2320      	movs	r3, #32
 80014d2:	e003      	b.n	80014dc <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80014d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014d6:	fab3 f383 	clz	r3, r3
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	3301      	adds	r3, #1
 80014de:	069b      	lsls	r3, r3, #26
 80014e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d109      	bne.n	8001504 <HAL_ADC_ConfigChannel+0x50c>
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	0e9b      	lsrs	r3, r3, #26
 80014f6:	3301      	adds	r3, #1
 80014f8:	f003 031f 	and.w	r3, r3, #31
 80014fc:	2101      	movs	r1, #1
 80014fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001502:	e017      	b.n	8001534 <HAL_ADC_ConfigChannel+0x53c>
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800150a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800150c:	fa93 f3a3 	rbit	r3, r3
 8001510:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001512:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001514:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001516:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001518:	2b00      	cmp	r3, #0
 800151a:	d101      	bne.n	8001520 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 800151c:	2320      	movs	r3, #32
 800151e:	e003      	b.n	8001528 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001520:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001522:	fab3 f383 	clz	r3, r3
 8001526:	b2db      	uxtb	r3, r3
 8001528:	3301      	adds	r3, #1
 800152a:	f003 031f 	and.w	r3, r3, #31
 800152e:	2101      	movs	r1, #1
 8001530:	fa01 f303 	lsl.w	r3, r1, r3
 8001534:	ea42 0103 	orr.w	r1, r2, r3
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001540:	2b00      	cmp	r3, #0
 8001542:	d10a      	bne.n	800155a <HAL_ADC_ConfigChannel+0x562>
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	0e9b      	lsrs	r3, r3, #26
 800154a:	3301      	adds	r3, #1
 800154c:	f003 021f 	and.w	r2, r3, #31
 8001550:	4613      	mov	r3, r2
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	4413      	add	r3, r2
 8001556:	051b      	lsls	r3, r3, #20
 8001558:	e018      	b.n	800158c <HAL_ADC_ConfigChannel+0x594>
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001562:	fa93 f3a3 	rbit	r3, r3
 8001566:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800156a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800156c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800156e:	2b00      	cmp	r3, #0
 8001570:	d101      	bne.n	8001576 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001572:	2320      	movs	r3, #32
 8001574:	e003      	b.n	800157e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001578:	fab3 f383 	clz	r3, r3
 800157c:	b2db      	uxtb	r3, r3
 800157e:	3301      	adds	r3, #1
 8001580:	f003 021f 	and.w	r2, r3, #31
 8001584:	4613      	mov	r3, r2
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	4413      	add	r3, r2
 800158a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800158c:	430b      	orrs	r3, r1
 800158e:	e080      	b.n	8001692 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001598:	2b00      	cmp	r3, #0
 800159a:	d107      	bne.n	80015ac <HAL_ADC_ConfigChannel+0x5b4>
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	0e9b      	lsrs	r3, r3, #26
 80015a2:	3301      	adds	r3, #1
 80015a4:	069b      	lsls	r3, r3, #26
 80015a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80015aa:	e015      	b.n	80015d8 <HAL_ADC_ConfigChannel+0x5e0>
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015b4:	fa93 f3a3 	rbit	r3, r3
 80015b8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80015ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015bc:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80015be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d101      	bne.n	80015c8 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80015c4:	2320      	movs	r3, #32
 80015c6:	e003      	b.n	80015d0 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80015c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015ca:	fab3 f383 	clz	r3, r3
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	3301      	adds	r3, #1
 80015d2:	069b      	lsls	r3, r3, #26
 80015d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d109      	bne.n	80015f8 <HAL_ADC_ConfigChannel+0x600>
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	0e9b      	lsrs	r3, r3, #26
 80015ea:	3301      	adds	r3, #1
 80015ec:	f003 031f 	and.w	r3, r3, #31
 80015f0:	2101      	movs	r1, #1
 80015f2:	fa01 f303 	lsl.w	r3, r1, r3
 80015f6:	e017      	b.n	8001628 <HAL_ADC_ConfigChannel+0x630>
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015fe:	6a3b      	ldr	r3, [r7, #32]
 8001600:	fa93 f3a3 	rbit	r3, r3
 8001604:	61fb      	str	r3, [r7, #28]
  return result;
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800160a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160c:	2b00      	cmp	r3, #0
 800160e:	d101      	bne.n	8001614 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001610:	2320      	movs	r3, #32
 8001612:	e003      	b.n	800161c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001616:	fab3 f383 	clz	r3, r3
 800161a:	b2db      	uxtb	r3, r3
 800161c:	3301      	adds	r3, #1
 800161e:	f003 031f 	and.w	r3, r3, #31
 8001622:	2101      	movs	r1, #1
 8001624:	fa01 f303 	lsl.w	r3, r1, r3
 8001628:	ea42 0103 	orr.w	r1, r2, r3
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001634:	2b00      	cmp	r3, #0
 8001636:	d10d      	bne.n	8001654 <HAL_ADC_ConfigChannel+0x65c>
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	0e9b      	lsrs	r3, r3, #26
 800163e:	3301      	adds	r3, #1
 8001640:	f003 021f 	and.w	r2, r3, #31
 8001644:	4613      	mov	r3, r2
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	4413      	add	r3, r2
 800164a:	3b1e      	subs	r3, #30
 800164c:	051b      	lsls	r3, r3, #20
 800164e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001652:	e01d      	b.n	8001690 <HAL_ADC_ConfigChannel+0x698>
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	fa93 f3a3 	rbit	r3, r3
 8001660:	613b      	str	r3, [r7, #16]
  return result;
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d103      	bne.n	8001674 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 800166c:	2320      	movs	r3, #32
 800166e:	e005      	b.n	800167c <HAL_ADC_ConfigChannel+0x684>
 8001670:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	fab3 f383 	clz	r3, r3
 800167a:	b2db      	uxtb	r3, r3
 800167c:	3301      	adds	r3, #1
 800167e:	f003 021f 	and.w	r2, r3, #31
 8001682:	4613      	mov	r3, r2
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	4413      	add	r3, r2
 8001688:	3b1e      	subs	r3, #30
 800168a:	051b      	lsls	r3, r3, #20
 800168c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001690:	430b      	orrs	r3, r1
 8001692:	683a      	ldr	r2, [r7, #0]
 8001694:	6892      	ldr	r2, [r2, #8]
 8001696:	4619      	mov	r1, r3
 8001698:	f7ff f8e6 	bl	8000868 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	4b3d      	ldr	r3, [pc, #244]	; (8001798 <HAL_ADC_ConfigChannel+0x7a0>)
 80016a2:	4013      	ands	r3, r2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d06c      	beq.n	8001782 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80016a8:	483c      	ldr	r0, [pc, #240]	; (800179c <HAL_ADC_ConfigChannel+0x7a4>)
 80016aa:	f7ff f83b 	bl	8000724 <LL_ADC_GetCommonPathInternalCh>
 80016ae:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a3a      	ldr	r2, [pc, #232]	; (80017a0 <HAL_ADC_ConfigChannel+0x7a8>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d127      	bne.n	800170c <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80016bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80016c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d121      	bne.n	800170c <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a35      	ldr	r2, [pc, #212]	; (80017a4 <HAL_ADC_ConfigChannel+0x7ac>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d157      	bne.n	8001782 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80016d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80016d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80016da:	4619      	mov	r1, r3
 80016dc:	482f      	ldr	r0, [pc, #188]	; (800179c <HAL_ADC_ConfigChannel+0x7a4>)
 80016de:	f7ff f80e 	bl	80006fe <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80016e2:	4b31      	ldr	r3, [pc, #196]	; (80017a8 <HAL_ADC_ConfigChannel+0x7b0>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	099b      	lsrs	r3, r3, #6
 80016e8:	4a30      	ldr	r2, [pc, #192]	; (80017ac <HAL_ADC_ConfigChannel+0x7b4>)
 80016ea:	fba2 2303 	umull	r2, r3, r2, r3
 80016ee:	099b      	lsrs	r3, r3, #6
 80016f0:	1c5a      	adds	r2, r3, #1
 80016f2:	4613      	mov	r3, r2
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	4413      	add	r3, r2
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80016fc:	e002      	b.n	8001704 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	3b01      	subs	r3, #1
 8001702:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1f9      	bne.n	80016fe <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800170a:	e03a      	b.n	8001782 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a27      	ldr	r2, [pc, #156]	; (80017b0 <HAL_ADC_ConfigChannel+0x7b8>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d113      	bne.n	800173e <HAL_ADC_ConfigChannel+0x746>
 8001716:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800171a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d10d      	bne.n	800173e <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a1f      	ldr	r2, [pc, #124]	; (80017a4 <HAL_ADC_ConfigChannel+0x7ac>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d12a      	bne.n	8001782 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800172c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001730:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001734:	4619      	mov	r1, r3
 8001736:	4819      	ldr	r0, [pc, #100]	; (800179c <HAL_ADC_ConfigChannel+0x7a4>)
 8001738:	f7fe ffe1 	bl	80006fe <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800173c:	e021      	b.n	8001782 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a1c      	ldr	r2, [pc, #112]	; (80017b4 <HAL_ADC_ConfigChannel+0x7bc>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d11c      	bne.n	8001782 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001748:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800174c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d116      	bne.n	8001782 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a12      	ldr	r2, [pc, #72]	; (80017a4 <HAL_ADC_ConfigChannel+0x7ac>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d111      	bne.n	8001782 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800175e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001762:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001766:	4619      	mov	r1, r3
 8001768:	480c      	ldr	r0, [pc, #48]	; (800179c <HAL_ADC_ConfigChannel+0x7a4>)
 800176a:	f7fe ffc8 	bl	80006fe <LL_ADC_SetCommonPathInternalCh>
 800176e:	e008      	b.n	8001782 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001774:	f043 0220 	orr.w	r2, r3, #32
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800178a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800178e:	4618      	mov	r0, r3
 8001790:	37d8      	adds	r7, #216	; 0xd8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	80080000 	.word	0x80080000
 800179c:	50040300 	.word	0x50040300
 80017a0:	c7520000 	.word	0xc7520000
 80017a4:	50040000 	.word	0x50040000
 80017a8:	20000000 	.word	0x20000000
 80017ac:	053e2d63 	.word	0x053e2d63
 80017b0:	cb840000 	.word	0xcb840000
 80017b4:	80000001 	.word	0x80000001

080017b8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b088      	sub	sp, #32
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff f95e 	bl	8000a90 <LL_ADC_REG_IsConversionOngoing>
 80017d4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff f97f 	bl	8000ade <LL_ADC_INJ_IsConversionOngoing>
 80017e0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d103      	bne.n	80017f0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	f000 8098 	beq.w	8001920 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d02a      	beq.n	8001854 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	7e5b      	ldrb	r3, [r3, #25]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d126      	bne.n	8001854 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	7e1b      	ldrb	r3, [r3, #24]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d122      	bne.n	8001854 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800180e:	2301      	movs	r3, #1
 8001810:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001812:	e014      	b.n	800183e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	4a45      	ldr	r2, [pc, #276]	; (800192c <ADC_ConversionStop+0x174>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d90d      	bls.n	8001838 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001820:	f043 0210 	orr.w	r2, r3, #16
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800182c:	f043 0201 	orr.w	r2, r3, #1
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e074      	b.n	8001922 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	3301      	adds	r3, #1
 800183c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001848:	2b40      	cmp	r3, #64	; 0x40
 800184a:	d1e3      	bne.n	8001814 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2240      	movs	r2, #64	; 0x40
 8001852:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	2b02      	cmp	r3, #2
 8001858:	d014      	beq.n	8001884 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff f916 	bl	8000a90 <LL_ADC_REG_IsConversionOngoing>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d00c      	beq.n	8001884 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff f8d3 	bl	8000a1a <LL_ADC_IsDisableOngoing>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d104      	bne.n	8001884 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff f8f2 	bl	8000a68 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d014      	beq.n	80018b4 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff f925 	bl	8000ade <LL_ADC_INJ_IsConversionOngoing>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d00c      	beq.n	80018b4 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff f8bb 	bl	8000a1a <LL_ADC_IsDisableOngoing>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d104      	bne.n	80018b4 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff f901 	bl	8000ab6 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d005      	beq.n	80018c6 <ADC_ConversionStop+0x10e>
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	2b03      	cmp	r3, #3
 80018be:	d105      	bne.n	80018cc <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80018c0:	230c      	movs	r3, #12
 80018c2:	617b      	str	r3, [r7, #20]
        break;
 80018c4:	e005      	b.n	80018d2 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80018c6:	2308      	movs	r3, #8
 80018c8:	617b      	str	r3, [r7, #20]
        break;
 80018ca:	e002      	b.n	80018d2 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80018cc:	2304      	movs	r3, #4
 80018ce:	617b      	str	r3, [r7, #20]
        break;
 80018d0:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80018d2:	f7fe fef5 	bl	80006c0 <HAL_GetTick>
 80018d6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80018d8:	e01b      	b.n	8001912 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80018da:	f7fe fef1 	bl	80006c0 <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	2b05      	cmp	r3, #5
 80018e6:	d914      	bls.n	8001912 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	689a      	ldr	r2, [r3, #8]
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	4013      	ands	r3, r2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d00d      	beq.n	8001912 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018fa:	f043 0210 	orr.w	r2, r3, #16
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001906:	f043 0201 	orr.w	r2, r3, #1
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e007      	b.n	8001922 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	689a      	ldr	r2, [r3, #8]
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	4013      	ands	r3, r2
 800191c:	2b00      	cmp	r3, #0
 800191e:	d1dc      	bne.n	80018da <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3720      	adds	r7, #32
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	a33fffff 	.word	0xa33fffff

08001930 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001938:	2300      	movs	r3, #0
 800193a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff f857 	bl	80009f4 <LL_ADC_IsEnabled>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d169      	bne.n	8001a20 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	689a      	ldr	r2, [r3, #8]
 8001952:	4b36      	ldr	r3, [pc, #216]	; (8001a2c <ADC_Enable+0xfc>)
 8001954:	4013      	ands	r3, r2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d00d      	beq.n	8001976 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800195e:	f043 0210 	orr.w	r2, r3, #16
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800196a:	f043 0201 	orr.w	r2, r3, #1
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e055      	b.n	8001a22 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff f812 	bl	80009a4 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001980:	482b      	ldr	r0, [pc, #172]	; (8001a30 <ADC_Enable+0x100>)
 8001982:	f7fe fecf 	bl	8000724 <LL_ADC_GetCommonPathInternalCh>
 8001986:	4603      	mov	r3, r0
 8001988:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d013      	beq.n	80019b8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001990:	4b28      	ldr	r3, [pc, #160]	; (8001a34 <ADC_Enable+0x104>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	099b      	lsrs	r3, r3, #6
 8001996:	4a28      	ldr	r2, [pc, #160]	; (8001a38 <ADC_Enable+0x108>)
 8001998:	fba2 2303 	umull	r2, r3, r2, r3
 800199c:	099b      	lsrs	r3, r3, #6
 800199e:	1c5a      	adds	r2, r3, #1
 80019a0:	4613      	mov	r3, r2
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	4413      	add	r3, r2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80019aa:	e002      	b.n	80019b2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	3b01      	subs	r3, #1
 80019b0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d1f9      	bne.n	80019ac <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80019b8:	f7fe fe82 	bl	80006c0 <HAL_GetTick>
 80019bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80019be:	e028      	b.n	8001a12 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff f815 	bl	80009f4 <LL_ADC_IsEnabled>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d104      	bne.n	80019da <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7fe ffe5 	bl	80009a4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80019da:	f7fe fe71 	bl	80006c0 <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d914      	bls.n	8001a12 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d00d      	beq.n	8001a12 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019fa:	f043 0210 	orr.w	r2, r3, #16
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a06:	f043 0201 	orr.w	r2, r3, #1
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e007      	b.n	8001a22 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d1cf      	bne.n	80019c0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3710      	adds	r7, #16
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	8000003f 	.word	0x8000003f
 8001a30:	50040300 	.word	0x50040300
 8001a34:	20000000 	.word	0x20000000
 8001a38:	053e2d63 	.word	0x053e2d63

08001a3c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7fe ffe6 	bl	8000a1a <LL_ADC_IsDisableOngoing>
 8001a4e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7fe ffcd 	bl	80009f4 <LL_ADC_IsEnabled>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d047      	beq.n	8001af0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d144      	bne.n	8001af0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f003 030d 	and.w	r3, r3, #13
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d10c      	bne.n	8001a8e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7fe ffa7 	bl	80009cc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2203      	movs	r2, #3
 8001a84:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a86:	f7fe fe1b 	bl	80006c0 <HAL_GetTick>
 8001a8a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001a8c:	e029      	b.n	8001ae2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a92:	f043 0210 	orr.w	r2, r3, #16
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a9e:	f043 0201 	orr.w	r2, r3, #1
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e023      	b.n	8001af2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001aaa:	f7fe fe09 	bl	80006c0 <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d914      	bls.n	8001ae2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d00d      	beq.n	8001ae2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aca:	f043 0210 	orr.w	r2, r3, #16
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad6:	f043 0201 	orr.w	r2, r3, #1
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e007      	b.n	8001af2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1dc      	bne.n	8001aaa <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <LL_ADC_StartCalibration>:
{
 8001afa:	b480      	push	{r7}
 8001afc:	b083      	sub	sp, #12
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
 8001b02:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001b0c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001b16:	4313      	orrs	r3, r2
 8001b18:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	609a      	str	r2, [r3, #8]
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <LL_ADC_IsCalibrationOnGoing>:
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001b3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001b40:	d101      	bne.n	8001b46 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8001b42:	2301      	movs	r3, #1
 8001b44:	e000      	b.n	8001b48 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d101      	bne.n	8001b70 <HAL_ADCEx_Calibration_Start+0x1c>
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	e04d      	b.n	8001c0c <HAL_ADCEx_Calibration_Start+0xb8>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f7ff ff5f 	bl	8001a3c <ADC_Disable>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001b82:	7bfb      	ldrb	r3, [r7, #15]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d136      	bne.n	8001bf6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b8c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b90:	f023 0302 	bic.w	r3, r3, #2
 8001b94:	f043 0202 	orr.w	r2, r3, #2
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	6839      	ldr	r1, [r7, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff ffa9 	bl	8001afa <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001ba8:	e014      	b.n	8001bd4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	3301      	adds	r3, #1
 8001bae:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8001bb6:	d30d      	bcc.n	8001bd4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bbc:	f023 0312 	bic.w	r3, r3, #18
 8001bc0:	f043 0210 	orr.w	r2, r3, #16
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e01b      	b.n	8001c0c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff ffa7 	bl	8001b2c <LL_ADC_IsCalibrationOnGoing>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d1e2      	bne.n	8001baa <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001be8:	f023 0303 	bic.w	r3, r3, #3
 8001bec:	f043 0201 	orr.w	r2, r3, #1
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	655a      	str	r2, [r3, #84]	; 0x54
 8001bf4:	e005      	b.n	8001c02 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bfa:	f043 0210 	orr.w	r2, r3, #16
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f003 0307 	and.w	r3, r3, #7
 8001c22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c24:	4b0c      	ldr	r3, [pc, #48]	; (8001c58 <__NVIC_SetPriorityGrouping+0x44>)
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c2a:	68ba      	ldr	r2, [r7, #8]
 8001c2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c30:	4013      	ands	r3, r2
 8001c32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c46:	4a04      	ldr	r2, [pc, #16]	; (8001c58 <__NVIC_SetPriorityGrouping+0x44>)
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	60d3      	str	r3, [r2, #12]
}
 8001c4c:	bf00      	nop
 8001c4e:	3714      	adds	r7, #20
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	e000ed00 	.word	0xe000ed00

08001c5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c60:	4b04      	ldr	r3, [pc, #16]	; (8001c74 <__NVIC_GetPriorityGrouping+0x18>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	0a1b      	lsrs	r3, r3, #8
 8001c66:	f003 0307 	and.w	r3, r3, #7
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	e000ed00 	.word	0xe000ed00

08001c78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	6039      	str	r1, [r7, #0]
 8001c82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	db0a      	blt.n	8001ca2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	b2da      	uxtb	r2, r3
 8001c90:	490c      	ldr	r1, [pc, #48]	; (8001cc4 <__NVIC_SetPriority+0x4c>)
 8001c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c96:	0112      	lsls	r2, r2, #4
 8001c98:	b2d2      	uxtb	r2, r2
 8001c9a:	440b      	add	r3, r1
 8001c9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ca0:	e00a      	b.n	8001cb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	b2da      	uxtb	r2, r3
 8001ca6:	4908      	ldr	r1, [pc, #32]	; (8001cc8 <__NVIC_SetPriority+0x50>)
 8001ca8:	79fb      	ldrb	r3, [r7, #7]
 8001caa:	f003 030f 	and.w	r3, r3, #15
 8001cae:	3b04      	subs	r3, #4
 8001cb0:	0112      	lsls	r2, r2, #4
 8001cb2:	b2d2      	uxtb	r2, r2
 8001cb4:	440b      	add	r3, r1
 8001cb6:	761a      	strb	r2, [r3, #24]
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr
 8001cc4:	e000e100 	.word	0xe000e100
 8001cc8:	e000ed00 	.word	0xe000ed00

08001ccc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b089      	sub	sp, #36	; 0x24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	60b9      	str	r1, [r7, #8]
 8001cd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f003 0307 	and.w	r3, r3, #7
 8001cde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	f1c3 0307 	rsb	r3, r3, #7
 8001ce6:	2b04      	cmp	r3, #4
 8001ce8:	bf28      	it	cs
 8001cea:	2304      	movcs	r3, #4
 8001cec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	3304      	adds	r3, #4
 8001cf2:	2b06      	cmp	r3, #6
 8001cf4:	d902      	bls.n	8001cfc <NVIC_EncodePriority+0x30>
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	3b03      	subs	r3, #3
 8001cfa:	e000      	b.n	8001cfe <NVIC_EncodePriority+0x32>
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d00:	f04f 32ff 	mov.w	r2, #4294967295
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	43da      	mvns	r2, r3
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	401a      	ands	r2, r3
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d14:	f04f 31ff 	mov.w	r1, #4294967295
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d1e:	43d9      	mvns	r1, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d24:	4313      	orrs	r3, r2
         );
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3724      	adds	r7, #36	; 0x24
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
	...

08001d34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d44:	d301      	bcc.n	8001d4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d46:	2301      	movs	r3, #1
 8001d48:	e00f      	b.n	8001d6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d4a:	4a0a      	ldr	r2, [pc, #40]	; (8001d74 <SysTick_Config+0x40>)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d52:	210f      	movs	r1, #15
 8001d54:	f04f 30ff 	mov.w	r0, #4294967295
 8001d58:	f7ff ff8e 	bl	8001c78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d5c:	4b05      	ldr	r3, [pc, #20]	; (8001d74 <SysTick_Config+0x40>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d62:	4b04      	ldr	r3, [pc, #16]	; (8001d74 <SysTick_Config+0x40>)
 8001d64:	2207      	movs	r2, #7
 8001d66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	e000e010 	.word	0xe000e010

08001d78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f7ff ff47 	bl	8001c14 <__NVIC_SetPriorityGrouping>
}
 8001d86:	bf00      	nop
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b086      	sub	sp, #24
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	4603      	mov	r3, r0
 8001d96:	60b9      	str	r1, [r7, #8]
 8001d98:	607a      	str	r2, [r7, #4]
 8001d9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001da0:	f7ff ff5c 	bl	8001c5c <__NVIC_GetPriorityGrouping>
 8001da4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	68b9      	ldr	r1, [r7, #8]
 8001daa:	6978      	ldr	r0, [r7, #20]
 8001dac:	f7ff ff8e 	bl	8001ccc <NVIC_EncodePriority>
 8001db0:	4602      	mov	r2, r0
 8001db2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001db6:	4611      	mov	r1, r2
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff ff5d 	bl	8001c78 <__NVIC_SetPriority>
}
 8001dbe:	bf00      	nop
 8001dc0:	3718      	adds	r7, #24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b082      	sub	sp, #8
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f7ff ffb0 	bl	8001d34 <SysTick_Config>
 8001dd4:	4603      	mov	r3, r0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
	...

08001de0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001de4:	4b04      	ldr	r3, [pc, #16]	; (8001df8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	40007000 	.word	0x40007000

08001dfc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e0a:	d130      	bne.n	8001e6e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e0c:	4b23      	ldr	r3, [pc, #140]	; (8001e9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e18:	d038      	beq.n	8001e8c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e1a:	4b20      	ldr	r3, [pc, #128]	; (8001e9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e22:	4a1e      	ldr	r2, [pc, #120]	; (8001e9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e28:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e2a:	4b1d      	ldr	r3, [pc, #116]	; (8001ea0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2232      	movs	r2, #50	; 0x32
 8001e30:	fb02 f303 	mul.w	r3, r2, r3
 8001e34:	4a1b      	ldr	r2, [pc, #108]	; (8001ea4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001e36:	fba2 2303 	umull	r2, r3, r2, r3
 8001e3a:	0c9b      	lsrs	r3, r3, #18
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e40:	e002      	b.n	8001e48 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	3b01      	subs	r3, #1
 8001e46:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e48:	4b14      	ldr	r3, [pc, #80]	; (8001e9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e4a:	695b      	ldr	r3, [r3, #20]
 8001e4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e54:	d102      	bne.n	8001e5c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d1f2      	bne.n	8001e42 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e5c:	4b0f      	ldr	r3, [pc, #60]	; (8001e9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e5e:	695b      	ldr	r3, [r3, #20]
 8001e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e68:	d110      	bne.n	8001e8c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e00f      	b.n	8001e8e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e6e:	4b0b      	ldr	r3, [pc, #44]	; (8001e9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e7a:	d007      	beq.n	8001e8c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e7c:	4b07      	ldr	r3, [pc, #28]	; (8001e9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e84:	4a05      	ldr	r2, [pc, #20]	; (8001e9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e8a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3714      	adds	r7, #20
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	40007000 	.word	0x40007000
 8001ea0:	20000000 	.word	0x20000000
 8001ea4:	431bde83 	.word	0x431bde83

08001ea8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b088      	sub	sp, #32
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d102      	bne.n	8001ebc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	f000 bc02 	b.w	80026c0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ebc:	4b96      	ldr	r3, [pc, #600]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f003 030c 	and.w	r3, r3, #12
 8001ec4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ec6:	4b94      	ldr	r3, [pc, #592]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	f003 0303 	and.w	r3, r3, #3
 8001ece:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0310 	and.w	r3, r3, #16
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	f000 80e4 	beq.w	80020a6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d007      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x4c>
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	2b0c      	cmp	r3, #12
 8001ee8:	f040 808b 	bne.w	8002002 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	f040 8087 	bne.w	8002002 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ef4:	4b88      	ldr	r3, [pc, #544]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d005      	beq.n	8001f0c <HAL_RCC_OscConfig+0x64>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d101      	bne.n	8001f0c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e3d9      	b.n	80026c0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a1a      	ldr	r2, [r3, #32]
 8001f10:	4b81      	ldr	r3, [pc, #516]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0308 	and.w	r3, r3, #8
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d004      	beq.n	8001f26 <HAL_RCC_OscConfig+0x7e>
 8001f1c:	4b7e      	ldr	r3, [pc, #504]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f24:	e005      	b.n	8001f32 <HAL_RCC_OscConfig+0x8a>
 8001f26:	4b7c      	ldr	r3, [pc, #496]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8001f28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f2c:	091b      	lsrs	r3, r3, #4
 8001f2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d223      	bcs.n	8001f7e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a1b      	ldr	r3, [r3, #32]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f000 fd54 	bl	80029e8 <RCC_SetFlashLatencyFromMSIRange>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e3ba      	b.n	80026c0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f4a:	4b73      	ldr	r3, [pc, #460]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a72      	ldr	r2, [pc, #456]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8001f50:	f043 0308 	orr.w	r3, r3, #8
 8001f54:	6013      	str	r3, [r2, #0]
 8001f56:	4b70      	ldr	r3, [pc, #448]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a1b      	ldr	r3, [r3, #32]
 8001f62:	496d      	ldr	r1, [pc, #436]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f68:	4b6b      	ldr	r3, [pc, #428]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	69db      	ldr	r3, [r3, #28]
 8001f74:	021b      	lsls	r3, r3, #8
 8001f76:	4968      	ldr	r1, [pc, #416]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	604b      	str	r3, [r1, #4]
 8001f7c:	e025      	b.n	8001fca <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f7e:	4b66      	ldr	r3, [pc, #408]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a65      	ldr	r2, [pc, #404]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8001f84:	f043 0308 	orr.w	r3, r3, #8
 8001f88:	6013      	str	r3, [r2, #0]
 8001f8a:	4b63      	ldr	r3, [pc, #396]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6a1b      	ldr	r3, [r3, #32]
 8001f96:	4960      	ldr	r1, [pc, #384]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f9c:	4b5e      	ldr	r3, [pc, #376]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	69db      	ldr	r3, [r3, #28]
 8001fa8:	021b      	lsls	r3, r3, #8
 8001faa:	495b      	ldr	r1, [pc, #364]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8001fac:	4313      	orrs	r3, r2
 8001fae:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d109      	bne.n	8001fca <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a1b      	ldr	r3, [r3, #32]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f000 fd14 	bl	80029e8 <RCC_SetFlashLatencyFromMSIRange>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e37a      	b.n	80026c0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fca:	f000 fc81 	bl	80028d0 <HAL_RCC_GetSysClockFreq>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	4b51      	ldr	r3, [pc, #324]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	091b      	lsrs	r3, r3, #4
 8001fd6:	f003 030f 	and.w	r3, r3, #15
 8001fda:	4950      	ldr	r1, [pc, #320]	; (800211c <HAL_RCC_OscConfig+0x274>)
 8001fdc:	5ccb      	ldrb	r3, [r1, r3]
 8001fde:	f003 031f 	and.w	r3, r3, #31
 8001fe2:	fa22 f303 	lsr.w	r3, r2, r3
 8001fe6:	4a4e      	ldr	r2, [pc, #312]	; (8002120 <HAL_RCC_OscConfig+0x278>)
 8001fe8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001fea:	4b4e      	ldr	r3, [pc, #312]	; (8002124 <HAL_RCC_OscConfig+0x27c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7fe fb16 	bl	8000620 <HAL_InitTick>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001ff8:	7bfb      	ldrb	r3, [r7, #15]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d052      	beq.n	80020a4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001ffe:	7bfb      	ldrb	r3, [r7, #15]
 8002000:	e35e      	b.n	80026c0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d032      	beq.n	8002070 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800200a:	4b43      	ldr	r3, [pc, #268]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a42      	ldr	r2, [pc, #264]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8002010:	f043 0301 	orr.w	r3, r3, #1
 8002014:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002016:	f7fe fb53 	bl	80006c0 <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800201c:	e008      	b.n	8002030 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800201e:	f7fe fb4f 	bl	80006c0 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d901      	bls.n	8002030 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e347      	b.n	80026c0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002030:	4b39      	ldr	r3, [pc, #228]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d0f0      	beq.n	800201e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800203c:	4b36      	ldr	r3, [pc, #216]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a35      	ldr	r2, [pc, #212]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8002042:	f043 0308 	orr.w	r3, r3, #8
 8002046:	6013      	str	r3, [r2, #0]
 8002048:	4b33      	ldr	r3, [pc, #204]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a1b      	ldr	r3, [r3, #32]
 8002054:	4930      	ldr	r1, [pc, #192]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8002056:	4313      	orrs	r3, r2
 8002058:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800205a:	4b2f      	ldr	r3, [pc, #188]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	021b      	lsls	r3, r3, #8
 8002068:	492b      	ldr	r1, [pc, #172]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 800206a:	4313      	orrs	r3, r2
 800206c:	604b      	str	r3, [r1, #4]
 800206e:	e01a      	b.n	80020a6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002070:	4b29      	ldr	r3, [pc, #164]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a28      	ldr	r2, [pc, #160]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8002076:	f023 0301 	bic.w	r3, r3, #1
 800207a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800207c:	f7fe fb20 	bl	80006c0 <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002082:	e008      	b.n	8002096 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002084:	f7fe fb1c 	bl	80006c0 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b02      	cmp	r3, #2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e314      	b.n	80026c0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002096:	4b20      	ldr	r3, [pc, #128]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1f0      	bne.n	8002084 <HAL_RCC_OscConfig+0x1dc>
 80020a2:	e000      	b.n	80020a6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020a4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d073      	beq.n	800219a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	2b08      	cmp	r3, #8
 80020b6:	d005      	beq.n	80020c4 <HAL_RCC_OscConfig+0x21c>
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	2b0c      	cmp	r3, #12
 80020bc:	d10e      	bne.n	80020dc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	2b03      	cmp	r3, #3
 80020c2:	d10b      	bne.n	80020dc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c4:	4b14      	ldr	r3, [pc, #80]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d063      	beq.n	8002198 <HAL_RCC_OscConfig+0x2f0>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d15f      	bne.n	8002198 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e2f1      	b.n	80026c0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020e4:	d106      	bne.n	80020f4 <HAL_RCC_OscConfig+0x24c>
 80020e6:	4b0c      	ldr	r3, [pc, #48]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a0b      	ldr	r2, [pc, #44]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 80020ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020f0:	6013      	str	r3, [r2, #0]
 80020f2:	e025      	b.n	8002140 <HAL_RCC_OscConfig+0x298>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020fc:	d114      	bne.n	8002128 <HAL_RCC_OscConfig+0x280>
 80020fe:	4b06      	ldr	r3, [pc, #24]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a05      	ldr	r2, [pc, #20]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8002104:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002108:	6013      	str	r3, [r2, #0]
 800210a:	4b03      	ldr	r3, [pc, #12]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a02      	ldr	r2, [pc, #8]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8002110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002114:	6013      	str	r3, [r2, #0]
 8002116:	e013      	b.n	8002140 <HAL_RCC_OscConfig+0x298>
 8002118:	40021000 	.word	0x40021000
 800211c:	080030e8 	.word	0x080030e8
 8002120:	20000000 	.word	0x20000000
 8002124:	20000004 	.word	0x20000004
 8002128:	4ba0      	ldr	r3, [pc, #640]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a9f      	ldr	r2, [pc, #636]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 800212e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002132:	6013      	str	r3, [r2, #0]
 8002134:	4b9d      	ldr	r3, [pc, #628]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a9c      	ldr	r2, [pc, #624]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 800213a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800213e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d013      	beq.n	8002170 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002148:	f7fe faba 	bl	80006c0 <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800214e:	e008      	b.n	8002162 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002150:	f7fe fab6 	bl	80006c0 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b64      	cmp	r3, #100	; 0x64
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e2ae      	b.n	80026c0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002162:	4b92      	ldr	r3, [pc, #584]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d0f0      	beq.n	8002150 <HAL_RCC_OscConfig+0x2a8>
 800216e:	e014      	b.n	800219a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002170:	f7fe faa6 	bl	80006c0 <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002176:	e008      	b.n	800218a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002178:	f7fe faa2 	bl	80006c0 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b64      	cmp	r3, #100	; 0x64
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e29a      	b.n	80026c0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800218a:	4b88      	ldr	r3, [pc, #544]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1f0      	bne.n	8002178 <HAL_RCC_OscConfig+0x2d0>
 8002196:	e000      	b.n	800219a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002198:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d060      	beq.n	8002268 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	2b04      	cmp	r3, #4
 80021aa:	d005      	beq.n	80021b8 <HAL_RCC_OscConfig+0x310>
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	2b0c      	cmp	r3, #12
 80021b0:	d119      	bne.n	80021e6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d116      	bne.n	80021e6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021b8:	4b7c      	ldr	r3, [pc, #496]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d005      	beq.n	80021d0 <HAL_RCC_OscConfig+0x328>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d101      	bne.n	80021d0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e277      	b.n	80026c0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021d0:	4b76      	ldr	r3, [pc, #472]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	691b      	ldr	r3, [r3, #16]
 80021dc:	061b      	lsls	r3, r3, #24
 80021de:	4973      	ldr	r1, [pc, #460]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021e4:	e040      	b.n	8002268 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d023      	beq.n	8002236 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021ee:	4b6f      	ldr	r3, [pc, #444]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a6e      	ldr	r2, [pc, #440]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 80021f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021fa:	f7fe fa61 	bl	80006c0 <HAL_GetTick>
 80021fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002200:	e008      	b.n	8002214 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002202:	f7fe fa5d 	bl	80006c0 <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d901      	bls.n	8002214 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e255      	b.n	80026c0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002214:	4b65      	ldr	r3, [pc, #404]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800221c:	2b00      	cmp	r3, #0
 800221e:	d0f0      	beq.n	8002202 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002220:	4b62      	ldr	r3, [pc, #392]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	691b      	ldr	r3, [r3, #16]
 800222c:	061b      	lsls	r3, r3, #24
 800222e:	495f      	ldr	r1, [pc, #380]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 8002230:	4313      	orrs	r3, r2
 8002232:	604b      	str	r3, [r1, #4]
 8002234:	e018      	b.n	8002268 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002236:	4b5d      	ldr	r3, [pc, #372]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a5c      	ldr	r2, [pc, #368]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 800223c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002240:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002242:	f7fe fa3d 	bl	80006c0 <HAL_GetTick>
 8002246:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002248:	e008      	b.n	800225c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800224a:	f7fe fa39 	bl	80006c0 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d901      	bls.n	800225c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e231      	b.n	80026c0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800225c:	4b53      	ldr	r3, [pc, #332]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002264:	2b00      	cmp	r3, #0
 8002266:	d1f0      	bne.n	800224a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0308 	and.w	r3, r3, #8
 8002270:	2b00      	cmp	r3, #0
 8002272:	d03c      	beq.n	80022ee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	695b      	ldr	r3, [r3, #20]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d01c      	beq.n	80022b6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800227c:	4b4b      	ldr	r3, [pc, #300]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 800227e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002282:	4a4a      	ldr	r2, [pc, #296]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 8002284:	f043 0301 	orr.w	r3, r3, #1
 8002288:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800228c:	f7fe fa18 	bl	80006c0 <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002294:	f7fe fa14 	bl	80006c0 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e20c      	b.n	80026c0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022a6:	4b41      	ldr	r3, [pc, #260]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 80022a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d0ef      	beq.n	8002294 <HAL_RCC_OscConfig+0x3ec>
 80022b4:	e01b      	b.n	80022ee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022b6:	4b3d      	ldr	r3, [pc, #244]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 80022b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022bc:	4a3b      	ldr	r2, [pc, #236]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 80022be:	f023 0301 	bic.w	r3, r3, #1
 80022c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022c6:	f7fe f9fb 	bl	80006c0 <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022cc:	e008      	b.n	80022e0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022ce:	f7fe f9f7 	bl	80006c0 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e1ef      	b.n	80026c0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022e0:	4b32      	ldr	r3, [pc, #200]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 80022e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1ef      	bne.n	80022ce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0304 	and.w	r3, r3, #4
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	f000 80a6 	beq.w	8002448 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022fc:	2300      	movs	r3, #0
 80022fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002300:	4b2a      	ldr	r3, [pc, #168]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 8002302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002304:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d10d      	bne.n	8002328 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800230c:	4b27      	ldr	r3, [pc, #156]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 800230e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002310:	4a26      	ldr	r2, [pc, #152]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 8002312:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002316:	6593      	str	r3, [r2, #88]	; 0x58
 8002318:	4b24      	ldr	r3, [pc, #144]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 800231a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800231c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002320:	60bb      	str	r3, [r7, #8]
 8002322:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002324:	2301      	movs	r3, #1
 8002326:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002328:	4b21      	ldr	r3, [pc, #132]	; (80023b0 <HAL_RCC_OscConfig+0x508>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002330:	2b00      	cmp	r3, #0
 8002332:	d118      	bne.n	8002366 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002334:	4b1e      	ldr	r3, [pc, #120]	; (80023b0 <HAL_RCC_OscConfig+0x508>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a1d      	ldr	r2, [pc, #116]	; (80023b0 <HAL_RCC_OscConfig+0x508>)
 800233a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800233e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002340:	f7fe f9be 	bl	80006c0 <HAL_GetTick>
 8002344:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002346:	e008      	b.n	800235a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002348:	f7fe f9ba 	bl	80006c0 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e1b2      	b.n	80026c0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800235a:	4b15      	ldr	r3, [pc, #84]	; (80023b0 <HAL_RCC_OscConfig+0x508>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002362:	2b00      	cmp	r3, #0
 8002364:	d0f0      	beq.n	8002348 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d108      	bne.n	8002380 <HAL_RCC_OscConfig+0x4d8>
 800236e:	4b0f      	ldr	r3, [pc, #60]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 8002370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002374:	4a0d      	ldr	r2, [pc, #52]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 8002376:	f043 0301 	orr.w	r3, r3, #1
 800237a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800237e:	e029      	b.n	80023d4 <HAL_RCC_OscConfig+0x52c>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	2b05      	cmp	r3, #5
 8002386:	d115      	bne.n	80023b4 <HAL_RCC_OscConfig+0x50c>
 8002388:	4b08      	ldr	r3, [pc, #32]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 800238a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800238e:	4a07      	ldr	r2, [pc, #28]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 8002390:	f043 0304 	orr.w	r3, r3, #4
 8002394:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002398:	4b04      	ldr	r3, [pc, #16]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 800239a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800239e:	4a03      	ldr	r2, [pc, #12]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 80023a0:	f043 0301 	orr.w	r3, r3, #1
 80023a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023a8:	e014      	b.n	80023d4 <HAL_RCC_OscConfig+0x52c>
 80023aa:	bf00      	nop
 80023ac:	40021000 	.word	0x40021000
 80023b0:	40007000 	.word	0x40007000
 80023b4:	4b9a      	ldr	r3, [pc, #616]	; (8002620 <HAL_RCC_OscConfig+0x778>)
 80023b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ba:	4a99      	ldr	r2, [pc, #612]	; (8002620 <HAL_RCC_OscConfig+0x778>)
 80023bc:	f023 0301 	bic.w	r3, r3, #1
 80023c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023c4:	4b96      	ldr	r3, [pc, #600]	; (8002620 <HAL_RCC_OscConfig+0x778>)
 80023c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ca:	4a95      	ldr	r2, [pc, #596]	; (8002620 <HAL_RCC_OscConfig+0x778>)
 80023cc:	f023 0304 	bic.w	r3, r3, #4
 80023d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d016      	beq.n	800240a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023dc:	f7fe f970 	bl	80006c0 <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023e2:	e00a      	b.n	80023fa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023e4:	f7fe f96c 	bl	80006c0 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e162      	b.n	80026c0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023fa:	4b89      	ldr	r3, [pc, #548]	; (8002620 <HAL_RCC_OscConfig+0x778>)
 80023fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d0ed      	beq.n	80023e4 <HAL_RCC_OscConfig+0x53c>
 8002408:	e015      	b.n	8002436 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800240a:	f7fe f959 	bl	80006c0 <HAL_GetTick>
 800240e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002410:	e00a      	b.n	8002428 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002412:	f7fe f955 	bl	80006c0 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002420:	4293      	cmp	r3, r2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e14b      	b.n	80026c0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002428:	4b7d      	ldr	r3, [pc, #500]	; (8002620 <HAL_RCC_OscConfig+0x778>)
 800242a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1ed      	bne.n	8002412 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002436:	7ffb      	ldrb	r3, [r7, #31]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d105      	bne.n	8002448 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800243c:	4b78      	ldr	r3, [pc, #480]	; (8002620 <HAL_RCC_OscConfig+0x778>)
 800243e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002440:	4a77      	ldr	r2, [pc, #476]	; (8002620 <HAL_RCC_OscConfig+0x778>)
 8002442:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002446:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0320 	and.w	r3, r3, #32
 8002450:	2b00      	cmp	r3, #0
 8002452:	d03c      	beq.n	80024ce <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002458:	2b00      	cmp	r3, #0
 800245a:	d01c      	beq.n	8002496 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800245c:	4b70      	ldr	r3, [pc, #448]	; (8002620 <HAL_RCC_OscConfig+0x778>)
 800245e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002462:	4a6f      	ldr	r2, [pc, #444]	; (8002620 <HAL_RCC_OscConfig+0x778>)
 8002464:	f043 0301 	orr.w	r3, r3, #1
 8002468:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800246c:	f7fe f928 	bl	80006c0 <HAL_GetTick>
 8002470:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002472:	e008      	b.n	8002486 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002474:	f7fe f924 	bl	80006c0 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e11c      	b.n	80026c0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002486:	4b66      	ldr	r3, [pc, #408]	; (8002620 <HAL_RCC_OscConfig+0x778>)
 8002488:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d0ef      	beq.n	8002474 <HAL_RCC_OscConfig+0x5cc>
 8002494:	e01b      	b.n	80024ce <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002496:	4b62      	ldr	r3, [pc, #392]	; (8002620 <HAL_RCC_OscConfig+0x778>)
 8002498:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800249c:	4a60      	ldr	r2, [pc, #384]	; (8002620 <HAL_RCC_OscConfig+0x778>)
 800249e:	f023 0301 	bic.w	r3, r3, #1
 80024a2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a6:	f7fe f90b 	bl	80006c0 <HAL_GetTick>
 80024aa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80024ac:	e008      	b.n	80024c0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024ae:	f7fe f907 	bl	80006c0 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d901      	bls.n	80024c0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e0ff      	b.n	80026c0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80024c0:	4b57      	ldr	r3, [pc, #348]	; (8002620 <HAL_RCC_OscConfig+0x778>)
 80024c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1ef      	bne.n	80024ae <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f000 80f3 	beq.w	80026be <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024dc:	2b02      	cmp	r3, #2
 80024de:	f040 80c9 	bne.w	8002674 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80024e2:	4b4f      	ldr	r3, [pc, #316]	; (8002620 <HAL_RCC_OscConfig+0x778>)
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	f003 0203 	and.w	r2, r3, #3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d12c      	bne.n	8002550 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002500:	3b01      	subs	r3, #1
 8002502:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002504:	429a      	cmp	r2, r3
 8002506:	d123      	bne.n	8002550 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002512:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002514:	429a      	cmp	r2, r3
 8002516:	d11b      	bne.n	8002550 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002522:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002524:	429a      	cmp	r2, r3
 8002526:	d113      	bne.n	8002550 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002532:	085b      	lsrs	r3, r3, #1
 8002534:	3b01      	subs	r3, #1
 8002536:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002538:	429a      	cmp	r2, r3
 800253a:	d109      	bne.n	8002550 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002546:	085b      	lsrs	r3, r3, #1
 8002548:	3b01      	subs	r3, #1
 800254a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800254c:	429a      	cmp	r2, r3
 800254e:	d06b      	beq.n	8002628 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	2b0c      	cmp	r3, #12
 8002554:	d062      	beq.n	800261c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002556:	4b32      	ldr	r3, [pc, #200]	; (8002620 <HAL_RCC_OscConfig+0x778>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e0ac      	b.n	80026c0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002566:	4b2e      	ldr	r3, [pc, #184]	; (8002620 <HAL_RCC_OscConfig+0x778>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a2d      	ldr	r2, [pc, #180]	; (8002620 <HAL_RCC_OscConfig+0x778>)
 800256c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002570:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002572:	f7fe f8a5 	bl	80006c0 <HAL_GetTick>
 8002576:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002578:	e008      	b.n	800258c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800257a:	f7fe f8a1 	bl	80006c0 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e099      	b.n	80026c0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800258c:	4b24      	ldr	r3, [pc, #144]	; (8002620 <HAL_RCC_OscConfig+0x778>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1f0      	bne.n	800257a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002598:	4b21      	ldr	r3, [pc, #132]	; (8002620 <HAL_RCC_OscConfig+0x778>)
 800259a:	68da      	ldr	r2, [r3, #12]
 800259c:	4b21      	ldr	r3, [pc, #132]	; (8002624 <HAL_RCC_OscConfig+0x77c>)
 800259e:	4013      	ands	r3, r2
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80025a8:	3a01      	subs	r2, #1
 80025aa:	0112      	lsls	r2, r2, #4
 80025ac:	4311      	orrs	r1, r2
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80025b2:	0212      	lsls	r2, r2, #8
 80025b4:	4311      	orrs	r1, r2
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80025ba:	0852      	lsrs	r2, r2, #1
 80025bc:	3a01      	subs	r2, #1
 80025be:	0552      	lsls	r2, r2, #21
 80025c0:	4311      	orrs	r1, r2
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80025c6:	0852      	lsrs	r2, r2, #1
 80025c8:	3a01      	subs	r2, #1
 80025ca:	0652      	lsls	r2, r2, #25
 80025cc:	4311      	orrs	r1, r2
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80025d2:	06d2      	lsls	r2, r2, #27
 80025d4:	430a      	orrs	r2, r1
 80025d6:	4912      	ldr	r1, [pc, #72]	; (8002620 <HAL_RCC_OscConfig+0x778>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80025dc:	4b10      	ldr	r3, [pc, #64]	; (8002620 <HAL_RCC_OscConfig+0x778>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a0f      	ldr	r2, [pc, #60]	; (8002620 <HAL_RCC_OscConfig+0x778>)
 80025e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025e6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025e8:	4b0d      	ldr	r3, [pc, #52]	; (8002620 <HAL_RCC_OscConfig+0x778>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	4a0c      	ldr	r2, [pc, #48]	; (8002620 <HAL_RCC_OscConfig+0x778>)
 80025ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025f2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025f4:	f7fe f864 	bl	80006c0 <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025fa:	e008      	b.n	800260e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025fc:	f7fe f860 	bl	80006c0 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b02      	cmp	r3, #2
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e058      	b.n	80026c0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800260e:	4b04      	ldr	r3, [pc, #16]	; (8002620 <HAL_RCC_OscConfig+0x778>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d0f0      	beq.n	80025fc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800261a:	e050      	b.n	80026be <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e04f      	b.n	80026c0 <HAL_RCC_OscConfig+0x818>
 8002620:	40021000 	.word	0x40021000
 8002624:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002628:	4b27      	ldr	r3, [pc, #156]	; (80026c8 <HAL_RCC_OscConfig+0x820>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d144      	bne.n	80026be <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002634:	4b24      	ldr	r3, [pc, #144]	; (80026c8 <HAL_RCC_OscConfig+0x820>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a23      	ldr	r2, [pc, #140]	; (80026c8 <HAL_RCC_OscConfig+0x820>)
 800263a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800263e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002640:	4b21      	ldr	r3, [pc, #132]	; (80026c8 <HAL_RCC_OscConfig+0x820>)
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	4a20      	ldr	r2, [pc, #128]	; (80026c8 <HAL_RCC_OscConfig+0x820>)
 8002646:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800264a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800264c:	f7fe f838 	bl	80006c0 <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002654:	f7fe f834 	bl	80006c0 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e02c      	b.n	80026c0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002666:	4b18      	ldr	r3, [pc, #96]	; (80026c8 <HAL_RCC_OscConfig+0x820>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d0f0      	beq.n	8002654 <HAL_RCC_OscConfig+0x7ac>
 8002672:	e024      	b.n	80026be <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	2b0c      	cmp	r3, #12
 8002678:	d01f      	beq.n	80026ba <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800267a:	4b13      	ldr	r3, [pc, #76]	; (80026c8 <HAL_RCC_OscConfig+0x820>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a12      	ldr	r2, [pc, #72]	; (80026c8 <HAL_RCC_OscConfig+0x820>)
 8002680:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002684:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002686:	f7fe f81b 	bl	80006c0 <HAL_GetTick>
 800268a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800268c:	e008      	b.n	80026a0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800268e:	f7fe f817 	bl	80006c0 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b02      	cmp	r3, #2
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e00f      	b.n	80026c0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026a0:	4b09      	ldr	r3, [pc, #36]	; (80026c8 <HAL_RCC_OscConfig+0x820>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d1f0      	bne.n	800268e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80026ac:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <HAL_RCC_OscConfig+0x820>)
 80026ae:	68da      	ldr	r2, [r3, #12]
 80026b0:	4905      	ldr	r1, [pc, #20]	; (80026c8 <HAL_RCC_OscConfig+0x820>)
 80026b2:	4b06      	ldr	r3, [pc, #24]	; (80026cc <HAL_RCC_OscConfig+0x824>)
 80026b4:	4013      	ands	r3, r2
 80026b6:	60cb      	str	r3, [r1, #12]
 80026b8:	e001      	b.n	80026be <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e000      	b.n	80026c0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3720      	adds	r7, #32
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40021000 	.word	0x40021000
 80026cc:	feeefffc 	.word	0xfeeefffc

080026d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d101      	bne.n	80026e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e0e7      	b.n	80028b4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026e4:	4b75      	ldr	r3, [pc, #468]	; (80028bc <HAL_RCC_ClockConfig+0x1ec>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0307 	and.w	r3, r3, #7
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d910      	bls.n	8002714 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026f2:	4b72      	ldr	r3, [pc, #456]	; (80028bc <HAL_RCC_ClockConfig+0x1ec>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f023 0207 	bic.w	r2, r3, #7
 80026fa:	4970      	ldr	r1, [pc, #448]	; (80028bc <HAL_RCC_ClockConfig+0x1ec>)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	4313      	orrs	r3, r2
 8002700:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002702:	4b6e      	ldr	r3, [pc, #440]	; (80028bc <HAL_RCC_ClockConfig+0x1ec>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0307 	and.w	r3, r3, #7
 800270a:	683a      	ldr	r2, [r7, #0]
 800270c:	429a      	cmp	r2, r3
 800270e:	d001      	beq.n	8002714 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e0cf      	b.n	80028b4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d010      	beq.n	8002742 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689a      	ldr	r2, [r3, #8]
 8002724:	4b66      	ldr	r3, [pc, #408]	; (80028c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800272c:	429a      	cmp	r2, r3
 800272e:	d908      	bls.n	8002742 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002730:	4b63      	ldr	r3, [pc, #396]	; (80028c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	4960      	ldr	r1, [pc, #384]	; (80028c0 <HAL_RCC_ClockConfig+0x1f0>)
 800273e:	4313      	orrs	r3, r2
 8002740:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	2b00      	cmp	r3, #0
 800274c:	d04c      	beq.n	80027e8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	2b03      	cmp	r3, #3
 8002754:	d107      	bne.n	8002766 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002756:	4b5a      	ldr	r3, [pc, #360]	; (80028c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d121      	bne.n	80027a6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e0a6      	b.n	80028b4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	2b02      	cmp	r3, #2
 800276c:	d107      	bne.n	800277e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800276e:	4b54      	ldr	r3, [pc, #336]	; (80028c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d115      	bne.n	80027a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e09a      	b.n	80028b4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d107      	bne.n	8002796 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002786:	4b4e      	ldr	r3, [pc, #312]	; (80028c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d109      	bne.n	80027a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e08e      	b.n	80028b4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002796:	4b4a      	ldr	r3, [pc, #296]	; (80028c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d101      	bne.n	80027a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e086      	b.n	80028b4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027a6:	4b46      	ldr	r3, [pc, #280]	; (80028c0 <HAL_RCC_ClockConfig+0x1f0>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f023 0203 	bic.w	r2, r3, #3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	4943      	ldr	r1, [pc, #268]	; (80028c0 <HAL_RCC_ClockConfig+0x1f0>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027b8:	f7fd ff82 	bl	80006c0 <HAL_GetTick>
 80027bc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027be:	e00a      	b.n	80027d6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027c0:	f7fd ff7e 	bl	80006c0 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e06e      	b.n	80028b4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027d6:	4b3a      	ldr	r3, [pc, #232]	; (80028c0 <HAL_RCC_ClockConfig+0x1f0>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f003 020c 	and.w	r2, r3, #12
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d1eb      	bne.n	80027c0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0302 	and.w	r3, r3, #2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d010      	beq.n	8002816 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689a      	ldr	r2, [r3, #8]
 80027f8:	4b31      	ldr	r3, [pc, #196]	; (80028c0 <HAL_RCC_ClockConfig+0x1f0>)
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002800:	429a      	cmp	r2, r3
 8002802:	d208      	bcs.n	8002816 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002804:	4b2e      	ldr	r3, [pc, #184]	; (80028c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	492b      	ldr	r1, [pc, #172]	; (80028c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002812:	4313      	orrs	r3, r2
 8002814:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002816:	4b29      	ldr	r3, [pc, #164]	; (80028bc <HAL_RCC_ClockConfig+0x1ec>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0307 	and.w	r3, r3, #7
 800281e:	683a      	ldr	r2, [r7, #0]
 8002820:	429a      	cmp	r2, r3
 8002822:	d210      	bcs.n	8002846 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002824:	4b25      	ldr	r3, [pc, #148]	; (80028bc <HAL_RCC_ClockConfig+0x1ec>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f023 0207 	bic.w	r2, r3, #7
 800282c:	4923      	ldr	r1, [pc, #140]	; (80028bc <HAL_RCC_ClockConfig+0x1ec>)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	4313      	orrs	r3, r2
 8002832:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002834:	4b21      	ldr	r3, [pc, #132]	; (80028bc <HAL_RCC_ClockConfig+0x1ec>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0307 	and.w	r3, r3, #7
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	429a      	cmp	r2, r3
 8002840:	d001      	beq.n	8002846 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e036      	b.n	80028b4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0304 	and.w	r3, r3, #4
 800284e:	2b00      	cmp	r3, #0
 8002850:	d008      	beq.n	8002864 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002852:	4b1b      	ldr	r3, [pc, #108]	; (80028c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	4918      	ldr	r1, [pc, #96]	; (80028c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002860:	4313      	orrs	r3, r2
 8002862:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0308 	and.w	r3, r3, #8
 800286c:	2b00      	cmp	r3, #0
 800286e:	d009      	beq.n	8002884 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002870:	4b13      	ldr	r3, [pc, #76]	; (80028c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	00db      	lsls	r3, r3, #3
 800287e:	4910      	ldr	r1, [pc, #64]	; (80028c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002880:	4313      	orrs	r3, r2
 8002882:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002884:	f000 f824 	bl	80028d0 <HAL_RCC_GetSysClockFreq>
 8002888:	4602      	mov	r2, r0
 800288a:	4b0d      	ldr	r3, [pc, #52]	; (80028c0 <HAL_RCC_ClockConfig+0x1f0>)
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	091b      	lsrs	r3, r3, #4
 8002890:	f003 030f 	and.w	r3, r3, #15
 8002894:	490b      	ldr	r1, [pc, #44]	; (80028c4 <HAL_RCC_ClockConfig+0x1f4>)
 8002896:	5ccb      	ldrb	r3, [r1, r3]
 8002898:	f003 031f 	and.w	r3, r3, #31
 800289c:	fa22 f303 	lsr.w	r3, r2, r3
 80028a0:	4a09      	ldr	r2, [pc, #36]	; (80028c8 <HAL_RCC_ClockConfig+0x1f8>)
 80028a2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80028a4:	4b09      	ldr	r3, [pc, #36]	; (80028cc <HAL_RCC_ClockConfig+0x1fc>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7fd feb9 	bl	8000620 <HAL_InitTick>
 80028ae:	4603      	mov	r3, r0
 80028b0:	72fb      	strb	r3, [r7, #11]

  return status;
 80028b2:	7afb      	ldrb	r3, [r7, #11]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3710      	adds	r7, #16
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	40022000 	.word	0x40022000
 80028c0:	40021000 	.word	0x40021000
 80028c4:	080030e8 	.word	0x080030e8
 80028c8:	20000000 	.word	0x20000000
 80028cc:	20000004 	.word	0x20000004

080028d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b089      	sub	sp, #36	; 0x24
 80028d4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80028d6:	2300      	movs	r3, #0
 80028d8:	61fb      	str	r3, [r7, #28]
 80028da:	2300      	movs	r3, #0
 80028dc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028de:	4b3e      	ldr	r3, [pc, #248]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f003 030c 	and.w	r3, r3, #12
 80028e6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028e8:	4b3b      	ldr	r3, [pc, #236]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	f003 0303 	and.w	r3, r3, #3
 80028f0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d005      	beq.n	8002904 <HAL_RCC_GetSysClockFreq+0x34>
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	2b0c      	cmp	r3, #12
 80028fc:	d121      	bne.n	8002942 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d11e      	bne.n	8002942 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002904:	4b34      	ldr	r3, [pc, #208]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0308 	and.w	r3, r3, #8
 800290c:	2b00      	cmp	r3, #0
 800290e:	d107      	bne.n	8002920 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002910:	4b31      	ldr	r3, [pc, #196]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002912:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002916:	0a1b      	lsrs	r3, r3, #8
 8002918:	f003 030f 	and.w	r3, r3, #15
 800291c:	61fb      	str	r3, [r7, #28]
 800291e:	e005      	b.n	800292c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002920:	4b2d      	ldr	r3, [pc, #180]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	091b      	lsrs	r3, r3, #4
 8002926:	f003 030f 	and.w	r3, r3, #15
 800292a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800292c:	4a2b      	ldr	r2, [pc, #172]	; (80029dc <HAL_RCC_GetSysClockFreq+0x10c>)
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002934:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d10d      	bne.n	8002958 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002940:	e00a      	b.n	8002958 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	2b04      	cmp	r3, #4
 8002946:	d102      	bne.n	800294e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002948:	4b25      	ldr	r3, [pc, #148]	; (80029e0 <HAL_RCC_GetSysClockFreq+0x110>)
 800294a:	61bb      	str	r3, [r7, #24]
 800294c:	e004      	b.n	8002958 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	2b08      	cmp	r3, #8
 8002952:	d101      	bne.n	8002958 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002954:	4b23      	ldr	r3, [pc, #140]	; (80029e4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002956:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	2b0c      	cmp	r3, #12
 800295c:	d134      	bne.n	80029c8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800295e:	4b1e      	ldr	r3, [pc, #120]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	f003 0303 	and.w	r3, r3, #3
 8002966:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	2b02      	cmp	r3, #2
 800296c:	d003      	beq.n	8002976 <HAL_RCC_GetSysClockFreq+0xa6>
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	2b03      	cmp	r3, #3
 8002972:	d003      	beq.n	800297c <HAL_RCC_GetSysClockFreq+0xac>
 8002974:	e005      	b.n	8002982 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002976:	4b1a      	ldr	r3, [pc, #104]	; (80029e0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002978:	617b      	str	r3, [r7, #20]
      break;
 800297a:	e005      	b.n	8002988 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800297c:	4b19      	ldr	r3, [pc, #100]	; (80029e4 <HAL_RCC_GetSysClockFreq+0x114>)
 800297e:	617b      	str	r3, [r7, #20]
      break;
 8002980:	e002      	b.n	8002988 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	617b      	str	r3, [r7, #20]
      break;
 8002986:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002988:	4b13      	ldr	r3, [pc, #76]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x108>)
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	091b      	lsrs	r3, r3, #4
 800298e:	f003 0307 	and.w	r3, r3, #7
 8002992:	3301      	adds	r3, #1
 8002994:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002996:	4b10      	ldr	r3, [pc, #64]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	0a1b      	lsrs	r3, r3, #8
 800299c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029a0:	697a      	ldr	r2, [r7, #20]
 80029a2:	fb03 f202 	mul.w	r2, r3, r2
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80029ae:	4b0a      	ldr	r3, [pc, #40]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	0e5b      	lsrs	r3, r3, #25
 80029b4:	f003 0303 	and.w	r3, r3, #3
 80029b8:	3301      	adds	r3, #1
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80029c8:	69bb      	ldr	r3, [r7, #24]
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3724      	adds	r7, #36	; 0x24
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	40021000 	.word	0x40021000
 80029dc:	080030f8 	.word	0x080030f8
 80029e0:	00f42400 	.word	0x00f42400
 80029e4:	007a1200 	.word	0x007a1200

080029e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80029f0:	2300      	movs	r3, #0
 80029f2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80029f4:	4b2a      	ldr	r3, [pc, #168]	; (8002aa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d003      	beq.n	8002a08 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002a00:	f7ff f9ee 	bl	8001de0 <HAL_PWREx_GetVoltageRange>
 8002a04:	6178      	str	r0, [r7, #20]
 8002a06:	e014      	b.n	8002a32 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a08:	4b25      	ldr	r3, [pc, #148]	; (8002aa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a0c:	4a24      	ldr	r2, [pc, #144]	; (8002aa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a12:	6593      	str	r3, [r2, #88]	; 0x58
 8002a14:	4b22      	ldr	r3, [pc, #136]	; (8002aa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a1c:	60fb      	str	r3, [r7, #12]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002a20:	f7ff f9de 	bl	8001de0 <HAL_PWREx_GetVoltageRange>
 8002a24:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002a26:	4b1e      	ldr	r3, [pc, #120]	; (8002aa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a2a:	4a1d      	ldr	r2, [pc, #116]	; (8002aa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a30:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a38:	d10b      	bne.n	8002a52 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2b80      	cmp	r3, #128	; 0x80
 8002a3e:	d919      	bls.n	8002a74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2ba0      	cmp	r3, #160	; 0xa0
 8002a44:	d902      	bls.n	8002a4c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a46:	2302      	movs	r3, #2
 8002a48:	613b      	str	r3, [r7, #16]
 8002a4a:	e013      	b.n	8002a74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	613b      	str	r3, [r7, #16]
 8002a50:	e010      	b.n	8002a74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2b80      	cmp	r3, #128	; 0x80
 8002a56:	d902      	bls.n	8002a5e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002a58:	2303      	movs	r3, #3
 8002a5a:	613b      	str	r3, [r7, #16]
 8002a5c:	e00a      	b.n	8002a74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2b80      	cmp	r3, #128	; 0x80
 8002a62:	d102      	bne.n	8002a6a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a64:	2302      	movs	r3, #2
 8002a66:	613b      	str	r3, [r7, #16]
 8002a68:	e004      	b.n	8002a74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2b70      	cmp	r3, #112	; 0x70
 8002a6e:	d101      	bne.n	8002a74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a70:	2301      	movs	r3, #1
 8002a72:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a74:	4b0b      	ldr	r3, [pc, #44]	; (8002aa4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f023 0207 	bic.w	r2, r3, #7
 8002a7c:	4909      	ldr	r1, [pc, #36]	; (8002aa4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002a84:	4b07      	ldr	r3, [pc, #28]	; (8002aa4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0307 	and.w	r3, r3, #7
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d001      	beq.n	8002a96 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e000      	b.n	8002a98 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3718      	adds	r7, #24
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	40022000 	.word	0x40022000

08002aa8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b086      	sub	sp, #24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d031      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ac8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002acc:	d01a      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002ace:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ad2:	d814      	bhi.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d009      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002ad8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002adc:	d10f      	bne.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002ade:	4b5d      	ldr	r3, [pc, #372]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	4a5c      	ldr	r2, [pc, #368]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ae4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002aea:	e00c      	b.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	3304      	adds	r3, #4
 8002af0:	2100      	movs	r1, #0
 8002af2:	4618      	mov	r0, r3
 8002af4:	f000 f9ce 	bl	8002e94 <RCCEx_PLLSAI1_Config>
 8002af8:	4603      	mov	r3, r0
 8002afa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002afc:	e003      	b.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	74fb      	strb	r3, [r7, #19]
      break;
 8002b02:	e000      	b.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002b04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b06:	7cfb      	ldrb	r3, [r7, #19]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d10b      	bne.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b0c:	4b51      	ldr	r3, [pc, #324]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b12:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b1a:	494e      	ldr	r1, [pc, #312]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002b22:	e001      	b.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b24:	7cfb      	ldrb	r3, [r7, #19]
 8002b26:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	f000 809e 	beq.w	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b36:	2300      	movs	r3, #0
 8002b38:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b3a:	4b46      	ldr	r3, [pc, #280]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002b46:	2301      	movs	r3, #1
 8002b48:	e000      	b.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00d      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b50:	4b40      	ldr	r3, [pc, #256]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b54:	4a3f      	ldr	r2, [pc, #252]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b5a:	6593      	str	r3, [r2, #88]	; 0x58
 8002b5c:	4b3d      	ldr	r3, [pc, #244]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b64:	60bb      	str	r3, [r7, #8]
 8002b66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b6c:	4b3a      	ldr	r3, [pc, #232]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a39      	ldr	r2, [pc, #228]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002b72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b76:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b78:	f7fd fda2 	bl	80006c0 <HAL_GetTick>
 8002b7c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b7e:	e009      	b.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b80:	f7fd fd9e 	bl	80006c0 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d902      	bls.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	74fb      	strb	r3, [r7, #19]
        break;
 8002b92:	e005      	b.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b94:	4b30      	ldr	r3, [pc, #192]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d0ef      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002ba0:	7cfb      	ldrb	r3, [r7, #19]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d15a      	bne.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002ba6:	4b2b      	ldr	r3, [pc, #172]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bb0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d01e      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bbc:	697a      	ldr	r2, [r7, #20]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d019      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002bc2:	4b24      	ldr	r3, [pc, #144]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bcc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002bce:	4b21      	ldr	r3, [pc, #132]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd4:	4a1f      	ldr	r2, [pc, #124]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002bde:	4b1d      	ldr	r3, [pc, #116]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002be4:	4a1b      	ldr	r2, [pc, #108]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002be6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002bee:	4a19      	ldr	r2, [pc, #100]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d016      	beq.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c00:	f7fd fd5e 	bl	80006c0 <HAL_GetTick>
 8002c04:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c06:	e00b      	b.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c08:	f7fd fd5a 	bl	80006c0 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d902      	bls.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	74fb      	strb	r3, [r7, #19]
            break;
 8002c1e:	e006      	b.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c20:	4b0c      	ldr	r3, [pc, #48]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d0ec      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002c2e:	7cfb      	ldrb	r3, [r7, #19]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d10b      	bne.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c34:	4b07      	ldr	r3, [pc, #28]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c3a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c42:	4904      	ldr	r1, [pc, #16]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002c4a:	e009      	b.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c4c:	7cfb      	ldrb	r3, [r7, #19]
 8002c4e:	74bb      	strb	r3, [r7, #18]
 8002c50:	e006      	b.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002c52:	bf00      	nop
 8002c54:	40021000 	.word	0x40021000
 8002c58:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c5c:	7cfb      	ldrb	r3, [r7, #19]
 8002c5e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c60:	7c7b      	ldrb	r3, [r7, #17]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d105      	bne.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c66:	4b8a      	ldr	r3, [pc, #552]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c6a:	4a89      	ldr	r2, [pc, #548]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c70:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00a      	beq.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c7e:	4b84      	ldr	r3, [pc, #528]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c84:	f023 0203 	bic.w	r2, r3, #3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a1b      	ldr	r3, [r3, #32]
 8002c8c:	4980      	ldr	r1, [pc, #512]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d00a      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ca0:	4b7b      	ldr	r3, [pc, #492]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ca6:	f023 020c 	bic.w	r2, r3, #12
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cae:	4978      	ldr	r1, [pc, #480]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0320 	and.w	r3, r3, #32
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00a      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002cc2:	4b73      	ldr	r3, [pc, #460]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd0:	496f      	ldr	r1, [pc, #444]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d00a      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ce4:	4b6a      	ldr	r3, [pc, #424]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cea:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cf2:	4967      	ldr	r1, [pc, #412]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00a      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d06:	4b62      	ldr	r3, [pc, #392]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d0c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d14:	495e      	ldr	r1, [pc, #376]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d00a      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d28:	4b59      	ldr	r3, [pc, #356]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d2e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d36:	4956      	ldr	r1, [pc, #344]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00a      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d4a:	4b51      	ldr	r3, [pc, #324]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d50:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d58:	494d      	ldr	r1, [pc, #308]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d028      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d6c:	4b48      	ldr	r3, [pc, #288]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d72:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7a:	4945      	ldr	r1, [pc, #276]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d8a:	d106      	bne.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d8c:	4b40      	ldr	r3, [pc, #256]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	4a3f      	ldr	r2, [pc, #252]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d96:	60d3      	str	r3, [r2, #12]
 8002d98:	e011      	b.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002da2:	d10c      	bne.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	3304      	adds	r3, #4
 8002da8:	2101      	movs	r1, #1
 8002daa:	4618      	mov	r0, r3
 8002dac:	f000 f872 	bl	8002e94 <RCCEx_PLLSAI1_Config>
 8002db0:	4603      	mov	r3, r0
 8002db2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002db4:	7cfb      	ldrb	r3, [r7, #19]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002dba:	7cfb      	ldrb	r3, [r7, #19]
 8002dbc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d028      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002dca:	4b31      	ldr	r3, [pc, #196]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dd0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd8:	492d      	ldr	r1, [pc, #180]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002de8:	d106      	bne.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dea:	4b29      	ldr	r3, [pc, #164]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	4a28      	ldr	r2, [pc, #160]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002df0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002df4:	60d3      	str	r3, [r2, #12]
 8002df6:	e011      	b.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e00:	d10c      	bne.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	3304      	adds	r3, #4
 8002e06:	2101      	movs	r1, #1
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f000 f843 	bl	8002e94 <RCCEx_PLLSAI1_Config>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e12:	7cfb      	ldrb	r3, [r7, #19]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d001      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002e18:	7cfb      	ldrb	r3, [r7, #19]
 8002e1a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d01c      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e28:	4b19      	ldr	r3, [pc, #100]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e2e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e36:	4916      	ldr	r1, [pc, #88]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e46:	d10c      	bne.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	3304      	adds	r3, #4
 8002e4c:	2102      	movs	r1, #2
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f000 f820 	bl	8002e94 <RCCEx_PLLSAI1_Config>
 8002e54:	4603      	mov	r3, r0
 8002e56:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e58:	7cfb      	ldrb	r3, [r7, #19]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002e5e:	7cfb      	ldrb	r3, [r7, #19]
 8002e60:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d00a      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002e6e:	4b08      	ldr	r3, [pc, #32]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e74:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e7c:	4904      	ldr	r1, [pc, #16]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002e84:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3718      	adds	r7, #24
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	40021000 	.word	0x40021000

08002e94 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ea2:	4b74      	ldr	r3, [pc, #464]	; (8003074 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	f003 0303 	and.w	r3, r3, #3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d018      	beq.n	8002ee0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002eae:	4b71      	ldr	r3, [pc, #452]	; (8003074 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	f003 0203 	and.w	r2, r3, #3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d10d      	bne.n	8002eda <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
       ||
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d009      	beq.n	8002eda <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002ec6:	4b6b      	ldr	r3, [pc, #428]	; (8003074 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	091b      	lsrs	r3, r3, #4
 8002ecc:	f003 0307 	and.w	r3, r3, #7
 8002ed0:	1c5a      	adds	r2, r3, #1
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
       ||
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d047      	beq.n	8002f6a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	73fb      	strb	r3, [r7, #15]
 8002ede:	e044      	b.n	8002f6a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2b03      	cmp	r3, #3
 8002ee6:	d018      	beq.n	8002f1a <RCCEx_PLLSAI1_Config+0x86>
 8002ee8:	2b03      	cmp	r3, #3
 8002eea:	d825      	bhi.n	8002f38 <RCCEx_PLLSAI1_Config+0xa4>
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d002      	beq.n	8002ef6 <RCCEx_PLLSAI1_Config+0x62>
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d009      	beq.n	8002f08 <RCCEx_PLLSAI1_Config+0x74>
 8002ef4:	e020      	b.n	8002f38 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ef6:	4b5f      	ldr	r3, [pc, #380]	; (8003074 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d11d      	bne.n	8002f3e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f06:	e01a      	b.n	8002f3e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f08:	4b5a      	ldr	r3, [pc, #360]	; (8003074 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d116      	bne.n	8002f42 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f18:	e013      	b.n	8002f42 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f1a:	4b56      	ldr	r3, [pc, #344]	; (8003074 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10f      	bne.n	8002f46 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f26:	4b53      	ldr	r3, [pc, #332]	; (8003074 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d109      	bne.n	8002f46 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f36:	e006      	b.n	8002f46 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f3c:	e004      	b.n	8002f48 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f3e:	bf00      	nop
 8002f40:	e002      	b.n	8002f48 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f42:	bf00      	nop
 8002f44:	e000      	b.n	8002f48 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f46:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f48:	7bfb      	ldrb	r3, [r7, #15]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d10d      	bne.n	8002f6a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f4e:	4b49      	ldr	r3, [pc, #292]	; (8003074 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6819      	ldr	r1, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	011b      	lsls	r3, r3, #4
 8002f62:	430b      	orrs	r3, r1
 8002f64:	4943      	ldr	r1, [pc, #268]	; (8003074 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f6a:	7bfb      	ldrb	r3, [r7, #15]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d17c      	bne.n	800306a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002f70:	4b40      	ldr	r3, [pc, #256]	; (8003074 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a3f      	ldr	r2, [pc, #252]	; (8003074 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f76:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f7c:	f7fd fba0 	bl	80006c0 <HAL_GetTick>
 8002f80:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f82:	e009      	b.n	8002f98 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f84:	f7fd fb9c 	bl	80006c0 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d902      	bls.n	8002f98 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	73fb      	strb	r3, [r7, #15]
        break;
 8002f96:	e005      	b.n	8002fa4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f98:	4b36      	ldr	r3, [pc, #216]	; (8003074 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d1ef      	bne.n	8002f84 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002fa4:	7bfb      	ldrb	r3, [r7, #15]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d15f      	bne.n	800306a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d110      	bne.n	8002fd2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fb0:	4b30      	ldr	r3, [pc, #192]	; (8003074 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fb2:	691b      	ldr	r3, [r3, #16]
 8002fb4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002fb8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	6892      	ldr	r2, [r2, #8]
 8002fc0:	0211      	lsls	r1, r2, #8
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	68d2      	ldr	r2, [r2, #12]
 8002fc6:	06d2      	lsls	r2, r2, #27
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	492a      	ldr	r1, [pc, #168]	; (8003074 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	610b      	str	r3, [r1, #16]
 8002fd0:	e027      	b.n	8003022 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d112      	bne.n	8002ffe <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fd8:	4b26      	ldr	r3, [pc, #152]	; (8003074 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fda:	691b      	ldr	r3, [r3, #16]
 8002fdc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002fe0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	6892      	ldr	r2, [r2, #8]
 8002fe8:	0211      	lsls	r1, r2, #8
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	6912      	ldr	r2, [r2, #16]
 8002fee:	0852      	lsrs	r2, r2, #1
 8002ff0:	3a01      	subs	r2, #1
 8002ff2:	0552      	lsls	r2, r2, #21
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	491f      	ldr	r1, [pc, #124]	; (8003074 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	610b      	str	r3, [r1, #16]
 8002ffc:	e011      	b.n	8003022 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ffe:	4b1d      	ldr	r3, [pc, #116]	; (8003074 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003006:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	6892      	ldr	r2, [r2, #8]
 800300e:	0211      	lsls	r1, r2, #8
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	6952      	ldr	r2, [r2, #20]
 8003014:	0852      	lsrs	r2, r2, #1
 8003016:	3a01      	subs	r2, #1
 8003018:	0652      	lsls	r2, r2, #25
 800301a:	430a      	orrs	r2, r1
 800301c:	4915      	ldr	r1, [pc, #84]	; (8003074 <RCCEx_PLLSAI1_Config+0x1e0>)
 800301e:	4313      	orrs	r3, r2
 8003020:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003022:	4b14      	ldr	r3, [pc, #80]	; (8003074 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a13      	ldr	r2, [pc, #76]	; (8003074 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003028:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800302c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800302e:	f7fd fb47 	bl	80006c0 <HAL_GetTick>
 8003032:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003034:	e009      	b.n	800304a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003036:	f7fd fb43 	bl	80006c0 <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	2b02      	cmp	r3, #2
 8003042:	d902      	bls.n	800304a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	73fb      	strb	r3, [r7, #15]
          break;
 8003048:	e005      	b.n	8003056 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800304a:	4b0a      	ldr	r3, [pc, #40]	; (8003074 <RCCEx_PLLSAI1_Config+0x1e0>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d0ef      	beq.n	8003036 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003056:	7bfb      	ldrb	r3, [r7, #15]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d106      	bne.n	800306a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800305c:	4b05      	ldr	r3, [pc, #20]	; (8003074 <RCCEx_PLLSAI1_Config+0x1e0>)
 800305e:	691a      	ldr	r2, [r3, #16]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	4903      	ldr	r1, [pc, #12]	; (8003074 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003066:	4313      	orrs	r3, r2
 8003068:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800306a:	7bfb      	ldrb	r3, [r7, #15]
}
 800306c:	4618      	mov	r0, r3
 800306e:	3710      	adds	r7, #16
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	40021000 	.word	0x40021000

08003078 <__libc_init_array>:
 8003078:	b570      	push	{r4, r5, r6, lr}
 800307a:	4d0d      	ldr	r5, [pc, #52]	; (80030b0 <__libc_init_array+0x38>)
 800307c:	4c0d      	ldr	r4, [pc, #52]	; (80030b4 <__libc_init_array+0x3c>)
 800307e:	1b64      	subs	r4, r4, r5
 8003080:	10a4      	asrs	r4, r4, #2
 8003082:	2600      	movs	r6, #0
 8003084:	42a6      	cmp	r6, r4
 8003086:	d109      	bne.n	800309c <__libc_init_array+0x24>
 8003088:	4d0b      	ldr	r5, [pc, #44]	; (80030b8 <__libc_init_array+0x40>)
 800308a:	4c0c      	ldr	r4, [pc, #48]	; (80030bc <__libc_init_array+0x44>)
 800308c:	f000 f820 	bl	80030d0 <_init>
 8003090:	1b64      	subs	r4, r4, r5
 8003092:	10a4      	asrs	r4, r4, #2
 8003094:	2600      	movs	r6, #0
 8003096:	42a6      	cmp	r6, r4
 8003098:	d105      	bne.n	80030a6 <__libc_init_array+0x2e>
 800309a:	bd70      	pop	{r4, r5, r6, pc}
 800309c:	f855 3b04 	ldr.w	r3, [r5], #4
 80030a0:	4798      	blx	r3
 80030a2:	3601      	adds	r6, #1
 80030a4:	e7ee      	b.n	8003084 <__libc_init_array+0xc>
 80030a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80030aa:	4798      	blx	r3
 80030ac:	3601      	adds	r6, #1
 80030ae:	e7f2      	b.n	8003096 <__libc_init_array+0x1e>
 80030b0:	08003128 	.word	0x08003128
 80030b4:	08003128 	.word	0x08003128
 80030b8:	08003128 	.word	0x08003128
 80030bc:	0800312c 	.word	0x0800312c

080030c0 <memset>:
 80030c0:	4402      	add	r2, r0
 80030c2:	4603      	mov	r3, r0
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d100      	bne.n	80030ca <memset+0xa>
 80030c8:	4770      	bx	lr
 80030ca:	f803 1b01 	strb.w	r1, [r3], #1
 80030ce:	e7f9      	b.n	80030c4 <memset+0x4>

080030d0 <_init>:
 80030d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030d2:	bf00      	nop
 80030d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030d6:	bc08      	pop	{r3}
 80030d8:	469e      	mov	lr, r3
 80030da:	4770      	bx	lr

080030dc <_fini>:
 80030dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030de:	bf00      	nop
 80030e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030e2:	bc08      	pop	{r3}
 80030e4:	469e      	mov	lr, r3
 80030e6:	4770      	bx	lr
