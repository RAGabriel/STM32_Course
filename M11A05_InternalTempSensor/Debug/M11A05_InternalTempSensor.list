
M11A05_InternalTempSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003604  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003794  08003794  00013794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037d4  080037d4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080037d4  080037d4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080037d4  080037d4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037d4  080037d4  000137d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037d8  080037d8  000137d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080037dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  2000000c  080037e8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  080037e8  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009385  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001831  00000000  00000000  000293c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000978  00000000  00000000  0002abf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008b0  00000000  00000000  0002b570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fe17  00000000  00000000  0002be20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000097d5  00000000  00000000  0004bc37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6dcd  00000000  00000000  0005540c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011c1d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000270c  00000000  00000000  0011c22c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000000c 	.word	0x2000000c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800377c 	.word	0x0800377c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000010 	.word	0x20000010
 80001cc:	0800377c 	.word	0x0800377c

080001d0 <__aeabi_dmul>:
 80001d0:	b570      	push	{r4, r5, r6, lr}
 80001d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001de:	bf1d      	ittte	ne
 80001e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001e4:	ea94 0f0c 	teqne	r4, ip
 80001e8:	ea95 0f0c 	teqne	r5, ip
 80001ec:	f000 f8de 	bleq	80003ac <__aeabi_dmul+0x1dc>
 80001f0:	442c      	add	r4, r5
 80001f2:	ea81 0603 	eor.w	r6, r1, r3
 80001f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000202:	bf18      	it	ne
 8000204:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000208:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800020c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000210:	d038      	beq.n	8000284 <__aeabi_dmul+0xb4>
 8000212:	fba0 ce02 	umull	ip, lr, r0, r2
 8000216:	f04f 0500 	mov.w	r5, #0
 800021a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800021e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000222:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000226:	f04f 0600 	mov.w	r6, #0
 800022a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800022e:	f09c 0f00 	teq	ip, #0
 8000232:	bf18      	it	ne
 8000234:	f04e 0e01 	orrne.w	lr, lr, #1
 8000238:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800023c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000240:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000244:	d204      	bcs.n	8000250 <__aeabi_dmul+0x80>
 8000246:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800024a:	416d      	adcs	r5, r5
 800024c:	eb46 0606 	adc.w	r6, r6, r6
 8000250:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000254:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000258:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800025c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000260:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000264:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000268:	bf88      	it	hi
 800026a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800026e:	d81e      	bhi.n	80002ae <__aeabi_dmul+0xde>
 8000270:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000274:	bf08      	it	eq
 8000276:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800027a:	f150 0000 	adcs.w	r0, r0, #0
 800027e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000288:	ea46 0101 	orr.w	r1, r6, r1
 800028c:	ea40 0002 	orr.w	r0, r0, r2
 8000290:	ea81 0103 	eor.w	r1, r1, r3
 8000294:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000298:	bfc2      	ittt	gt
 800029a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800029e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002a2:	bd70      	popgt	{r4, r5, r6, pc}
 80002a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a8:	f04f 0e00 	mov.w	lr, #0
 80002ac:	3c01      	subs	r4, #1
 80002ae:	f300 80ab 	bgt.w	8000408 <__aeabi_dmul+0x238>
 80002b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002b6:	bfde      	ittt	le
 80002b8:	2000      	movle	r0, #0
 80002ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002be:	bd70      	pople	{r4, r5, r6, pc}
 80002c0:	f1c4 0400 	rsb	r4, r4, #0
 80002c4:	3c20      	subs	r4, #32
 80002c6:	da35      	bge.n	8000334 <__aeabi_dmul+0x164>
 80002c8:	340c      	adds	r4, #12
 80002ca:	dc1b      	bgt.n	8000304 <__aeabi_dmul+0x134>
 80002cc:	f104 0414 	add.w	r4, r4, #20
 80002d0:	f1c4 0520 	rsb	r5, r4, #32
 80002d4:	fa00 f305 	lsl.w	r3, r0, r5
 80002d8:	fa20 f004 	lsr.w	r0, r0, r4
 80002dc:	fa01 f205 	lsl.w	r2, r1, r5
 80002e0:	ea40 0002 	orr.w	r0, r0, r2
 80002e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f0:	fa21 f604 	lsr.w	r6, r1, r4
 80002f4:	eb42 0106 	adc.w	r1, r2, r6
 80002f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002fc:	bf08      	it	eq
 80002fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000302:	bd70      	pop	{r4, r5, r6, pc}
 8000304:	f1c4 040c 	rsb	r4, r4, #12
 8000308:	f1c4 0520 	rsb	r5, r4, #32
 800030c:	fa00 f304 	lsl.w	r3, r0, r4
 8000310:	fa20 f005 	lsr.w	r0, r0, r5
 8000314:	fa01 f204 	lsl.w	r2, r1, r4
 8000318:	ea40 0002 	orr.w	r0, r0, r2
 800031c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000320:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000324:	f141 0100 	adc.w	r1, r1, #0
 8000328:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800032c:	bf08      	it	eq
 800032e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f1c4 0520 	rsb	r5, r4, #32
 8000338:	fa00 f205 	lsl.w	r2, r0, r5
 800033c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000340:	fa20 f304 	lsr.w	r3, r0, r4
 8000344:	fa01 f205 	lsl.w	r2, r1, r5
 8000348:	ea43 0302 	orr.w	r3, r3, r2
 800034c:	fa21 f004 	lsr.w	r0, r1, r4
 8000350:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000354:	fa21 f204 	lsr.w	r2, r1, r4
 8000358:	ea20 0002 	bic.w	r0, r0, r2
 800035c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f094 0f00 	teq	r4, #0
 8000370:	d10f      	bne.n	8000392 <__aeabi_dmul+0x1c2>
 8000372:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000376:	0040      	lsls	r0, r0, #1
 8000378:	eb41 0101 	adc.w	r1, r1, r1
 800037c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000380:	bf08      	it	eq
 8000382:	3c01      	subeq	r4, #1
 8000384:	d0f7      	beq.n	8000376 <__aeabi_dmul+0x1a6>
 8000386:	ea41 0106 	orr.w	r1, r1, r6
 800038a:	f095 0f00 	teq	r5, #0
 800038e:	bf18      	it	ne
 8000390:	4770      	bxne	lr
 8000392:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000396:	0052      	lsls	r2, r2, #1
 8000398:	eb43 0303 	adc.w	r3, r3, r3
 800039c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a0:	bf08      	it	eq
 80003a2:	3d01      	subeq	r5, #1
 80003a4:	d0f7      	beq.n	8000396 <__aeabi_dmul+0x1c6>
 80003a6:	ea43 0306 	orr.w	r3, r3, r6
 80003aa:	4770      	bx	lr
 80003ac:	ea94 0f0c 	teq	r4, ip
 80003b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003b4:	bf18      	it	ne
 80003b6:	ea95 0f0c 	teqne	r5, ip
 80003ba:	d00c      	beq.n	80003d6 <__aeabi_dmul+0x206>
 80003bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c0:	bf18      	it	ne
 80003c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003c6:	d1d1      	bne.n	800036c <__aeabi_dmul+0x19c>
 80003c8:	ea81 0103 	eor.w	r1, r1, r3
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	f04f 0000 	mov.w	r0, #0
 80003d4:	bd70      	pop	{r4, r5, r6, pc}
 80003d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003da:	bf06      	itte	eq
 80003dc:	4610      	moveq	r0, r2
 80003de:	4619      	moveq	r1, r3
 80003e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003e4:	d019      	beq.n	800041a <__aeabi_dmul+0x24a>
 80003e6:	ea94 0f0c 	teq	r4, ip
 80003ea:	d102      	bne.n	80003f2 <__aeabi_dmul+0x222>
 80003ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f0:	d113      	bne.n	800041a <__aeabi_dmul+0x24a>
 80003f2:	ea95 0f0c 	teq	r5, ip
 80003f6:	d105      	bne.n	8000404 <__aeabi_dmul+0x234>
 80003f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003fc:	bf1c      	itt	ne
 80003fe:	4610      	movne	r0, r2
 8000400:	4619      	movne	r1, r3
 8000402:	d10a      	bne.n	800041a <__aeabi_dmul+0x24a>
 8000404:	ea81 0103 	eor.w	r1, r1, r3
 8000408:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800040c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000410:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000414:	f04f 0000 	mov.w	r0, #0
 8000418:	bd70      	pop	{r4, r5, r6, pc}
 800041a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800041e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000422:	bd70      	pop	{r4, r5, r6, pc}

08000424 <__aeabi_drsub>:
 8000424:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000428:	e002      	b.n	8000430 <__adddf3>
 800042a:	bf00      	nop

0800042c <__aeabi_dsub>:
 800042c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000430 <__adddf3>:
 8000430:	b530      	push	{r4, r5, lr}
 8000432:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000436:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800043a:	ea94 0f05 	teq	r4, r5
 800043e:	bf08      	it	eq
 8000440:	ea90 0f02 	teqeq	r0, r2
 8000444:	bf1f      	itttt	ne
 8000446:	ea54 0c00 	orrsne.w	ip, r4, r0
 800044a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800044e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000452:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000456:	f000 80e2 	beq.w	800061e <__adddf3+0x1ee>
 800045a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800045e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000462:	bfb8      	it	lt
 8000464:	426d      	neglt	r5, r5
 8000466:	dd0c      	ble.n	8000482 <__adddf3+0x52>
 8000468:	442c      	add	r4, r5
 800046a:	ea80 0202 	eor.w	r2, r0, r2
 800046e:	ea81 0303 	eor.w	r3, r1, r3
 8000472:	ea82 0000 	eor.w	r0, r2, r0
 8000476:	ea83 0101 	eor.w	r1, r3, r1
 800047a:	ea80 0202 	eor.w	r2, r0, r2
 800047e:	ea81 0303 	eor.w	r3, r1, r3
 8000482:	2d36      	cmp	r5, #54	; 0x36
 8000484:	bf88      	it	hi
 8000486:	bd30      	pophi	{r4, r5, pc}
 8000488:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800048c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000490:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000494:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000498:	d002      	beq.n	80004a0 <__adddf3+0x70>
 800049a:	4240      	negs	r0, r0
 800049c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004ac:	d002      	beq.n	80004b4 <__adddf3+0x84>
 80004ae:	4252      	negs	r2, r2
 80004b0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004b4:	ea94 0f05 	teq	r4, r5
 80004b8:	f000 80a7 	beq.w	800060a <__adddf3+0x1da>
 80004bc:	f1a4 0401 	sub.w	r4, r4, #1
 80004c0:	f1d5 0e20 	rsbs	lr, r5, #32
 80004c4:	db0d      	blt.n	80004e2 <__adddf3+0xb2>
 80004c6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004ca:	fa22 f205 	lsr.w	r2, r2, r5
 80004ce:	1880      	adds	r0, r0, r2
 80004d0:	f141 0100 	adc.w	r1, r1, #0
 80004d4:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d8:	1880      	adds	r0, r0, r2
 80004da:	fa43 f305 	asr.w	r3, r3, r5
 80004de:	4159      	adcs	r1, r3
 80004e0:	e00e      	b.n	8000500 <__adddf3+0xd0>
 80004e2:	f1a5 0520 	sub.w	r5, r5, #32
 80004e6:	f10e 0e20 	add.w	lr, lr, #32
 80004ea:	2a01      	cmp	r2, #1
 80004ec:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f0:	bf28      	it	cs
 80004f2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004f6:	fa43 f305 	asr.w	r3, r3, r5
 80004fa:	18c0      	adds	r0, r0, r3
 80004fc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	d507      	bpl.n	8000516 <__adddf3+0xe6>
 8000506:	f04f 0e00 	mov.w	lr, #0
 800050a:	f1dc 0c00 	rsbs	ip, ip, #0
 800050e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000512:	eb6e 0101 	sbc.w	r1, lr, r1
 8000516:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800051a:	d31b      	bcc.n	8000554 <__adddf3+0x124>
 800051c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000520:	d30c      	bcc.n	800053c <__adddf3+0x10c>
 8000522:	0849      	lsrs	r1, r1, #1
 8000524:	ea5f 0030 	movs.w	r0, r0, rrx
 8000528:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800052c:	f104 0401 	add.w	r4, r4, #1
 8000530:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000534:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000538:	f080 809a 	bcs.w	8000670 <__adddf3+0x240>
 800053c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000540:	bf08      	it	eq
 8000542:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000546:	f150 0000 	adcs.w	r0, r0, #0
 800054a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800054e:	ea41 0105 	orr.w	r1, r1, r5
 8000552:	bd30      	pop	{r4, r5, pc}
 8000554:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000558:	4140      	adcs	r0, r0
 800055a:	eb41 0101 	adc.w	r1, r1, r1
 800055e:	3c01      	subs	r4, #1
 8000560:	bf28      	it	cs
 8000562:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000566:	d2e9      	bcs.n	800053c <__adddf3+0x10c>
 8000568:	f091 0f00 	teq	r1, #0
 800056c:	bf04      	itt	eq
 800056e:	4601      	moveq	r1, r0
 8000570:	2000      	moveq	r0, #0
 8000572:	fab1 f381 	clz	r3, r1
 8000576:	bf08      	it	eq
 8000578:	3320      	addeq	r3, #32
 800057a:	f1a3 030b 	sub.w	r3, r3, #11
 800057e:	f1b3 0220 	subs.w	r2, r3, #32
 8000582:	da0c      	bge.n	800059e <__adddf3+0x16e>
 8000584:	320c      	adds	r2, #12
 8000586:	dd08      	ble.n	800059a <__adddf3+0x16a>
 8000588:	f102 0c14 	add.w	ip, r2, #20
 800058c:	f1c2 020c 	rsb	r2, r2, #12
 8000590:	fa01 f00c 	lsl.w	r0, r1, ip
 8000594:	fa21 f102 	lsr.w	r1, r1, r2
 8000598:	e00c      	b.n	80005b4 <__adddf3+0x184>
 800059a:	f102 0214 	add.w	r2, r2, #20
 800059e:	bfd8      	it	le
 80005a0:	f1c2 0c20 	rsble	ip, r2, #32
 80005a4:	fa01 f102 	lsl.w	r1, r1, r2
 80005a8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005ac:	bfdc      	itt	le
 80005ae:	ea41 010c 	orrle.w	r1, r1, ip
 80005b2:	4090      	lslle	r0, r2
 80005b4:	1ae4      	subs	r4, r4, r3
 80005b6:	bfa2      	ittt	ge
 80005b8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005bc:	4329      	orrge	r1, r5
 80005be:	bd30      	popge	{r4, r5, pc}
 80005c0:	ea6f 0404 	mvn.w	r4, r4
 80005c4:	3c1f      	subs	r4, #31
 80005c6:	da1c      	bge.n	8000602 <__adddf3+0x1d2>
 80005c8:	340c      	adds	r4, #12
 80005ca:	dc0e      	bgt.n	80005ea <__adddf3+0x1ba>
 80005cc:	f104 0414 	add.w	r4, r4, #20
 80005d0:	f1c4 0220 	rsb	r2, r4, #32
 80005d4:	fa20 f004 	lsr.w	r0, r0, r4
 80005d8:	fa01 f302 	lsl.w	r3, r1, r2
 80005dc:	ea40 0003 	orr.w	r0, r0, r3
 80005e0:	fa21 f304 	lsr.w	r3, r1, r4
 80005e4:	ea45 0103 	orr.w	r1, r5, r3
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	f1c4 040c 	rsb	r4, r4, #12
 80005ee:	f1c4 0220 	rsb	r2, r4, #32
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 f304 	lsl.w	r3, r1, r4
 80005fa:	ea40 0003 	orr.w	r0, r0, r3
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	fa21 f004 	lsr.w	r0, r1, r4
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	f094 0f00 	teq	r4, #0
 800060e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000612:	bf06      	itte	eq
 8000614:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000618:	3401      	addeq	r4, #1
 800061a:	3d01      	subne	r5, #1
 800061c:	e74e      	b.n	80004bc <__adddf3+0x8c>
 800061e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000622:	bf18      	it	ne
 8000624:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000628:	d029      	beq.n	800067e <__adddf3+0x24e>
 800062a:	ea94 0f05 	teq	r4, r5
 800062e:	bf08      	it	eq
 8000630:	ea90 0f02 	teqeq	r0, r2
 8000634:	d005      	beq.n	8000642 <__adddf3+0x212>
 8000636:	ea54 0c00 	orrs.w	ip, r4, r0
 800063a:	bf04      	itt	eq
 800063c:	4619      	moveq	r1, r3
 800063e:	4610      	moveq	r0, r2
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	ea91 0f03 	teq	r1, r3
 8000646:	bf1e      	ittt	ne
 8000648:	2100      	movne	r1, #0
 800064a:	2000      	movne	r0, #0
 800064c:	bd30      	popne	{r4, r5, pc}
 800064e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000652:	d105      	bne.n	8000660 <__adddf3+0x230>
 8000654:	0040      	lsls	r0, r0, #1
 8000656:	4149      	adcs	r1, r1
 8000658:	bf28      	it	cs
 800065a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800065e:	bd30      	pop	{r4, r5, pc}
 8000660:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000664:	bf3c      	itt	cc
 8000666:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800066a:	bd30      	popcc	{r4, r5, pc}
 800066c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000670:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000674:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000678:	f04f 0000 	mov.w	r0, #0
 800067c:	bd30      	pop	{r4, r5, pc}
 800067e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000682:	bf1a      	itte	ne
 8000684:	4619      	movne	r1, r3
 8000686:	4610      	movne	r0, r2
 8000688:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800068c:	bf1c      	itt	ne
 800068e:	460b      	movne	r3, r1
 8000690:	4602      	movne	r2, r0
 8000692:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000696:	bf06      	itte	eq
 8000698:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800069c:	ea91 0f03 	teqeq	r1, r3
 80006a0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006a4:	bd30      	pop	{r4, r5, pc}
 80006a6:	bf00      	nop

080006a8 <__aeabi_ui2d>:
 80006a8:	f090 0f00 	teq	r0, #0
 80006ac:	bf04      	itt	eq
 80006ae:	2100      	moveq	r1, #0
 80006b0:	4770      	bxeq	lr
 80006b2:	b530      	push	{r4, r5, lr}
 80006b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006bc:	f04f 0500 	mov.w	r5, #0
 80006c0:	f04f 0100 	mov.w	r1, #0
 80006c4:	e750      	b.n	8000568 <__adddf3+0x138>
 80006c6:	bf00      	nop

080006c8 <__aeabi_i2d>:
 80006c8:	f090 0f00 	teq	r0, #0
 80006cc:	bf04      	itt	eq
 80006ce:	2100      	moveq	r1, #0
 80006d0:	4770      	bxeq	lr
 80006d2:	b530      	push	{r4, r5, lr}
 80006d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006dc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e0:	bf48      	it	mi
 80006e2:	4240      	negmi	r0, r0
 80006e4:	f04f 0100 	mov.w	r1, #0
 80006e8:	e73e      	b.n	8000568 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_f2d>:
 80006ec:	0042      	lsls	r2, r0, #1
 80006ee:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006fa:	bf1f      	itttt	ne
 80006fc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000700:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000704:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000708:	4770      	bxne	lr
 800070a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800070e:	bf08      	it	eq
 8000710:	4770      	bxeq	lr
 8000712:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000716:	bf04      	itt	eq
 8000718:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800071c:	4770      	bxeq	lr
 800071e:	b530      	push	{r4, r5, lr}
 8000720:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000724:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000728:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800072c:	e71c      	b.n	8000568 <__adddf3+0x138>
 800072e:	bf00      	nop

08000730 <__aeabi_ul2d>:
 8000730:	ea50 0201 	orrs.w	r2, r0, r1
 8000734:	bf08      	it	eq
 8000736:	4770      	bxeq	lr
 8000738:	b530      	push	{r4, r5, lr}
 800073a:	f04f 0500 	mov.w	r5, #0
 800073e:	e00a      	b.n	8000756 <__aeabi_l2d+0x16>

08000740 <__aeabi_l2d>:
 8000740:	ea50 0201 	orrs.w	r2, r0, r1
 8000744:	bf08      	it	eq
 8000746:	4770      	bxeq	lr
 8000748:	b530      	push	{r4, r5, lr}
 800074a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800074e:	d502      	bpl.n	8000756 <__aeabi_l2d+0x16>
 8000750:	4240      	negs	r0, r0
 8000752:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000756:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800075a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000762:	f43f aed8 	beq.w	8000516 <__adddf3+0xe6>
 8000766:	f04f 0203 	mov.w	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800077e:	f1c2 0320 	rsb	r3, r2, #32
 8000782:	fa00 fc03 	lsl.w	ip, r0, r3
 8000786:	fa20 f002 	lsr.w	r0, r0, r2
 800078a:	fa01 fe03 	lsl.w	lr, r1, r3
 800078e:	ea40 000e 	orr.w	r0, r0, lr
 8000792:	fa21 f102 	lsr.w	r1, r1, r2
 8000796:	4414      	add	r4, r2
 8000798:	e6bd      	b.n	8000516 <__adddf3+0xe6>
 800079a:	bf00      	nop

0800079c <__aeabi_d2f>:
 800079c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007a0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007a4:	bf24      	itt	cs
 80007a6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007aa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007ae:	d90d      	bls.n	80007cc <__aeabi_d2f+0x30>
 80007b0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007b4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007b8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007bc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007c0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007c4:	bf08      	it	eq
 80007c6:	f020 0001 	biceq.w	r0, r0, #1
 80007ca:	4770      	bx	lr
 80007cc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007d0:	d121      	bne.n	8000816 <__aeabi_d2f+0x7a>
 80007d2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007d6:	bfbc      	itt	lt
 80007d8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007dc:	4770      	bxlt	lr
 80007de:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007e6:	f1c2 0218 	rsb	r2, r2, #24
 80007ea:	f1c2 0c20 	rsb	ip, r2, #32
 80007ee:	fa10 f30c 	lsls.w	r3, r0, ip
 80007f2:	fa20 f002 	lsr.w	r0, r0, r2
 80007f6:	bf18      	it	ne
 80007f8:	f040 0001 	orrne.w	r0, r0, #1
 80007fc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000800:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000804:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000808:	ea40 000c 	orr.w	r0, r0, ip
 800080c:	fa23 f302 	lsr.w	r3, r3, r2
 8000810:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000814:	e7cc      	b.n	80007b0 <__aeabi_d2f+0x14>
 8000816:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800081a:	d107      	bne.n	800082c <__aeabi_d2f+0x90>
 800081c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000820:	bf1e      	ittt	ne
 8000822:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000826:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800082a:	4770      	bxne	lr
 800082c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000830:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000834:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop

0800083c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000842:	463b      	mov	r3, r7
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	611a      	str	r2, [r3, #16]
 8000850:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000852:	4b29      	ldr	r3, [pc, #164]	; (80008f8 <MX_ADC1_Init+0xbc>)
 8000854:	4a29      	ldr	r2, [pc, #164]	; (80008fc <MX_ADC1_Init+0xc0>)
 8000856:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000858:	4b27      	ldr	r3, [pc, #156]	; (80008f8 <MX_ADC1_Init+0xbc>)
 800085a:	2200      	movs	r2, #0
 800085c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800085e:	4b26      	ldr	r3, [pc, #152]	; (80008f8 <MX_ADC1_Init+0xbc>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000864:	4b24      	ldr	r3, [pc, #144]	; (80008f8 <MX_ADC1_Init+0xbc>)
 8000866:	2200      	movs	r2, #0
 8000868:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800086a:	4b23      	ldr	r3, [pc, #140]	; (80008f8 <MX_ADC1_Init+0xbc>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000870:	4b21      	ldr	r3, [pc, #132]	; (80008f8 <MX_ADC1_Init+0xbc>)
 8000872:	2204      	movs	r2, #4
 8000874:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000876:	4b20      	ldr	r3, [pc, #128]	; (80008f8 <MX_ADC1_Init+0xbc>)
 8000878:	2200      	movs	r2, #0
 800087a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800087c:	4b1e      	ldr	r3, [pc, #120]	; (80008f8 <MX_ADC1_Init+0xbc>)
 800087e:	2201      	movs	r2, #1
 8000880:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000882:	4b1d      	ldr	r3, [pc, #116]	; (80008f8 <MX_ADC1_Init+0xbc>)
 8000884:	2201      	movs	r2, #1
 8000886:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000888:	4b1b      	ldr	r3, [pc, #108]	; (80008f8 <MX_ADC1_Init+0xbc>)
 800088a:	2200      	movs	r2, #0
 800088c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000890:	4b19      	ldr	r3, [pc, #100]	; (80008f8 <MX_ADC1_Init+0xbc>)
 8000892:	2200      	movs	r2, #0
 8000894:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000896:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <MX_ADC1_Init+0xbc>)
 8000898:	2200      	movs	r2, #0
 800089a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800089c:	4b16      	ldr	r3, [pc, #88]	; (80008f8 <MX_ADC1_Init+0xbc>)
 800089e:	2200      	movs	r2, #0
 80008a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008a4:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <MX_ADC1_Init+0xbc>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80008aa:	4b13      	ldr	r3, [pc, #76]	; (80008f8 <MX_ADC1_Init+0xbc>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008b2:	4811      	ldr	r0, [pc, #68]	; (80008f8 <MX_ADC1_Init+0xbc>)
 80008b4:	f000 fc7c 	bl	80011b0 <HAL_ADC_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80008be:	f000 f95d 	bl	8000b7c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80008c2:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <MX_ADC1_Init+0xc4>)
 80008c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008c6:	2306      	movs	r3, #6
 80008c8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 80008ca:	2306      	movs	r3, #6
 80008cc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008ce:	237f      	movs	r3, #127	; 0x7f
 80008d0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008d2:	2304      	movs	r3, #4
 80008d4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008da:	463b      	mov	r3, r7
 80008dc:	4619      	mov	r1, r3
 80008de:	4806      	ldr	r0, [pc, #24]	; (80008f8 <MX_ADC1_Init+0xbc>)
 80008e0:	f000 fee0 	bl	80016a4 <HAL_ADC_ConfigChannel>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80008ea:	f000 f947 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008ee:	bf00      	nop
 80008f0:	3718      	adds	r7, #24
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	20000028 	.word	0x20000028
 80008fc:	50040000 	.word	0x50040000
 8000900:	c7520000 	.word	0xc7520000

08000904 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b098      	sub	sp, #96	; 0x60
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800090c:	f107 030c 	add.w	r3, r7, #12
 8000910:	2254      	movs	r2, #84	; 0x54
 8000912:	2100      	movs	r1, #0
 8000914:	4618      	mov	r0, r3
 8000916:	f002 ff29 	bl	800376c <memset>
  if(adcHandle->Instance==ADC1)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4a19      	ldr	r2, [pc, #100]	; (8000984 <HAL_ADC_MspInit+0x80>)
 8000920:	4293      	cmp	r3, r2
 8000922:	d12a      	bne.n	800097a <HAL_ADC_MspInit+0x76>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000924:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000928:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800092a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800092e:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000930:	2301      	movs	r3, #1
 8000932:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000934:	2301      	movs	r3, #1
 8000936:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000938:	2310      	movs	r3, #16
 800093a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800093c:	2307      	movs	r3, #7
 800093e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000940:	2302      	movs	r3, #2
 8000942:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 8000944:	2304      	movs	r3, #4
 8000946:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000948:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800094c:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800094e:	f107 030c 	add.w	r3, r7, #12
 8000952:	4618      	mov	r0, r3
 8000954:	f002 fbfe 	bl	8003154 <HAL_RCCEx_PeriphCLKConfig>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <HAL_ADC_MspInit+0x5e>
    {
      Error_Handler();
 800095e:	f000 f90d 	bl	8000b7c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000962:	4b09      	ldr	r3, [pc, #36]	; (8000988 <HAL_ADC_MspInit+0x84>)
 8000964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000966:	4a08      	ldr	r2, [pc, #32]	; (8000988 <HAL_ADC_MspInit+0x84>)
 8000968:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800096c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800096e:	4b06      	ldr	r3, [pc, #24]	; (8000988 <HAL_ADC_MspInit+0x84>)
 8000970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000972:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000976:	60bb      	str	r3, [r7, #8]
 8000978:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800097a:	bf00      	nop
 800097c:	3760      	adds	r7, #96	; 0x60
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	50040000 	.word	0x50040000
 8000988:	40021000 	.word	0x40021000
 800098c:	00000000 	.word	0x00000000

08000990 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000990:	b5b0      	push	{r4, r5, r7, lr}
 8000992:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000994:	f000 f981 	bl	8000c9a <HAL_Init>

	/* USER CODE BEGIN Init */
	correction_value = (float) (TS_CAL2_TEMP - TS_CAL1_TEMP) / (*TS_CAL2 - *TS_CAL1 );
 8000998:	4b45      	ldr	r3, [pc, #276]	; (8000ab0 <main+0x120>)
 800099a:	881b      	ldrh	r3, [r3, #0]
 800099c:	461a      	mov	r2, r3
 800099e:	4b45      	ldr	r3, [pc, #276]	; (8000ab4 <main+0x124>)
 80009a0:	881b      	ldrh	r3, [r3, #0]
 80009a2:	1ad3      	subs	r3, r2, r3
 80009a4:	ee07 3a90 	vmov	s15, r3
 80009a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80009ac:	eddf 6a42 	vldr	s13, [pc, #264]	; 8000ab8 <main+0x128>
 80009b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80009b4:	4b41      	ldr	r3, [pc, #260]	; (8000abc <main+0x12c>)
 80009b6:	edc3 7a00 	vstr	s15, [r3]
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80009ba:	f000 f88d 	bl	8000ad8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_ADC1_Init();
 80009be:	f7ff ff3d 	bl	800083c <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */
	HAL_ADCEx_Calibration_Start(&hadc1, 0);
 80009c2:	2100      	movs	r1, #0
 80009c4:	483e      	ldr	r0, [pc, #248]	; (8000ac0 <main+0x130>)
 80009c6:	f001 fc1b 	bl	8002200 <HAL_ADCEx_Calibration_Start>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		HAL_ADC_Start(&hadc1);
 80009ca:	483d      	ldr	r0, [pc, #244]	; (8000ac0 <main+0x130>)
 80009cc:	f000 fd38 	bl	8001440 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 100);
 80009d0:	2164      	movs	r1, #100	; 0x64
 80009d2:	483b      	ldr	r0, [pc, #236]	; (8000ac0 <main+0x130>)
 80009d4:	f000 fdca 	bl	800156c <HAL_ADC_PollForConversion>

		raw_data = HAL_ADC_GetValue(&hadc1);
 80009d8:	4839      	ldr	r0, [pc, #228]	; (8000ac0 <main+0x130>)
 80009da:	f000 fe56 	bl	800168a <HAL_ADC_GetValue>
 80009de:	4603      	mov	r3, r0
 80009e0:	4a38      	ldr	r2, [pc, #224]	; (8000ac4 <main+0x134>)
 80009e2:	6013      	str	r3, [r2, #0]
		temperature1 = __HAL_ADC_CALC_TEMPERATURE(3300, raw_data, ADC_RESOLUTION_12B);
 80009e4:	4b37      	ldr	r3, [pc, #220]	; (8000ac4 <main+0x134>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f640 42e4 	movw	r2, #3300	; 0xce4
 80009ec:	fb02 f303 	mul.w	r3, r2, r3
 80009f0:	4a35      	ldr	r2, [pc, #212]	; (8000ac8 <main+0x138>)
 80009f2:	fba2 2303 	umull	r2, r3, r2, r3
 80009f6:	099b      	lsrs	r3, r3, #6
 80009f8:	461a      	mov	r2, r3
 80009fa:	4b2e      	ldr	r3, [pc, #184]	; (8000ab4 <main+0x124>)
 80009fc:	881b      	ldrh	r3, [r3, #0]
 80009fe:	1ad3      	subs	r3, r2, r3
 8000a00:	2264      	movs	r2, #100	; 0x64
 8000a02:	fb03 f202 	mul.w	r2, r3, r2
 8000a06:	4b2a      	ldr	r3, [pc, #168]	; (8000ab0 <main+0x120>)
 8000a08:	881b      	ldrh	r3, [r3, #0]
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4b29      	ldr	r3, [pc, #164]	; (8000ab4 <main+0x124>)
 8000a0e:	881b      	ldrh	r3, [r3, #0]
 8000a10:	1acb      	subs	r3, r1, r3
 8000a12:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a16:	331e      	adds	r3, #30
 8000a18:	ee07 3a90 	vmov	s15, r3
 8000a1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a20:	4b2a      	ldr	r3, [pc, #168]	; (8000acc <main+0x13c>)
 8000a22:	edc3 7a00 	vstr	s15, [r3]
		temperature2 = (float) (((raw_data * (REFERENCE_VOLTAGE/CALIBRATION_REFERENCE_VOLTAGE) - *TS_CAL1 ) * correction_value) + TS_CAL1_TEMP);
 8000a26:	4b27      	ldr	r3, [pc, #156]	; (8000ac4 <main+0x134>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f7ff fe3c 	bl	80006a8 <__aeabi_ui2d>
 8000a30:	a31d      	add	r3, pc, #116	; (adr r3, 8000aa8 <main+0x118>)
 8000a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a36:	f7ff fbcb 	bl	80001d0 <__aeabi_dmul>
 8000a3a:	4602      	mov	r2, r0
 8000a3c:	460b      	mov	r3, r1
 8000a3e:	4614      	mov	r4, r2
 8000a40:	461d      	mov	r5, r3
 8000a42:	4b1c      	ldr	r3, [pc, #112]	; (8000ab4 <main+0x124>)
 8000a44:	881b      	ldrh	r3, [r3, #0]
 8000a46:	4618      	mov	r0, r3
 8000a48:	f7ff fe3e 	bl	80006c8 <__aeabi_i2d>
 8000a4c:	4602      	mov	r2, r0
 8000a4e:	460b      	mov	r3, r1
 8000a50:	4620      	mov	r0, r4
 8000a52:	4629      	mov	r1, r5
 8000a54:	f7ff fcea 	bl	800042c <__aeabi_dsub>
 8000a58:	4602      	mov	r2, r0
 8000a5a:	460b      	mov	r3, r1
 8000a5c:	4614      	mov	r4, r2
 8000a5e:	461d      	mov	r5, r3
 8000a60:	4b16      	ldr	r3, [pc, #88]	; (8000abc <main+0x12c>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff fe41 	bl	80006ec <__aeabi_f2d>
 8000a6a:	4602      	mov	r2, r0
 8000a6c:	460b      	mov	r3, r1
 8000a6e:	4620      	mov	r0, r4
 8000a70:	4629      	mov	r1, r5
 8000a72:	f7ff fbad 	bl	80001d0 <__aeabi_dmul>
 8000a76:	4602      	mov	r2, r0
 8000a78:	460b      	mov	r3, r1
 8000a7a:	4610      	mov	r0, r2
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	f04f 0200 	mov.w	r2, #0
 8000a82:	4b13      	ldr	r3, [pc, #76]	; (8000ad0 <main+0x140>)
 8000a84:	f7ff fcd4 	bl	8000430 <__adddf3>
 8000a88:	4602      	mov	r2, r0
 8000a8a:	460b      	mov	r3, r1
 8000a8c:	4610      	mov	r0, r2
 8000a8e:	4619      	mov	r1, r3
 8000a90:	f7ff fe84 	bl	800079c <__aeabi_d2f>
 8000a94:	4603      	mov	r3, r0
 8000a96:	4a0f      	ldr	r2, [pc, #60]	; (8000ad4 <main+0x144>)
 8000a98:	6013      	str	r3, [r2, #0]

		HAL_ADC_Stop(&hadc1);
 8000a9a:	4809      	ldr	r0, [pc, #36]	; (8000ac0 <main+0x130>)
 8000a9c:	f000 fd33 	bl	8001506 <HAL_ADC_Stop>
		HAL_ADC_Start(&hadc1);
 8000aa0:	e793      	b.n	80009ca <main+0x3a>
 8000aa2:	bf00      	nop
 8000aa4:	f3af 8000 	nop.w
 8000aa8:	99999999 	.word	0x99999999
 8000aac:	3ff19999 	.word	0x3ff19999
 8000ab0:	1fff75ca 	.word	0x1fff75ca
 8000ab4:	1fff75a8 	.word	0x1fff75a8
 8000ab8:	42c80000 	.word	0x42c80000
 8000abc:	20000098 	.word	0x20000098
 8000ac0:	20000028 	.word	0x20000028
 8000ac4:	2000008c 	.word	0x2000008c
 8000ac8:	057619f1 	.word	0x057619f1
 8000acc:	20000090 	.word	0x20000090
 8000ad0:	403e0000 	.word	0x403e0000
 8000ad4:	20000094 	.word	0x20000094

08000ad8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b096      	sub	sp, #88	; 0x58
 8000adc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000ade:	f107 0314 	add.w	r3, r7, #20
 8000ae2:	2244      	movs	r2, #68	; 0x44
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f002 fe40 	bl	800376c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000aec:	463b      	mov	r3, r7
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	605a      	str	r2, [r3, #4]
 8000af4:	609a      	str	r2, [r3, #8]
 8000af6:	60da      	str	r2, [r3, #12]
 8000af8:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 8000afa:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000afe:	f001 fcd3 	bl	80024a8 <HAL_PWREx_ControlVoltageScaling>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 8000b08:	f000 f838 	bl	8000b7c <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000b0c:	2310      	movs	r3, #16
 8000b0e:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b10:	2301      	movs	r3, #1
 8000b12:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8000b14:	2300      	movs	r3, #0
 8000b16:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000b18:	2360      	movs	r3, #96	; 0x60
 8000b1a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000b20:	2301      	movs	r3, #1
 8000b22:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000b24:	2301      	movs	r3, #1
 8000b26:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 16;
 8000b28:	2310      	movs	r3, #16
 8000b2a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b2c:	2307      	movs	r3, #7
 8000b2e:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b30:	2302      	movs	r3, #2
 8000b32:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b34:	2302      	movs	r3, #2
 8000b36:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f001 fd09 	bl	8002554 <HAL_RCC_OscConfig>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <SystemClock_Config+0x74>
		Error_Handler();
 8000b48:	f000 f818 	bl	8000b7c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000b4c:	230f      	movs	r3, #15
 8000b4e:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b50:	2303      	movs	r3, #3
 8000b52:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b54:	2300      	movs	r3, #0
 8000b56:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000b60:	463b      	mov	r3, r7
 8000b62:	2101      	movs	r1, #1
 8000b64:	4618      	mov	r0, r3
 8000b66:	f002 f909 	bl	8002d7c <HAL_RCC_ClockConfig>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <SystemClock_Config+0x9c>
		Error_Handler();
 8000b70:	f000 f804 	bl	8000b7c <Error_Handler>
	}
}
 8000b74:	bf00      	nop
 8000b76:	3758      	adds	r7, #88	; 0x58
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b80:	b672      	cpsid	i
}
 8000b82:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000b84:	e7fe      	b.n	8000b84 <Error_Handler+0x8>
	...

08000b88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8e:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <HAL_MspInit+0x44>)
 8000b90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b92:	4a0e      	ldr	r2, [pc, #56]	; (8000bcc <HAL_MspInit+0x44>)
 8000b94:	f043 0301 	orr.w	r3, r3, #1
 8000b98:	6613      	str	r3, [r2, #96]	; 0x60
 8000b9a:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <HAL_MspInit+0x44>)
 8000b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba6:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <HAL_MspInit+0x44>)
 8000ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000baa:	4a08      	ldr	r2, [pc, #32]	; (8000bcc <HAL_MspInit+0x44>)
 8000bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb0:	6593      	str	r3, [r2, #88]	; 0x58
 8000bb2:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <HAL_MspInit+0x44>)
 8000bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bba:	603b      	str	r3, [r7, #0]
 8000bbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	40021000 	.word	0x40021000

08000bd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <NMI_Handler+0x4>

08000bd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bda:	e7fe      	b.n	8000bda <HardFault_Handler+0x4>

08000bdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <MemManage_Handler+0x4>

08000be2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be6:	e7fe      	b.n	8000be6 <BusFault_Handler+0x4>

08000be8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bec:	e7fe      	b.n	8000bec <UsageFault_Handler+0x4>

08000bee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c1c:	f000 f892 	bl	8000d44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c28:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <SystemInit+0x20>)
 8000c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c2e:	4a05      	ldr	r2, [pc, #20]	; (8000c44 <SystemInit+0x20>)
 8000c30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c80 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c4c:	f7ff ffea 	bl	8000c24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c50:	480c      	ldr	r0, [pc, #48]	; (8000c84 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c52:	490d      	ldr	r1, [pc, #52]	; (8000c88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c54:	4a0d      	ldr	r2, [pc, #52]	; (8000c8c <LoopForever+0xe>)
  movs r3, #0
 8000c56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c58:	e002      	b.n	8000c60 <LoopCopyDataInit>

08000c5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c5e:	3304      	adds	r3, #4

08000c60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c64:	d3f9      	bcc.n	8000c5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c66:	4a0a      	ldr	r2, [pc, #40]	; (8000c90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c68:	4c0a      	ldr	r4, [pc, #40]	; (8000c94 <LoopForever+0x16>)
  movs r3, #0
 8000c6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c6c:	e001      	b.n	8000c72 <LoopFillZerobss>

08000c6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c70:	3204      	adds	r2, #4

08000c72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c74:	d3fb      	bcc.n	8000c6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c76:	f002 fd55 	bl	8003724 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c7a:	f7ff fe89 	bl	8000990 <main>

08000c7e <LoopForever>:

LoopForever:
    b LoopForever
 8000c7e:	e7fe      	b.n	8000c7e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c80:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000c84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c88:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c8c:	080037dc 	.word	0x080037dc
  ldr r2, =_sbss
 8000c90:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c94:	200000a0 	.word	0x200000a0

08000c98 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c98:	e7fe      	b.n	8000c98 <ADC1_IRQHandler>

08000c9a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b082      	sub	sp, #8
 8000c9e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ca4:	2003      	movs	r0, #3
 8000ca6:	f001 fbbd 	bl	8002424 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000caa:	2000      	movs	r0, #0
 8000cac:	f000 f80e 	bl	8000ccc <HAL_InitTick>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d002      	beq.n	8000cbc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	71fb      	strb	r3, [r7, #7]
 8000cba:	e001      	b.n	8000cc0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cbc:	f7ff ff64 	bl	8000b88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cc0:	79fb      	ldrb	r3, [r7, #7]
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
	...

08000ccc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000cd8:	4b17      	ldr	r3, [pc, #92]	; (8000d38 <HAL_InitTick+0x6c>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d023      	beq.n	8000d28 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ce0:	4b16      	ldr	r3, [pc, #88]	; (8000d3c <HAL_InitTick+0x70>)
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	4b14      	ldr	r3, [pc, #80]	; (8000d38 <HAL_InitTick+0x6c>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	4619      	mov	r1, r3
 8000cea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f001 fbbb 	bl	8002472 <HAL_SYSTICK_Config>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d10f      	bne.n	8000d22 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2b0f      	cmp	r3, #15
 8000d06:	d809      	bhi.n	8000d1c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	6879      	ldr	r1, [r7, #4]
 8000d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d10:	f001 fb93 	bl	800243a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d14:	4a0a      	ldr	r2, [pc, #40]	; (8000d40 <HAL_InitTick+0x74>)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6013      	str	r3, [r2, #0]
 8000d1a:	e007      	b.n	8000d2c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	73fb      	strb	r3, [r7, #15]
 8000d20:	e004      	b.n	8000d2c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
 8000d24:	73fb      	strb	r3, [r7, #15]
 8000d26:	e001      	b.n	8000d2c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3710      	adds	r7, #16
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000008 	.word	0x20000008
 8000d3c:	20000000 	.word	0x20000000
 8000d40:	20000004 	.word	0x20000004

08000d44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d48:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <HAL_IncTick+0x20>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <HAL_IncTick+0x24>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4413      	add	r3, r2
 8000d54:	4a04      	ldr	r2, [pc, #16]	; (8000d68 <HAL_IncTick+0x24>)
 8000d56:	6013      	str	r3, [r2, #0]
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	20000008 	.word	0x20000008
 8000d68:	2000009c 	.word	0x2000009c

08000d6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d70:	4b03      	ldr	r3, [pc, #12]	; (8000d80 <HAL_GetTick+0x14>)
 8000d72:	681b      	ldr	r3, [r3, #0]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	2000009c 	.word	0x2000009c

08000d84 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	689b      	ldr	r3, [r3, #8]
 8000d92:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	431a      	orrs	r2, r3
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	609a      	str	r2, [r3, #8]
}
 8000d9e:	bf00      	nop
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr

08000daa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000daa:	b480      	push	{r7}
 8000dac:	b083      	sub	sp, #12
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
 8000db2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	431a      	orrs	r2, r3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
}
 8000dc4:	bf00      	nop
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr

08000dd0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	689b      	ldr	r3, [r3, #8]
 8000ddc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b087      	sub	sp, #28
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
 8000df8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	3360      	adds	r3, #96	; 0x60
 8000dfe:	461a      	mov	r2, r3
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	4413      	add	r3, r2
 8000e06:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <LL_ADC_SetOffset+0x44>)
 8000e0e:	4013      	ands	r3, r2
 8000e10:	687a      	ldr	r2, [r7, #4]
 8000e12:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000e16:	683a      	ldr	r2, [r7, #0]
 8000e18:	430a      	orrs	r2, r1
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000e24:	bf00      	nop
 8000e26:	371c      	adds	r7, #28
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	03fff000 	.word	0x03fff000

08000e34 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	3360      	adds	r3, #96	; 0x60
 8000e42:	461a      	mov	r2, r3
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	4413      	add	r3, r2
 8000e4a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3714      	adds	r7, #20
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b087      	sub	sp, #28
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	60b9      	str	r1, [r7, #8]
 8000e6a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	3360      	adds	r3, #96	; 0x60
 8000e70:	461a      	mov	r2, r3
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	4413      	add	r3, r2
 8000e78:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	431a      	orrs	r2, r3
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000e8a:	bf00      	nop
 8000e8c:	371c      	adds	r7, #28
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr

08000e96 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000e96:	b480      	push	{r7}
 8000e98:	b083      	sub	sp, #12
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	68db      	ldr	r3, [r3, #12]
 8000ea2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d101      	bne.n	8000eae <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e000      	b.n	8000eb0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000eae:	2300      	movs	r3, #0
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b087      	sub	sp, #28
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	3330      	adds	r3, #48	; 0x30
 8000ecc:	461a      	mov	r2, r3
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	0a1b      	lsrs	r3, r3, #8
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	f003 030c 	and.w	r3, r3, #12
 8000ed8:	4413      	add	r3, r2
 8000eda:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	f003 031f 	and.w	r3, r3, #31
 8000ee6:	211f      	movs	r1, #31
 8000ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8000eec:	43db      	mvns	r3, r3
 8000eee:	401a      	ands	r2, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	0e9b      	lsrs	r3, r3, #26
 8000ef4:	f003 011f 	and.w	r1, r3, #31
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	f003 031f 	and.w	r3, r3, #31
 8000efe:	fa01 f303 	lsl.w	r3, r1, r3
 8000f02:	431a      	orrs	r2, r3
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000f08:	bf00      	nop
 8000f0a:	371c      	adds	r7, #28
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b087      	sub	sp, #28
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	3314      	adds	r3, #20
 8000f24:	461a      	mov	r2, r3
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	0e5b      	lsrs	r3, r3, #25
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	f003 0304 	and.w	r3, r3, #4
 8000f30:	4413      	add	r3, r2
 8000f32:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	0d1b      	lsrs	r3, r3, #20
 8000f3c:	f003 031f 	and.w	r3, r3, #31
 8000f40:	2107      	movs	r1, #7
 8000f42:	fa01 f303 	lsl.w	r3, r1, r3
 8000f46:	43db      	mvns	r3, r3
 8000f48:	401a      	ands	r2, r3
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	0d1b      	lsrs	r3, r3, #20
 8000f4e:	f003 031f 	and.w	r3, r3, #31
 8000f52:	6879      	ldr	r1, [r7, #4]
 8000f54:	fa01 f303 	lsl.w	r3, r1, r3
 8000f58:	431a      	orrs	r2, r3
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000f5e:	bf00      	nop
 8000f60:	371c      	adds	r7, #28
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
	...

08000f6c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f84:	43db      	mvns	r3, r3
 8000f86:	401a      	ands	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f003 0318 	and.w	r3, r3, #24
 8000f8e:	4908      	ldr	r1, [pc, #32]	; (8000fb0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000f90:	40d9      	lsrs	r1, r3
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	400b      	ands	r3, r1
 8000f96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f9a:	431a      	orrs	r2, r3
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000fa2:	bf00      	nop
 8000fa4:	3714      	adds	r7, #20
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	0007ffff 	.word	0x0007ffff

08000fb4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000fc4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fc8:	687a      	ldr	r2, [r7, #4]
 8000fca:	6093      	str	r3, [r2, #8]
}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000fe8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000fec:	d101      	bne.n	8000ff2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e000      	b.n	8000ff4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000ff2:	2300      	movs	r3, #0
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001010:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001014:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001038:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800103c:	d101      	bne.n	8001042 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800103e:	2301      	movs	r3, #1
 8001040:	e000      	b.n	8001044 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001042:	2300      	movs	r3, #0
}
 8001044:	4618      	mov	r0, r3
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001060:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001064:	f043 0201 	orr.w	r2, r3, #1
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001088:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800108c:	f043 0202 	orr.w	r2, r3, #2
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	f003 0301 	and.w	r3, r3, #1
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d101      	bne.n	80010b8 <LL_ADC_IsEnabled+0x18>
 80010b4:	2301      	movs	r3, #1
 80010b6:	e000      	b.n	80010ba <LL_ADC_IsEnabled+0x1a>
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr

080010c6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80010c6:	b480      	push	{r7}
 80010c8:	b083      	sub	sp, #12
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	f003 0302 	and.w	r3, r3, #2
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	d101      	bne.n	80010de <LL_ADC_IsDisableOngoing+0x18>
 80010da:	2301      	movs	r3, #1
 80010dc:	e000      	b.n	80010e0 <LL_ADC_IsDisableOngoing+0x1a>
 80010de:	2300      	movs	r3, #0
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80010fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001100:	f043 0204 	orr.w	r2, r3, #4
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001108:	bf00      	nop
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001124:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001128:	f043 0210 	orr.w	r2, r3, #16
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001130:	bf00      	nop
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	f003 0304 	and.w	r3, r3, #4
 800114c:	2b04      	cmp	r3, #4
 800114e:	d101      	bne.n	8001154 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001150:	2301      	movs	r3, #1
 8001152:	e000      	b.n	8001156 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001154:	2300      	movs	r3, #0
}
 8001156:	4618      	mov	r0, r3
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr

08001162 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001162:	b480      	push	{r7}
 8001164:	b083      	sub	sp, #12
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001172:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001176:	f043 0220 	orr.w	r2, r3, #32
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800117e:	bf00      	nop
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr

0800118a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800118a:	b480      	push	{r7}
 800118c:	b083      	sub	sp, #12
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	f003 0308 	and.w	r3, r3, #8
 800119a:	2b08      	cmp	r3, #8
 800119c:	d101      	bne.n	80011a2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800119e:	2301      	movs	r3, #1
 80011a0:	e000      	b.n	80011a4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80011a2:	2300      	movs	r3, #0
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b088      	sub	sp, #32
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011b8:	2300      	movs	r3, #0
 80011ba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80011bc:	2300      	movs	r3, #0
 80011be:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d101      	bne.n	80011ca <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e12c      	b.n	8001424 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	691b      	ldr	r3, [r3, #16]
 80011ce:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d109      	bne.n	80011ec <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f7ff fb93 	bl	8000904 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2200      	movs	r2, #0
 80011e2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2200      	movs	r2, #0
 80011e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff fef1 	bl	8000fd8 <LL_ADC_IsDeepPowerDownEnabled>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d004      	beq.n	8001206 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff fed7 	bl	8000fb4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff ff0c 	bl	8001028 <LL_ADC_IsInternalRegulatorEnabled>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d115      	bne.n	8001242 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff fef0 	bl	8001000 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001220:	4b82      	ldr	r3, [pc, #520]	; (800142c <HAL_ADC_Init+0x27c>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	099b      	lsrs	r3, r3, #6
 8001226:	4a82      	ldr	r2, [pc, #520]	; (8001430 <HAL_ADC_Init+0x280>)
 8001228:	fba2 2303 	umull	r2, r3, r2, r3
 800122c:	099b      	lsrs	r3, r3, #6
 800122e:	3301      	adds	r3, #1
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001234:	e002      	b.n	800123c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	3b01      	subs	r3, #1
 800123a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d1f9      	bne.n	8001236 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff feee 	bl	8001028 <LL_ADC_IsInternalRegulatorEnabled>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d10d      	bne.n	800126e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001256:	f043 0210 	orr.w	r2, r3, #16
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001262:	f043 0201 	orr.w	r2, r3, #1
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff ff62 	bl	800113c <LL_ADC_REG_IsConversionOngoing>
 8001278:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800127e:	f003 0310 	and.w	r3, r3, #16
 8001282:	2b00      	cmp	r3, #0
 8001284:	f040 80c5 	bne.w	8001412 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	2b00      	cmp	r3, #0
 800128c:	f040 80c1 	bne.w	8001412 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001294:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001298:	f043 0202 	orr.w	r2, r3, #2
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff fefb 	bl	80010a0 <LL_ADC_IsEnabled>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d10b      	bne.n	80012c8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80012b0:	4860      	ldr	r0, [pc, #384]	; (8001434 <HAL_ADC_Init+0x284>)
 80012b2:	f7ff fef5 	bl	80010a0 <LL_ADC_IsEnabled>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d105      	bne.n	80012c8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	4619      	mov	r1, r3
 80012c2:	485d      	ldr	r0, [pc, #372]	; (8001438 <HAL_ADC_Init+0x288>)
 80012c4:	f7ff fd5e 	bl	8000d84 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	7e5b      	ldrb	r3, [r3, #25]
 80012cc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80012d2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80012d8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80012de:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012e6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80012e8:	4313      	orrs	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d106      	bne.n	8001304 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012fa:	3b01      	subs	r3, #1
 80012fc:	045b      	lsls	r3, r3, #17
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4313      	orrs	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001308:	2b00      	cmp	r3, #0
 800130a:	d009      	beq.n	8001320 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001310:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001318:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	4313      	orrs	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	68da      	ldr	r2, [r3, #12]
 8001326:	4b45      	ldr	r3, [pc, #276]	; (800143c <HAL_ADC_Init+0x28c>)
 8001328:	4013      	ands	r3, r2
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	6812      	ldr	r2, [r2, #0]
 800132e:	69b9      	ldr	r1, [r7, #24]
 8001330:	430b      	orrs	r3, r1
 8001332:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff feff 	bl	800113c <LL_ADC_REG_IsConversionOngoing>
 800133e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff ff20 	bl	800118a <LL_ADC_INJ_IsConversionOngoing>
 800134a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d13d      	bne.n	80013ce <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d13a      	bne.n	80013ce <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800135c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001364:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001366:	4313      	orrs	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001374:	f023 0302 	bic.w	r3, r3, #2
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	6812      	ldr	r2, [r2, #0]
 800137c:	69b9      	ldr	r1, [r7, #24]
 800137e:	430b      	orrs	r3, r1
 8001380:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001388:	2b01      	cmp	r3, #1
 800138a:	d118      	bne.n	80013be <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	691b      	ldr	r3, [r3, #16]
 8001392:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001396:	f023 0304 	bic.w	r3, r3, #4
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80013a2:	4311      	orrs	r1, r2
 80013a4:	687a      	ldr	r2, [r7, #4]
 80013a6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80013a8:	4311      	orrs	r1, r2
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80013ae:	430a      	orrs	r2, r1
 80013b0:	431a      	orrs	r2, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f042 0201 	orr.w	r2, r2, #1
 80013ba:	611a      	str	r2, [r3, #16]
 80013bc:	e007      	b.n	80013ce <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	691a      	ldr	r2, [r3, #16]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f022 0201 	bic.w	r2, r2, #1
 80013cc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	691b      	ldr	r3, [r3, #16]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d10c      	bne.n	80013f0 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013dc:	f023 010f 	bic.w	r1, r3, #15
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	69db      	ldr	r3, [r3, #28]
 80013e4:	1e5a      	subs	r2, r3, #1
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	430a      	orrs	r2, r1
 80013ec:	631a      	str	r2, [r3, #48]	; 0x30
 80013ee:	e007      	b.n	8001400 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f022 020f 	bic.w	r2, r2, #15
 80013fe:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001404:	f023 0303 	bic.w	r3, r3, #3
 8001408:	f043 0201 	orr.w	r2, r3, #1
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	655a      	str	r2, [r3, #84]	; 0x54
 8001410:	e007      	b.n	8001422 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001416:	f043 0210 	orr.w	r2, r3, #16
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001422:	7ffb      	ldrb	r3, [r7, #31]
}
 8001424:	4618      	mov	r0, r3
 8001426:	3720      	adds	r7, #32
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20000000 	.word	0x20000000
 8001430:	053e2d63 	.word	0x053e2d63
 8001434:	50040000 	.word	0x50040000
 8001438:	50040300 	.word	0x50040300
 800143c:	fff0c007 	.word	0xfff0c007

08001440 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff fe75 	bl	800113c <LL_ADC_REG_IsConversionOngoing>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d14f      	bne.n	80014f8 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800145e:	2b01      	cmp	r3, #1
 8001460:	d101      	bne.n	8001466 <HAL_ADC_Start+0x26>
 8001462:	2302      	movs	r3, #2
 8001464:	e04b      	b.n	80014fe <HAL_ADC_Start+0xbe>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2201      	movs	r2, #1
 800146a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f000 fdb4 	bl	8001fdc <ADC_Enable>
 8001474:	4603      	mov	r3, r0
 8001476:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001478:	7bfb      	ldrb	r3, [r7, #15]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d137      	bne.n	80014ee <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001482:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001486:	f023 0301 	bic.w	r3, r3, #1
 800148a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001496:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800149a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800149e:	d106      	bne.n	80014ae <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a4:	f023 0206 	bic.w	r2, r3, #6
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	659a      	str	r2, [r3, #88]	; 0x58
 80014ac:	e002      	b.n	80014b4 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	221c      	movs	r2, #28
 80014ba:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2200      	movs	r2, #0
 80014c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	68db      	ldr	r3, [r3, #12]
 80014ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d007      	beq.n	80014e2 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014d6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014da:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff fe00 	bl	80010ec <LL_ADC_REG_StartConversion>
 80014ec:	e006      	b.n	80014fc <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2200      	movs	r2, #0
 80014f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80014f6:	e001      	b.n	80014fc <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80014f8:	2302      	movs	r3, #2
 80014fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80014fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3710      	adds	r7, #16
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b084      	sub	sp, #16
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001514:	2b01      	cmp	r3, #1
 8001516:	d101      	bne.n	800151c <HAL_ADC_Stop+0x16>
 8001518:	2302      	movs	r3, #2
 800151a:	e023      	b.n	8001564 <HAL_ADC_Stop+0x5e>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2201      	movs	r2, #1
 8001520:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001524:	2103      	movs	r1, #3
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f000 fc9c 	bl	8001e64 <ADC_ConversionStop>
 800152c:	4603      	mov	r3, r0
 800152e:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001530:	7bfb      	ldrb	r3, [r7, #15]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d111      	bne.n	800155a <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f000 fdd6 	bl	80020e8 <ADC_Disable>
 800153c:	4603      	mov	r3, r0
 800153e:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001540:	7bfb      	ldrb	r3, [r7, #15]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d109      	bne.n	800155a <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800154a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800154e:	f023 0301 	bic.w	r3, r3, #1
 8001552:	f043 0201 	orr.w	r2, r3, #1
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001562:	7bfb      	ldrb	r3, [r7, #15]
}
 8001564:	4618      	mov	r0, r3
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	695b      	ldr	r3, [r3, #20]
 800157a:	2b08      	cmp	r3, #8
 800157c:	d102      	bne.n	8001584 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800157e:	2308      	movs	r3, #8
 8001580:	617b      	str	r3, [r7, #20]
 8001582:	e010      	b.n	80015a6 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	2b00      	cmp	r3, #0
 8001590:	d007      	beq.n	80015a2 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001596:	f043 0220 	orr.w	r2, r3, #32
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e06f      	b.n	8001682 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 80015a2:	2304      	movs	r3, #4
 80015a4:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80015a6:	f7ff fbe1 	bl	8000d6c <HAL_GetTick>
 80015aa:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80015ac:	e021      	b.n	80015f2 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015b4:	d01d      	beq.n	80015f2 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80015b6:	f7ff fbd9 	bl	8000d6c <HAL_GetTick>
 80015ba:	4602      	mov	r2, r0
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d302      	bcc.n	80015cc <HAL_ADC_PollForConversion+0x60>
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d112      	bne.n	80015f2 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	4013      	ands	r3, r2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d10b      	bne.n	80015f2 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015de:	f043 0204 	orr.w	r2, r3, #4
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e047      	b.n	8001682 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	4013      	ands	r3, r2
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d0d6      	beq.n	80015ae <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001604:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff fc40 	bl	8000e96 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d01c      	beq.n	8001656 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	7e5b      	ldrb	r3, [r3, #25]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d118      	bne.n	8001656 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0308 	and.w	r3, r3, #8
 800162e:	2b08      	cmp	r3, #8
 8001630:	d111      	bne.n	8001656 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001636:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001642:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d105      	bne.n	8001656 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800164e:	f043 0201 	orr.w	r2, r3, #1
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	2b08      	cmp	r3, #8
 8001662:	d104      	bne.n	800166e <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2208      	movs	r2, #8
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	e008      	b.n	8001680 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d103      	bne.n	8001680 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	220c      	movs	r2, #12
 800167e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3718      	adds	r7, #24
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800168a:	b480      	push	{r7}
 800168c:	b083      	sub	sp, #12
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001698:	4618      	mov	r0, r3
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b0b6      	sub	sp, #216	; 0xd8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016ae:	2300      	movs	r3, #0
 80016b0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d101      	bne.n	80016c6 <HAL_ADC_ConfigChannel+0x22>
 80016c2:	2302      	movs	r3, #2
 80016c4:	e3b9      	b.n	8001e3a <HAL_ADC_ConfigChannel+0x796>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2201      	movs	r2, #1
 80016ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff fd32 	bl	800113c <LL_ADC_REG_IsConversionOngoing>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	f040 839e 	bne.w	8001e1c <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	2b05      	cmp	r3, #5
 80016e6:	d824      	bhi.n	8001732 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	3b02      	subs	r3, #2
 80016ee:	2b03      	cmp	r3, #3
 80016f0:	d81b      	bhi.n	800172a <HAL_ADC_ConfigChannel+0x86>
 80016f2:	a201      	add	r2, pc, #4	; (adr r2, 80016f8 <HAL_ADC_ConfigChannel+0x54>)
 80016f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016f8:	08001709 	.word	0x08001709
 80016fc:	08001711 	.word	0x08001711
 8001700:	08001719 	.word	0x08001719
 8001704:	08001721 	.word	0x08001721
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	220c      	movs	r2, #12
 800170c:	605a      	str	r2, [r3, #4]
          break;
 800170e:	e011      	b.n	8001734 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	2212      	movs	r2, #18
 8001714:	605a      	str	r2, [r3, #4]
          break;
 8001716:	e00d      	b.n	8001734 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	2218      	movs	r2, #24
 800171c:	605a      	str	r2, [r3, #4]
          break;
 800171e:	e009      	b.n	8001734 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001726:	605a      	str	r2, [r3, #4]
          break;
 8001728:	e004      	b.n	8001734 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	2206      	movs	r2, #6
 800172e:	605a      	str	r2, [r3, #4]
          break;
 8001730:	e000      	b.n	8001734 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001732:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6818      	ldr	r0, [r3, #0]
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	6859      	ldr	r1, [r3, #4]
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	461a      	mov	r2, r3
 8001742:	f7ff fbbb 	bl	8000ebc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff fcf6 	bl	800113c <LL_ADC_REG_IsConversionOngoing>
 8001750:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff fd16 	bl	800118a <LL_ADC_INJ_IsConversionOngoing>
 800175e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001762:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001766:	2b00      	cmp	r3, #0
 8001768:	f040 81a6 	bne.w	8001ab8 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800176c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001770:	2b00      	cmp	r3, #0
 8001772:	f040 81a1 	bne.w	8001ab8 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6818      	ldr	r0, [r3, #0]
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	6819      	ldr	r1, [r3, #0]
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	461a      	mov	r2, r3
 8001784:	f7ff fbc6 	bl	8000f14 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	695a      	ldr	r2, [r3, #20]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	08db      	lsrs	r3, r3, #3
 8001794:	f003 0303 	and.w	r3, r3, #3
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	691b      	ldr	r3, [r3, #16]
 80017a6:	2b04      	cmp	r3, #4
 80017a8:	d00a      	beq.n	80017c0 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6818      	ldr	r0, [r3, #0]
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	6919      	ldr	r1, [r3, #16]
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80017ba:	f7ff fb17 	bl	8000dec <LL_ADC_SetOffset>
 80017be:	e17b      	b.n	8001ab8 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2100      	movs	r1, #0
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff fb34 	bl	8000e34 <LL_ADC_GetOffsetChannel>
 80017cc:	4603      	mov	r3, r0
 80017ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d10a      	bne.n	80017ec <HAL_ADC_ConfigChannel+0x148>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2100      	movs	r1, #0
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff fb29 	bl	8000e34 <LL_ADC_GetOffsetChannel>
 80017e2:	4603      	mov	r3, r0
 80017e4:	0e9b      	lsrs	r3, r3, #26
 80017e6:	f003 021f 	and.w	r2, r3, #31
 80017ea:	e01e      	b.n	800182a <HAL_ADC_ConfigChannel+0x186>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2100      	movs	r1, #0
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7ff fb1e 	bl	8000e34 <LL_ADC_GetOffsetChannel>
 80017f8:	4603      	mov	r3, r0
 80017fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001802:	fa93 f3a3 	rbit	r3, r3
 8001806:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800180a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800180e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001812:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d101      	bne.n	800181e <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800181a:	2320      	movs	r3, #32
 800181c:	e004      	b.n	8001828 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800181e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001822:	fab3 f383 	clz	r3, r3
 8001826:	b2db      	uxtb	r3, r3
 8001828:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001832:	2b00      	cmp	r3, #0
 8001834:	d105      	bne.n	8001842 <HAL_ADC_ConfigChannel+0x19e>
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	0e9b      	lsrs	r3, r3, #26
 800183c:	f003 031f 	and.w	r3, r3, #31
 8001840:	e018      	b.n	8001874 <HAL_ADC_ConfigChannel+0x1d0>
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800184a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800184e:	fa93 f3a3 	rbit	r3, r3
 8001852:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001856:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800185a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800185e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001862:	2b00      	cmp	r3, #0
 8001864:	d101      	bne.n	800186a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001866:	2320      	movs	r3, #32
 8001868:	e004      	b.n	8001874 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800186a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800186e:	fab3 f383 	clz	r3, r3
 8001872:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001874:	429a      	cmp	r2, r3
 8001876:	d106      	bne.n	8001886 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2200      	movs	r2, #0
 800187e:	2100      	movs	r1, #0
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff faed 	bl	8000e60 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2101      	movs	r1, #1
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff fad1 	bl	8000e34 <LL_ADC_GetOffsetChannel>
 8001892:	4603      	mov	r3, r0
 8001894:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001898:	2b00      	cmp	r3, #0
 800189a:	d10a      	bne.n	80018b2 <HAL_ADC_ConfigChannel+0x20e>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2101      	movs	r1, #1
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff fac6 	bl	8000e34 <LL_ADC_GetOffsetChannel>
 80018a8:	4603      	mov	r3, r0
 80018aa:	0e9b      	lsrs	r3, r3, #26
 80018ac:	f003 021f 	and.w	r2, r3, #31
 80018b0:	e01e      	b.n	80018f0 <HAL_ADC_ConfigChannel+0x24c>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2101      	movs	r1, #1
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff fabb 	bl	8000e34 <LL_ADC_GetOffsetChannel>
 80018be:	4603      	mov	r3, r0
 80018c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80018c8:	fa93 f3a3 	rbit	r3, r3
 80018cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80018d0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80018d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80018d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d101      	bne.n	80018e4 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80018e0:	2320      	movs	r3, #32
 80018e2:	e004      	b.n	80018ee <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80018e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80018e8:	fab3 f383 	clz	r3, r3
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d105      	bne.n	8001908 <HAL_ADC_ConfigChannel+0x264>
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	0e9b      	lsrs	r3, r3, #26
 8001902:	f003 031f 	and.w	r3, r3, #31
 8001906:	e018      	b.n	800193a <HAL_ADC_ConfigChannel+0x296>
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001910:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001914:	fa93 f3a3 	rbit	r3, r3
 8001918:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800191c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001920:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001924:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001928:	2b00      	cmp	r3, #0
 800192a:	d101      	bne.n	8001930 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 800192c:	2320      	movs	r3, #32
 800192e:	e004      	b.n	800193a <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001930:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001934:	fab3 f383 	clz	r3, r3
 8001938:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800193a:	429a      	cmp	r2, r3
 800193c:	d106      	bne.n	800194c <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2200      	movs	r2, #0
 8001944:	2101      	movs	r1, #1
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff fa8a 	bl	8000e60 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2102      	movs	r1, #2
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff fa6e 	bl	8000e34 <LL_ADC_GetOffsetChannel>
 8001958:	4603      	mov	r3, r0
 800195a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800195e:	2b00      	cmp	r3, #0
 8001960:	d10a      	bne.n	8001978 <HAL_ADC_ConfigChannel+0x2d4>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2102      	movs	r1, #2
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff fa63 	bl	8000e34 <LL_ADC_GetOffsetChannel>
 800196e:	4603      	mov	r3, r0
 8001970:	0e9b      	lsrs	r3, r3, #26
 8001972:	f003 021f 	and.w	r2, r3, #31
 8001976:	e01e      	b.n	80019b6 <HAL_ADC_ConfigChannel+0x312>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2102      	movs	r1, #2
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff fa58 	bl	8000e34 <LL_ADC_GetOffsetChannel>
 8001984:	4603      	mov	r3, r0
 8001986:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800198e:	fa93 f3a3 	rbit	r3, r3
 8001992:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001996:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800199a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800199e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d101      	bne.n	80019aa <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80019a6:	2320      	movs	r3, #32
 80019a8:	e004      	b.n	80019b4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80019aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80019ae:	fab3 f383 	clz	r3, r3
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d105      	bne.n	80019ce <HAL_ADC_ConfigChannel+0x32a>
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	0e9b      	lsrs	r3, r3, #26
 80019c8:	f003 031f 	and.w	r3, r3, #31
 80019cc:	e016      	b.n	80019fc <HAL_ADC_ConfigChannel+0x358>
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80019da:	fa93 f3a3 	rbit	r3, r3
 80019de:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80019e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80019e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80019e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d101      	bne.n	80019f2 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80019ee:	2320      	movs	r3, #32
 80019f0:	e004      	b.n	80019fc <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80019f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80019f6:	fab3 f383 	clz	r3, r3
 80019fa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d106      	bne.n	8001a0e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2200      	movs	r2, #0
 8001a06:	2102      	movs	r1, #2
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff fa29 	bl	8000e60 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2103      	movs	r1, #3
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff fa0d 	bl	8000e34 <LL_ADC_GetOffsetChannel>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d10a      	bne.n	8001a3a <HAL_ADC_ConfigChannel+0x396>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2103      	movs	r1, #3
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff fa02 	bl	8000e34 <LL_ADC_GetOffsetChannel>
 8001a30:	4603      	mov	r3, r0
 8001a32:	0e9b      	lsrs	r3, r3, #26
 8001a34:	f003 021f 	and.w	r2, r3, #31
 8001a38:	e017      	b.n	8001a6a <HAL_ADC_ConfigChannel+0x3c6>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2103      	movs	r1, #3
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff f9f7 	bl	8000e34 <LL_ADC_GetOffsetChannel>
 8001a46:	4603      	mov	r3, r0
 8001a48:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a4c:	fa93 f3a3 	rbit	r3, r3
 8001a50:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001a52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a54:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001a56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d101      	bne.n	8001a60 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001a5c:	2320      	movs	r3, #32
 8001a5e:	e003      	b.n	8001a68 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001a60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a62:	fab3 f383 	clz	r3, r3
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d105      	bne.n	8001a82 <HAL_ADC_ConfigChannel+0x3de>
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	0e9b      	lsrs	r3, r3, #26
 8001a7c:	f003 031f 	and.w	r3, r3, #31
 8001a80:	e011      	b.n	8001aa6 <HAL_ADC_ConfigChannel+0x402>
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a8a:	fa93 f3a3 	rbit	r3, r3
 8001a8e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001a90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001a92:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001a94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d101      	bne.n	8001a9e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001a9a:	2320      	movs	r3, #32
 8001a9c:	e003      	b.n	8001aa6 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001a9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001aa0:	fab3 f383 	clz	r3, r3
 8001aa4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d106      	bne.n	8001ab8 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2103      	movs	r1, #3
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff f9d4 	bl	8000e60 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff faef 	bl	80010a0 <LL_ADC_IsEnabled>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	f040 813f 	bne.w	8001d48 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6818      	ldr	r0, [r3, #0]
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	6819      	ldr	r1, [r3, #0]
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	f7ff fa48 	bl	8000f6c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	4a8e      	ldr	r2, [pc, #568]	; (8001d1c <HAL_ADC_ConfigChannel+0x678>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	f040 8130 	bne.w	8001d48 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d10b      	bne.n	8001b10 <HAL_ADC_ConfigChannel+0x46c>
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	0e9b      	lsrs	r3, r3, #26
 8001afe:	3301      	adds	r3, #1
 8001b00:	f003 031f 	and.w	r3, r3, #31
 8001b04:	2b09      	cmp	r3, #9
 8001b06:	bf94      	ite	ls
 8001b08:	2301      	movls	r3, #1
 8001b0a:	2300      	movhi	r3, #0
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	e019      	b.n	8001b44 <HAL_ADC_ConfigChannel+0x4a0>
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b18:	fa93 f3a3 	rbit	r3, r3
 8001b1c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001b1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b20:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001b22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d101      	bne.n	8001b2c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001b28:	2320      	movs	r3, #32
 8001b2a:	e003      	b.n	8001b34 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001b2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b2e:	fab3 f383 	clz	r3, r3
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	3301      	adds	r3, #1
 8001b36:	f003 031f 	and.w	r3, r3, #31
 8001b3a:	2b09      	cmp	r3, #9
 8001b3c:	bf94      	ite	ls
 8001b3e:	2301      	movls	r3, #1
 8001b40:	2300      	movhi	r3, #0
 8001b42:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d079      	beq.n	8001c3c <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d107      	bne.n	8001b64 <HAL_ADC_ConfigChannel+0x4c0>
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	0e9b      	lsrs	r3, r3, #26
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	069b      	lsls	r3, r3, #26
 8001b5e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b62:	e015      	b.n	8001b90 <HAL_ADC_ConfigChannel+0x4ec>
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b6c:	fa93 f3a3 	rbit	r3, r3
 8001b70:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001b72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b74:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001b76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d101      	bne.n	8001b80 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001b7c:	2320      	movs	r3, #32
 8001b7e:	e003      	b.n	8001b88 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001b80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b82:	fab3 f383 	clz	r3, r3
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	3301      	adds	r3, #1
 8001b8a:	069b      	lsls	r3, r3, #26
 8001b8c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d109      	bne.n	8001bb0 <HAL_ADC_ConfigChannel+0x50c>
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	0e9b      	lsrs	r3, r3, #26
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	f003 031f 	and.w	r3, r3, #31
 8001ba8:	2101      	movs	r1, #1
 8001baa:	fa01 f303 	lsl.w	r3, r1, r3
 8001bae:	e017      	b.n	8001be0 <HAL_ADC_ConfigChannel+0x53c>
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bb8:	fa93 f3a3 	rbit	r3, r3
 8001bbc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001bbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bc0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001bc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d101      	bne.n	8001bcc <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001bc8:	2320      	movs	r3, #32
 8001bca:	e003      	b.n	8001bd4 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001bcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bce:	fab3 f383 	clz	r3, r3
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	f003 031f 	and.w	r3, r3, #31
 8001bda:	2101      	movs	r1, #1
 8001bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8001be0:	ea42 0103 	orr.w	r1, r2, r3
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d10a      	bne.n	8001c06 <HAL_ADC_ConfigChannel+0x562>
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	0e9b      	lsrs	r3, r3, #26
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	f003 021f 	and.w	r2, r3, #31
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	4413      	add	r3, r2
 8001c02:	051b      	lsls	r3, r3, #20
 8001c04:	e018      	b.n	8001c38 <HAL_ADC_ConfigChannel+0x594>
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c0e:	fa93 f3a3 	rbit	r3, r3
 8001c12:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c16:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001c18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001c1e:	2320      	movs	r3, #32
 8001c20:	e003      	b.n	8001c2a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001c22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c24:	fab3 f383 	clz	r3, r3
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	f003 021f 	and.w	r2, r3, #31
 8001c30:	4613      	mov	r3, r2
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	4413      	add	r3, r2
 8001c36:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c38:	430b      	orrs	r3, r1
 8001c3a:	e080      	b.n	8001d3e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d107      	bne.n	8001c58 <HAL_ADC_ConfigChannel+0x5b4>
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	0e9b      	lsrs	r3, r3, #26
 8001c4e:	3301      	adds	r3, #1
 8001c50:	069b      	lsls	r3, r3, #26
 8001c52:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c56:	e015      	b.n	8001c84 <HAL_ADC_ConfigChannel+0x5e0>
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c60:	fa93 f3a3 	rbit	r3, r3
 8001c64:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c68:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d101      	bne.n	8001c74 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001c70:	2320      	movs	r3, #32
 8001c72:	e003      	b.n	8001c7c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c76:	fab3 f383 	clz	r3, r3
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	069b      	lsls	r3, r3, #26
 8001c80:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d109      	bne.n	8001ca4 <HAL_ADC_ConfigChannel+0x600>
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	0e9b      	lsrs	r3, r3, #26
 8001c96:	3301      	adds	r3, #1
 8001c98:	f003 031f 	and.w	r3, r3, #31
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca2:	e017      	b.n	8001cd4 <HAL_ADC_ConfigChannel+0x630>
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001caa:	6a3b      	ldr	r3, [r7, #32]
 8001cac:	fa93 f3a3 	rbit	r3, r3
 8001cb0:	61fb      	str	r3, [r7, #28]
  return result;
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d101      	bne.n	8001cc0 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001cbc:	2320      	movs	r3, #32
 8001cbe:	e003      	b.n	8001cc8 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc2:	fab3 f383 	clz	r3, r3
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	3301      	adds	r3, #1
 8001cca:	f003 031f 	and.w	r3, r3, #31
 8001cce:	2101      	movs	r1, #1
 8001cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd4:	ea42 0103 	orr.w	r1, r2, r3
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d10d      	bne.n	8001d00 <HAL_ADC_ConfigChannel+0x65c>
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	0e9b      	lsrs	r3, r3, #26
 8001cea:	3301      	adds	r3, #1
 8001cec:	f003 021f 	and.w	r2, r3, #31
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	4413      	add	r3, r2
 8001cf6:	3b1e      	subs	r3, #30
 8001cf8:	051b      	lsls	r3, r3, #20
 8001cfa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cfe:	e01d      	b.n	8001d3c <HAL_ADC_ConfigChannel+0x698>
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	fa93 f3a3 	rbit	r3, r3
 8001d0c:	613b      	str	r3, [r7, #16]
  return result;
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d103      	bne.n	8001d20 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001d18:	2320      	movs	r3, #32
 8001d1a:	e005      	b.n	8001d28 <HAL_ADC_ConfigChannel+0x684>
 8001d1c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	fab3 f383 	clz	r3, r3
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	3301      	adds	r3, #1
 8001d2a:	f003 021f 	and.w	r2, r3, #31
 8001d2e:	4613      	mov	r3, r2
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	4413      	add	r3, r2
 8001d34:	3b1e      	subs	r3, #30
 8001d36:	051b      	lsls	r3, r3, #20
 8001d38:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d3c:	430b      	orrs	r3, r1
 8001d3e:	683a      	ldr	r2, [r7, #0]
 8001d40:	6892      	ldr	r2, [r2, #8]
 8001d42:	4619      	mov	r1, r3
 8001d44:	f7ff f8e6 	bl	8000f14 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	4b3d      	ldr	r3, [pc, #244]	; (8001e44 <HAL_ADC_ConfigChannel+0x7a0>)
 8001d4e:	4013      	ands	r3, r2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d06c      	beq.n	8001e2e <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d54:	483c      	ldr	r0, [pc, #240]	; (8001e48 <HAL_ADC_ConfigChannel+0x7a4>)
 8001d56:	f7ff f83b 	bl	8000dd0 <LL_ADC_GetCommonPathInternalCh>
 8001d5a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a3a      	ldr	r2, [pc, #232]	; (8001e4c <HAL_ADC_ConfigChannel+0x7a8>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d127      	bne.n	8001db8 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001d68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d121      	bne.n	8001db8 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a35      	ldr	r2, [pc, #212]	; (8001e50 <HAL_ADC_ConfigChannel+0x7ac>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d157      	bne.n	8001e2e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d82:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d86:	4619      	mov	r1, r3
 8001d88:	482f      	ldr	r0, [pc, #188]	; (8001e48 <HAL_ADC_ConfigChannel+0x7a4>)
 8001d8a:	f7ff f80e 	bl	8000daa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d8e:	4b31      	ldr	r3, [pc, #196]	; (8001e54 <HAL_ADC_ConfigChannel+0x7b0>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	099b      	lsrs	r3, r3, #6
 8001d94:	4a30      	ldr	r2, [pc, #192]	; (8001e58 <HAL_ADC_ConfigChannel+0x7b4>)
 8001d96:	fba2 2303 	umull	r2, r3, r2, r3
 8001d9a:	099b      	lsrs	r3, r3, #6
 8001d9c:	1c5a      	adds	r2, r3, #1
 8001d9e:	4613      	mov	r3, r2
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	4413      	add	r3, r2
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001da8:	e002      	b.n	8001db0 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	3b01      	subs	r3, #1
 8001dae:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1f9      	bne.n	8001daa <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001db6:	e03a      	b.n	8001e2e <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a27      	ldr	r2, [pc, #156]	; (8001e5c <HAL_ADC_ConfigChannel+0x7b8>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d113      	bne.n	8001dea <HAL_ADC_ConfigChannel+0x746>
 8001dc2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001dc6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d10d      	bne.n	8001dea <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a1f      	ldr	r2, [pc, #124]	; (8001e50 <HAL_ADC_ConfigChannel+0x7ac>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d12a      	bne.n	8001e2e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001dd8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ddc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001de0:	4619      	mov	r1, r3
 8001de2:	4819      	ldr	r0, [pc, #100]	; (8001e48 <HAL_ADC_ConfigChannel+0x7a4>)
 8001de4:	f7fe ffe1 	bl	8000daa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001de8:	e021      	b.n	8001e2e <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a1c      	ldr	r2, [pc, #112]	; (8001e60 <HAL_ADC_ConfigChannel+0x7bc>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d11c      	bne.n	8001e2e <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001df4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001df8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d116      	bne.n	8001e2e <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a12      	ldr	r2, [pc, #72]	; (8001e50 <HAL_ADC_ConfigChannel+0x7ac>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d111      	bne.n	8001e2e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e0a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e0e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e12:	4619      	mov	r1, r3
 8001e14:	480c      	ldr	r0, [pc, #48]	; (8001e48 <HAL_ADC_ConfigChannel+0x7a4>)
 8001e16:	f7fe ffc8 	bl	8000daa <LL_ADC_SetCommonPathInternalCh>
 8001e1a:	e008      	b.n	8001e2e <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e20:	f043 0220 	orr.w	r2, r3, #32
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001e36:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	37d8      	adds	r7, #216	; 0xd8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	80080000 	.word	0x80080000
 8001e48:	50040300 	.word	0x50040300
 8001e4c:	c7520000 	.word	0xc7520000
 8001e50:	50040000 	.word	0x50040000
 8001e54:	20000000 	.word	0x20000000
 8001e58:	053e2d63 	.word	0x053e2d63
 8001e5c:	cb840000 	.word	0xcb840000
 8001e60:	80000001 	.word	0x80000001

08001e64 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b088      	sub	sp, #32
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7ff f95e 	bl	800113c <LL_ADC_REG_IsConversionOngoing>
 8001e80:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff f97f 	bl	800118a <LL_ADC_INJ_IsConversionOngoing>
 8001e8c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d103      	bne.n	8001e9c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f000 8098 	beq.w	8001fcc <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d02a      	beq.n	8001f00 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	7e5b      	ldrb	r3, [r3, #25]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d126      	bne.n	8001f00 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	7e1b      	ldrb	r3, [r3, #24]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d122      	bne.n	8001f00 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001ebe:	e014      	b.n	8001eea <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	4a45      	ldr	r2, [pc, #276]	; (8001fd8 <ADC_ConversionStop+0x174>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d90d      	bls.n	8001ee4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ecc:	f043 0210 	orr.w	r2, r3, #16
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed8:	f043 0201 	orr.w	r2, r3, #1
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e074      	b.n	8001fce <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ef4:	2b40      	cmp	r3, #64	; 0x40
 8001ef6:	d1e3      	bne.n	8001ec0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2240      	movs	r2, #64	; 0x40
 8001efe:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d014      	beq.n	8001f30 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff f916 	bl	800113c <LL_ADC_REG_IsConversionOngoing>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d00c      	beq.n	8001f30 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7ff f8d3 	bl	80010c6 <LL_ADC_IsDisableOngoing>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d104      	bne.n	8001f30 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7ff f8f2 	bl	8001114 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d014      	beq.n	8001f60 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7ff f925 	bl	800118a <LL_ADC_INJ_IsConversionOngoing>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d00c      	beq.n	8001f60 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7ff f8bb 	bl	80010c6 <LL_ADC_IsDisableOngoing>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d104      	bne.n	8001f60 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7ff f901 	bl	8001162 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d005      	beq.n	8001f72 <ADC_ConversionStop+0x10e>
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	2b03      	cmp	r3, #3
 8001f6a:	d105      	bne.n	8001f78 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8001f6c:	230c      	movs	r3, #12
 8001f6e:	617b      	str	r3, [r7, #20]
        break;
 8001f70:	e005      	b.n	8001f7e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8001f72:	2308      	movs	r3, #8
 8001f74:	617b      	str	r3, [r7, #20]
        break;
 8001f76:	e002      	b.n	8001f7e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8001f78:	2304      	movs	r3, #4
 8001f7a:	617b      	str	r3, [r7, #20]
        break;
 8001f7c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8001f7e:	f7fe fef5 	bl	8000d6c <HAL_GetTick>
 8001f82:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001f84:	e01b      	b.n	8001fbe <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001f86:	f7fe fef1 	bl	8000d6c <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	2b05      	cmp	r3, #5
 8001f92:	d914      	bls.n	8001fbe <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	689a      	ldr	r2, [r3, #8]
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d00d      	beq.n	8001fbe <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa6:	f043 0210 	orr.w	r2, r3, #16
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb2:	f043 0201 	orr.w	r2, r3, #1
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e007      	b.n	8001fce <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	689a      	ldr	r2, [r3, #8]
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d1dc      	bne.n	8001f86 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3720      	adds	r7, #32
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	a33fffff 	.word	0xa33fffff

08001fdc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff f857 	bl	80010a0 <LL_ADC_IsEnabled>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d169      	bne.n	80020cc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	689a      	ldr	r2, [r3, #8]
 8001ffe:	4b36      	ldr	r3, [pc, #216]	; (80020d8 <ADC_Enable+0xfc>)
 8002000:	4013      	ands	r3, r2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d00d      	beq.n	8002022 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800200a:	f043 0210 	orr.w	r2, r3, #16
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002016:	f043 0201 	orr.w	r2, r3, #1
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e055      	b.n	80020ce <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4618      	mov	r0, r3
 8002028:	f7ff f812 	bl	8001050 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800202c:	482b      	ldr	r0, [pc, #172]	; (80020dc <ADC_Enable+0x100>)
 800202e:	f7fe fecf 	bl	8000dd0 <LL_ADC_GetCommonPathInternalCh>
 8002032:	4603      	mov	r3, r0
 8002034:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d013      	beq.n	8002064 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800203c:	4b28      	ldr	r3, [pc, #160]	; (80020e0 <ADC_Enable+0x104>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	099b      	lsrs	r3, r3, #6
 8002042:	4a28      	ldr	r2, [pc, #160]	; (80020e4 <ADC_Enable+0x108>)
 8002044:	fba2 2303 	umull	r2, r3, r2, r3
 8002048:	099b      	lsrs	r3, r3, #6
 800204a:	1c5a      	adds	r2, r3, #1
 800204c:	4613      	mov	r3, r2
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	4413      	add	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002056:	e002      	b.n	800205e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	3b01      	subs	r3, #1
 800205c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d1f9      	bne.n	8002058 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002064:	f7fe fe82 	bl	8000d6c <HAL_GetTick>
 8002068:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800206a:	e028      	b.n	80020be <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff f815 	bl	80010a0 <LL_ADC_IsEnabled>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d104      	bne.n	8002086 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4618      	mov	r0, r3
 8002082:	f7fe ffe5 	bl	8001050 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002086:	f7fe fe71 	bl	8000d6c <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d914      	bls.n	80020be <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d00d      	beq.n	80020be <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a6:	f043 0210 	orr.w	r2, r3, #16
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b2:	f043 0201 	orr.w	r2, r3, #1
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e007      	b.n	80020ce <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d1cf      	bne.n	800206c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3710      	adds	r7, #16
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	8000003f 	.word	0x8000003f
 80020dc:	50040300 	.word	0x50040300
 80020e0:	20000000 	.word	0x20000000
 80020e4:	053e2d63 	.word	0x053e2d63

080020e8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7fe ffe6 	bl	80010c6 <LL_ADC_IsDisableOngoing>
 80020fa:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4618      	mov	r0, r3
 8002102:	f7fe ffcd 	bl	80010a0 <LL_ADC_IsEnabled>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d047      	beq.n	800219c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d144      	bne.n	800219c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f003 030d 	and.w	r3, r3, #13
 800211c:	2b01      	cmp	r3, #1
 800211e:	d10c      	bne.n	800213a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4618      	mov	r0, r3
 8002126:	f7fe ffa7 	bl	8001078 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2203      	movs	r2, #3
 8002130:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002132:	f7fe fe1b 	bl	8000d6c <HAL_GetTick>
 8002136:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002138:	e029      	b.n	800218e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800213e:	f043 0210 	orr.w	r2, r3, #16
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800214a:	f043 0201 	orr.w	r2, r3, #1
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e023      	b.n	800219e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002156:	f7fe fe09 	bl	8000d6c <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	2b02      	cmp	r3, #2
 8002162:	d914      	bls.n	800218e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	2b00      	cmp	r3, #0
 8002170:	d00d      	beq.n	800218e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002176:	f043 0210 	orr.w	r2, r3, #16
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002182:	f043 0201 	orr.w	r2, r3, #1
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e007      	b.n	800219e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f003 0301 	and.w	r3, r3, #1
 8002198:	2b00      	cmp	r3, #0
 800219a:	d1dc      	bne.n	8002156 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <LL_ADC_StartCalibration>:
{
 80021a6:	b480      	push	{r7}
 80021a8:	b083      	sub	sp, #12
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
 80021ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80021b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80021c2:	4313      	orrs	r3, r2
 80021c4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	609a      	str	r2, [r3, #8]
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <LL_ADC_IsCalibrationOnGoing>:
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80021e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80021ec:	d101      	bne.n	80021f2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80021ee:	2301      	movs	r3, #1
 80021f0:	e000      	b.n	80021f4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800220a:	2300      	movs	r3, #0
 800220c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002214:	2b01      	cmp	r3, #1
 8002216:	d101      	bne.n	800221c <HAL_ADCEx_Calibration_Start+0x1c>
 8002218:	2302      	movs	r3, #2
 800221a:	e04d      	b.n	80022b8 <HAL_ADCEx_Calibration_Start+0xb8>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f7ff ff5f 	bl	80020e8 <ADC_Disable>
 800222a:	4603      	mov	r3, r0
 800222c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800222e:	7bfb      	ldrb	r3, [r7, #15]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d136      	bne.n	80022a2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002238:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800223c:	f023 0302 	bic.w	r3, r3, #2
 8002240:	f043 0202 	orr.w	r2, r3, #2
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6839      	ldr	r1, [r7, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	f7ff ffa9 	bl	80021a6 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002254:	e014      	b.n	8002280 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	3301      	adds	r3, #1
 800225a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8002262:	d30d      	bcc.n	8002280 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002268:	f023 0312 	bic.w	r3, r3, #18
 800226c:	f043 0210 	orr.w	r2, r3, #16
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e01b      	b.n	80022b8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff ffa7 	bl	80021d8 <LL_ADC_IsCalibrationOnGoing>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d1e2      	bne.n	8002256 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002294:	f023 0303 	bic.w	r3, r3, #3
 8002298:	f043 0201 	orr.w	r2, r3, #1
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	655a      	str	r2, [r3, #84]	; 0x54
 80022a0:	e005      	b.n	80022ae <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022a6:	f043 0210 	orr.w	r2, r3, #16
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80022b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3710      	adds	r7, #16
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f003 0307 	and.w	r3, r3, #7
 80022ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022d0:	4b0c      	ldr	r3, [pc, #48]	; (8002304 <__NVIC_SetPriorityGrouping+0x44>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022d6:	68ba      	ldr	r2, [r7, #8]
 80022d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022dc:	4013      	ands	r3, r2
 80022de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022f2:	4a04      	ldr	r2, [pc, #16]	; (8002304 <__NVIC_SetPriorityGrouping+0x44>)
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	60d3      	str	r3, [r2, #12]
}
 80022f8:	bf00      	nop
 80022fa:	3714      	adds	r7, #20
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr
 8002304:	e000ed00 	.word	0xe000ed00

08002308 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800230c:	4b04      	ldr	r3, [pc, #16]	; (8002320 <__NVIC_GetPriorityGrouping+0x18>)
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	0a1b      	lsrs	r3, r3, #8
 8002312:	f003 0307 	and.w	r3, r3, #7
}
 8002316:	4618      	mov	r0, r3
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr
 8002320:	e000ed00 	.word	0xe000ed00

08002324 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	6039      	str	r1, [r7, #0]
 800232e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002334:	2b00      	cmp	r3, #0
 8002336:	db0a      	blt.n	800234e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	b2da      	uxtb	r2, r3
 800233c:	490c      	ldr	r1, [pc, #48]	; (8002370 <__NVIC_SetPriority+0x4c>)
 800233e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002342:	0112      	lsls	r2, r2, #4
 8002344:	b2d2      	uxtb	r2, r2
 8002346:	440b      	add	r3, r1
 8002348:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800234c:	e00a      	b.n	8002364 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	b2da      	uxtb	r2, r3
 8002352:	4908      	ldr	r1, [pc, #32]	; (8002374 <__NVIC_SetPriority+0x50>)
 8002354:	79fb      	ldrb	r3, [r7, #7]
 8002356:	f003 030f 	and.w	r3, r3, #15
 800235a:	3b04      	subs	r3, #4
 800235c:	0112      	lsls	r2, r2, #4
 800235e:	b2d2      	uxtb	r2, r2
 8002360:	440b      	add	r3, r1
 8002362:	761a      	strb	r2, [r3, #24]
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr
 8002370:	e000e100 	.word	0xe000e100
 8002374:	e000ed00 	.word	0xe000ed00

08002378 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002378:	b480      	push	{r7}
 800237a:	b089      	sub	sp, #36	; 0x24
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f003 0307 	and.w	r3, r3, #7
 800238a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	f1c3 0307 	rsb	r3, r3, #7
 8002392:	2b04      	cmp	r3, #4
 8002394:	bf28      	it	cs
 8002396:	2304      	movcs	r3, #4
 8002398:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	3304      	adds	r3, #4
 800239e:	2b06      	cmp	r3, #6
 80023a0:	d902      	bls.n	80023a8 <NVIC_EncodePriority+0x30>
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	3b03      	subs	r3, #3
 80023a6:	e000      	b.n	80023aa <NVIC_EncodePriority+0x32>
 80023a8:	2300      	movs	r3, #0
 80023aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023ac:	f04f 32ff 	mov.w	r2, #4294967295
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	43da      	mvns	r2, r3
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	401a      	ands	r2, r3
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023c0:	f04f 31ff 	mov.w	r1, #4294967295
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ca:	43d9      	mvns	r1, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d0:	4313      	orrs	r3, r2
         );
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3724      	adds	r7, #36	; 0x24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
	...

080023e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3b01      	subs	r3, #1
 80023ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023f0:	d301      	bcc.n	80023f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023f2:	2301      	movs	r3, #1
 80023f4:	e00f      	b.n	8002416 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023f6:	4a0a      	ldr	r2, [pc, #40]	; (8002420 <SysTick_Config+0x40>)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3b01      	subs	r3, #1
 80023fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023fe:	210f      	movs	r1, #15
 8002400:	f04f 30ff 	mov.w	r0, #4294967295
 8002404:	f7ff ff8e 	bl	8002324 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002408:	4b05      	ldr	r3, [pc, #20]	; (8002420 <SysTick_Config+0x40>)
 800240a:	2200      	movs	r2, #0
 800240c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800240e:	4b04      	ldr	r3, [pc, #16]	; (8002420 <SysTick_Config+0x40>)
 8002410:	2207      	movs	r2, #7
 8002412:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	e000e010 	.word	0xe000e010

08002424 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f7ff ff47 	bl	80022c0 <__NVIC_SetPriorityGrouping>
}
 8002432:	bf00      	nop
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b086      	sub	sp, #24
 800243e:	af00      	add	r7, sp, #0
 8002440:	4603      	mov	r3, r0
 8002442:	60b9      	str	r1, [r7, #8]
 8002444:	607a      	str	r2, [r7, #4]
 8002446:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002448:	2300      	movs	r3, #0
 800244a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800244c:	f7ff ff5c 	bl	8002308 <__NVIC_GetPriorityGrouping>
 8002450:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	68b9      	ldr	r1, [r7, #8]
 8002456:	6978      	ldr	r0, [r7, #20]
 8002458:	f7ff ff8e 	bl	8002378 <NVIC_EncodePriority>
 800245c:	4602      	mov	r2, r0
 800245e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002462:	4611      	mov	r1, r2
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff ff5d 	bl	8002324 <__NVIC_SetPriority>
}
 800246a:	bf00      	nop
 800246c:	3718      	adds	r7, #24
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b082      	sub	sp, #8
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f7ff ffb0 	bl	80023e0 <SysTick_Config>
 8002480:	4603      	mov	r3, r0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
	...

0800248c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002490:	4b04      	ldr	r3, [pc, #16]	; (80024a4 <HAL_PWREx_GetVoltageRange+0x18>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002498:	4618      	mov	r0, r3
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	40007000 	.word	0x40007000

080024a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024b6:	d130      	bne.n	800251a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80024b8:	4b23      	ldr	r3, [pc, #140]	; (8002548 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80024c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024c4:	d038      	beq.n	8002538 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80024c6:	4b20      	ldr	r3, [pc, #128]	; (8002548 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80024ce:	4a1e      	ldr	r2, [pc, #120]	; (8002548 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024d4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80024d6:	4b1d      	ldr	r3, [pc, #116]	; (800254c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2232      	movs	r2, #50	; 0x32
 80024dc:	fb02 f303 	mul.w	r3, r2, r3
 80024e0:	4a1b      	ldr	r2, [pc, #108]	; (8002550 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80024e2:	fba2 2303 	umull	r2, r3, r2, r3
 80024e6:	0c9b      	lsrs	r3, r3, #18
 80024e8:	3301      	adds	r3, #1
 80024ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024ec:	e002      	b.n	80024f4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	3b01      	subs	r3, #1
 80024f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024f4:	4b14      	ldr	r3, [pc, #80]	; (8002548 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024f6:	695b      	ldr	r3, [r3, #20]
 80024f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002500:	d102      	bne.n	8002508 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d1f2      	bne.n	80024ee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002508:	4b0f      	ldr	r3, [pc, #60]	; (8002548 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800250a:	695b      	ldr	r3, [r3, #20]
 800250c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002510:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002514:	d110      	bne.n	8002538 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e00f      	b.n	800253a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800251a:	4b0b      	ldr	r3, [pc, #44]	; (8002548 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002522:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002526:	d007      	beq.n	8002538 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002528:	4b07      	ldr	r3, [pc, #28]	; (8002548 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002530:	4a05      	ldr	r2, [pc, #20]	; (8002548 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002532:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002536:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3714      	adds	r7, #20
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	40007000 	.word	0x40007000
 800254c:	20000000 	.word	0x20000000
 8002550:	431bde83 	.word	0x431bde83

08002554 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b088      	sub	sp, #32
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d102      	bne.n	8002568 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	f000 bc02 	b.w	8002d6c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002568:	4b96      	ldr	r3, [pc, #600]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f003 030c 	and.w	r3, r3, #12
 8002570:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002572:	4b94      	ldr	r3, [pc, #592]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	f003 0303 	and.w	r3, r3, #3
 800257a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0310 	and.w	r3, r3, #16
 8002584:	2b00      	cmp	r3, #0
 8002586:	f000 80e4 	beq.w	8002752 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d007      	beq.n	80025a0 <HAL_RCC_OscConfig+0x4c>
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	2b0c      	cmp	r3, #12
 8002594:	f040 808b 	bne.w	80026ae <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	2b01      	cmp	r3, #1
 800259c:	f040 8087 	bne.w	80026ae <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025a0:	4b88      	ldr	r3, [pc, #544]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d005      	beq.n	80025b8 <HAL_RCC_OscConfig+0x64>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d101      	bne.n	80025b8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e3d9      	b.n	8002d6c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a1a      	ldr	r2, [r3, #32]
 80025bc:	4b81      	ldr	r3, [pc, #516]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0308 	and.w	r3, r3, #8
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d004      	beq.n	80025d2 <HAL_RCC_OscConfig+0x7e>
 80025c8:	4b7e      	ldr	r3, [pc, #504]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025d0:	e005      	b.n	80025de <HAL_RCC_OscConfig+0x8a>
 80025d2:	4b7c      	ldr	r3, [pc, #496]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 80025d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025d8:	091b      	lsrs	r3, r3, #4
 80025da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025de:	4293      	cmp	r3, r2
 80025e0:	d223      	bcs.n	800262a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a1b      	ldr	r3, [r3, #32]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f000 fd54 	bl	8003094 <RCC_SetFlashLatencyFromMSIRange>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e3ba      	b.n	8002d6c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025f6:	4b73      	ldr	r3, [pc, #460]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a72      	ldr	r2, [pc, #456]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 80025fc:	f043 0308 	orr.w	r3, r3, #8
 8002600:	6013      	str	r3, [r2, #0]
 8002602:	4b70      	ldr	r3, [pc, #448]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a1b      	ldr	r3, [r3, #32]
 800260e:	496d      	ldr	r1, [pc, #436]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 8002610:	4313      	orrs	r3, r2
 8002612:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002614:	4b6b      	ldr	r3, [pc, #428]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	69db      	ldr	r3, [r3, #28]
 8002620:	021b      	lsls	r3, r3, #8
 8002622:	4968      	ldr	r1, [pc, #416]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 8002624:	4313      	orrs	r3, r2
 8002626:	604b      	str	r3, [r1, #4]
 8002628:	e025      	b.n	8002676 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800262a:	4b66      	ldr	r3, [pc, #408]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a65      	ldr	r2, [pc, #404]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 8002630:	f043 0308 	orr.w	r3, r3, #8
 8002634:	6013      	str	r3, [r2, #0]
 8002636:	4b63      	ldr	r3, [pc, #396]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a1b      	ldr	r3, [r3, #32]
 8002642:	4960      	ldr	r1, [pc, #384]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 8002644:	4313      	orrs	r3, r2
 8002646:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002648:	4b5e      	ldr	r3, [pc, #376]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	69db      	ldr	r3, [r3, #28]
 8002654:	021b      	lsls	r3, r3, #8
 8002656:	495b      	ldr	r1, [pc, #364]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 8002658:	4313      	orrs	r3, r2
 800265a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d109      	bne.n	8002676 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	4618      	mov	r0, r3
 8002668:	f000 fd14 	bl	8003094 <RCC_SetFlashLatencyFromMSIRange>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e37a      	b.n	8002d6c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002676:	f000 fc81 	bl	8002f7c <HAL_RCC_GetSysClockFreq>
 800267a:	4602      	mov	r2, r0
 800267c:	4b51      	ldr	r3, [pc, #324]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	091b      	lsrs	r3, r3, #4
 8002682:	f003 030f 	and.w	r3, r3, #15
 8002686:	4950      	ldr	r1, [pc, #320]	; (80027c8 <HAL_RCC_OscConfig+0x274>)
 8002688:	5ccb      	ldrb	r3, [r1, r3]
 800268a:	f003 031f 	and.w	r3, r3, #31
 800268e:	fa22 f303 	lsr.w	r3, r2, r3
 8002692:	4a4e      	ldr	r2, [pc, #312]	; (80027cc <HAL_RCC_OscConfig+0x278>)
 8002694:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002696:	4b4e      	ldr	r3, [pc, #312]	; (80027d0 <HAL_RCC_OscConfig+0x27c>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f7fe fb16 	bl	8000ccc <HAL_InitTick>
 80026a0:	4603      	mov	r3, r0
 80026a2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80026a4:	7bfb      	ldrb	r3, [r7, #15]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d052      	beq.n	8002750 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80026aa:	7bfb      	ldrb	r3, [r7, #15]
 80026ac:	e35e      	b.n	8002d6c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	699b      	ldr	r3, [r3, #24]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d032      	beq.n	800271c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80026b6:	4b43      	ldr	r3, [pc, #268]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a42      	ldr	r2, [pc, #264]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 80026bc:	f043 0301 	orr.w	r3, r3, #1
 80026c0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026c2:	f7fe fb53 	bl	8000d6c <HAL_GetTick>
 80026c6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026c8:	e008      	b.n	80026dc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026ca:	f7fe fb4f 	bl	8000d6c <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d901      	bls.n	80026dc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e347      	b.n	8002d6c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026dc:	4b39      	ldr	r3, [pc, #228]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d0f0      	beq.n	80026ca <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026e8:	4b36      	ldr	r3, [pc, #216]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a35      	ldr	r2, [pc, #212]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 80026ee:	f043 0308 	orr.w	r3, r3, #8
 80026f2:	6013      	str	r3, [r2, #0]
 80026f4:	4b33      	ldr	r3, [pc, #204]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a1b      	ldr	r3, [r3, #32]
 8002700:	4930      	ldr	r1, [pc, #192]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 8002702:	4313      	orrs	r3, r2
 8002704:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002706:	4b2f      	ldr	r3, [pc, #188]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	021b      	lsls	r3, r3, #8
 8002714:	492b      	ldr	r1, [pc, #172]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 8002716:	4313      	orrs	r3, r2
 8002718:	604b      	str	r3, [r1, #4]
 800271a:	e01a      	b.n	8002752 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800271c:	4b29      	ldr	r3, [pc, #164]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a28      	ldr	r2, [pc, #160]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 8002722:	f023 0301 	bic.w	r3, r3, #1
 8002726:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002728:	f7fe fb20 	bl	8000d6c <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002730:	f7fe fb1c 	bl	8000d6c <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e314      	b.n	8002d6c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002742:	4b20      	ldr	r3, [pc, #128]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1f0      	bne.n	8002730 <HAL_RCC_OscConfig+0x1dc>
 800274e:	e000      	b.n	8002752 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002750:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b00      	cmp	r3, #0
 800275c:	d073      	beq.n	8002846 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	2b08      	cmp	r3, #8
 8002762:	d005      	beq.n	8002770 <HAL_RCC_OscConfig+0x21c>
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	2b0c      	cmp	r3, #12
 8002768:	d10e      	bne.n	8002788 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	2b03      	cmp	r3, #3
 800276e:	d10b      	bne.n	8002788 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002770:	4b14      	ldr	r3, [pc, #80]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d063      	beq.n	8002844 <HAL_RCC_OscConfig+0x2f0>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d15f      	bne.n	8002844 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e2f1      	b.n	8002d6c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002790:	d106      	bne.n	80027a0 <HAL_RCC_OscConfig+0x24c>
 8002792:	4b0c      	ldr	r3, [pc, #48]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a0b      	ldr	r2, [pc, #44]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 8002798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800279c:	6013      	str	r3, [r2, #0]
 800279e:	e025      	b.n	80027ec <HAL_RCC_OscConfig+0x298>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027a8:	d114      	bne.n	80027d4 <HAL_RCC_OscConfig+0x280>
 80027aa:	4b06      	ldr	r3, [pc, #24]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a05      	ldr	r2, [pc, #20]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 80027b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027b4:	6013      	str	r3, [r2, #0]
 80027b6:	4b03      	ldr	r3, [pc, #12]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a02      	ldr	r2, [pc, #8]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 80027bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027c0:	6013      	str	r3, [r2, #0]
 80027c2:	e013      	b.n	80027ec <HAL_RCC_OscConfig+0x298>
 80027c4:	40021000 	.word	0x40021000
 80027c8:	08003794 	.word	0x08003794
 80027cc:	20000000 	.word	0x20000000
 80027d0:	20000004 	.word	0x20000004
 80027d4:	4ba0      	ldr	r3, [pc, #640]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a9f      	ldr	r2, [pc, #636]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 80027da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027de:	6013      	str	r3, [r2, #0]
 80027e0:	4b9d      	ldr	r3, [pc, #628]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a9c      	ldr	r2, [pc, #624]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 80027e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d013      	beq.n	800281c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f4:	f7fe faba 	bl	8000d6c <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027fa:	e008      	b.n	800280e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027fc:	f7fe fab6 	bl	8000d6c <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b64      	cmp	r3, #100	; 0x64
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e2ae      	b.n	8002d6c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800280e:	4b92      	ldr	r3, [pc, #584]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d0f0      	beq.n	80027fc <HAL_RCC_OscConfig+0x2a8>
 800281a:	e014      	b.n	8002846 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800281c:	f7fe faa6 	bl	8000d6c <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002822:	e008      	b.n	8002836 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002824:	f7fe faa2 	bl	8000d6c <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b64      	cmp	r3, #100	; 0x64
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e29a      	b.n	8002d6c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002836:	4b88      	ldr	r3, [pc, #544]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1f0      	bne.n	8002824 <HAL_RCC_OscConfig+0x2d0>
 8002842:	e000      	b.n	8002846 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002844:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d060      	beq.n	8002914 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	2b04      	cmp	r3, #4
 8002856:	d005      	beq.n	8002864 <HAL_RCC_OscConfig+0x310>
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	2b0c      	cmp	r3, #12
 800285c:	d119      	bne.n	8002892 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	2b02      	cmp	r3, #2
 8002862:	d116      	bne.n	8002892 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002864:	4b7c      	ldr	r3, [pc, #496]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800286c:	2b00      	cmp	r3, #0
 800286e:	d005      	beq.n	800287c <HAL_RCC_OscConfig+0x328>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d101      	bne.n	800287c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e277      	b.n	8002d6c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800287c:	4b76      	ldr	r3, [pc, #472]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	061b      	lsls	r3, r3, #24
 800288a:	4973      	ldr	r1, [pc, #460]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 800288c:	4313      	orrs	r3, r2
 800288e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002890:	e040      	b.n	8002914 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d023      	beq.n	80028e2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800289a:	4b6f      	ldr	r3, [pc, #444]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a6e      	ldr	r2, [pc, #440]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 80028a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a6:	f7fe fa61 	bl	8000d6c <HAL_GetTick>
 80028aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028ac:	e008      	b.n	80028c0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028ae:	f7fe fa5d 	bl	8000d6c <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d901      	bls.n	80028c0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e255      	b.n	8002d6c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028c0:	4b65      	ldr	r3, [pc, #404]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d0f0      	beq.n	80028ae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028cc:	4b62      	ldr	r3, [pc, #392]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	061b      	lsls	r3, r3, #24
 80028da:	495f      	ldr	r1, [pc, #380]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	604b      	str	r3, [r1, #4]
 80028e0:	e018      	b.n	8002914 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028e2:	4b5d      	ldr	r3, [pc, #372]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a5c      	ldr	r2, [pc, #368]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 80028e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ee:	f7fe fa3d 	bl	8000d6c <HAL_GetTick>
 80028f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028f4:	e008      	b.n	8002908 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028f6:	f7fe fa39 	bl	8000d6c <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	2b02      	cmp	r3, #2
 8002902:	d901      	bls.n	8002908 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e231      	b.n	8002d6c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002908:	4b53      	ldr	r3, [pc, #332]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002910:	2b00      	cmp	r3, #0
 8002912:	d1f0      	bne.n	80028f6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0308 	and.w	r3, r3, #8
 800291c:	2b00      	cmp	r3, #0
 800291e:	d03c      	beq.n	800299a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	695b      	ldr	r3, [r3, #20]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d01c      	beq.n	8002962 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002928:	4b4b      	ldr	r3, [pc, #300]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 800292a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800292e:	4a4a      	ldr	r2, [pc, #296]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 8002930:	f043 0301 	orr.w	r3, r3, #1
 8002934:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002938:	f7fe fa18 	bl	8000d6c <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002940:	f7fe fa14 	bl	8000d6c <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e20c      	b.n	8002d6c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002952:	4b41      	ldr	r3, [pc, #260]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 8002954:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d0ef      	beq.n	8002940 <HAL_RCC_OscConfig+0x3ec>
 8002960:	e01b      	b.n	800299a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002962:	4b3d      	ldr	r3, [pc, #244]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 8002964:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002968:	4a3b      	ldr	r2, [pc, #236]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 800296a:	f023 0301 	bic.w	r3, r3, #1
 800296e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002972:	f7fe f9fb 	bl	8000d6c <HAL_GetTick>
 8002976:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002978:	e008      	b.n	800298c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800297a:	f7fe f9f7 	bl	8000d6c <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	2b02      	cmp	r3, #2
 8002986:	d901      	bls.n	800298c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e1ef      	b.n	8002d6c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800298c:	4b32      	ldr	r3, [pc, #200]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 800298e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1ef      	bne.n	800297a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0304 	and.w	r3, r3, #4
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f000 80a6 	beq.w	8002af4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029a8:	2300      	movs	r3, #0
 80029aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80029ac:	4b2a      	ldr	r3, [pc, #168]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 80029ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d10d      	bne.n	80029d4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029b8:	4b27      	ldr	r3, [pc, #156]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 80029ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029bc:	4a26      	ldr	r2, [pc, #152]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 80029be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029c2:	6593      	str	r3, [r2, #88]	; 0x58
 80029c4:	4b24      	ldr	r3, [pc, #144]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 80029c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029cc:	60bb      	str	r3, [r7, #8]
 80029ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029d0:	2301      	movs	r3, #1
 80029d2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029d4:	4b21      	ldr	r3, [pc, #132]	; (8002a5c <HAL_RCC_OscConfig+0x508>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d118      	bne.n	8002a12 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029e0:	4b1e      	ldr	r3, [pc, #120]	; (8002a5c <HAL_RCC_OscConfig+0x508>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a1d      	ldr	r2, [pc, #116]	; (8002a5c <HAL_RCC_OscConfig+0x508>)
 80029e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029ec:	f7fe f9be 	bl	8000d6c <HAL_GetTick>
 80029f0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029f2:	e008      	b.n	8002a06 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029f4:	f7fe f9ba 	bl	8000d6c <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e1b2      	b.n	8002d6c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a06:	4b15      	ldr	r3, [pc, #84]	; (8002a5c <HAL_RCC_OscConfig+0x508>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d0f0      	beq.n	80029f4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d108      	bne.n	8002a2c <HAL_RCC_OscConfig+0x4d8>
 8002a1a:	4b0f      	ldr	r3, [pc, #60]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 8002a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a20:	4a0d      	ldr	r2, [pc, #52]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 8002a22:	f043 0301 	orr.w	r3, r3, #1
 8002a26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a2a:	e029      	b.n	8002a80 <HAL_RCC_OscConfig+0x52c>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	2b05      	cmp	r3, #5
 8002a32:	d115      	bne.n	8002a60 <HAL_RCC_OscConfig+0x50c>
 8002a34:	4b08      	ldr	r3, [pc, #32]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 8002a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a3a:	4a07      	ldr	r2, [pc, #28]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 8002a3c:	f043 0304 	orr.w	r3, r3, #4
 8002a40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a44:	4b04      	ldr	r3, [pc, #16]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 8002a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a4a:	4a03      	ldr	r2, [pc, #12]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 8002a4c:	f043 0301 	orr.w	r3, r3, #1
 8002a50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a54:	e014      	b.n	8002a80 <HAL_RCC_OscConfig+0x52c>
 8002a56:	bf00      	nop
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	40007000 	.word	0x40007000
 8002a60:	4b9a      	ldr	r3, [pc, #616]	; (8002ccc <HAL_RCC_OscConfig+0x778>)
 8002a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a66:	4a99      	ldr	r2, [pc, #612]	; (8002ccc <HAL_RCC_OscConfig+0x778>)
 8002a68:	f023 0301 	bic.w	r3, r3, #1
 8002a6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a70:	4b96      	ldr	r3, [pc, #600]	; (8002ccc <HAL_RCC_OscConfig+0x778>)
 8002a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a76:	4a95      	ldr	r2, [pc, #596]	; (8002ccc <HAL_RCC_OscConfig+0x778>)
 8002a78:	f023 0304 	bic.w	r3, r3, #4
 8002a7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d016      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a88:	f7fe f970 	bl	8000d6c <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a8e:	e00a      	b.n	8002aa6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a90:	f7fe f96c 	bl	8000d6c <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e162      	b.n	8002d6c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002aa6:	4b89      	ldr	r3, [pc, #548]	; (8002ccc <HAL_RCC_OscConfig+0x778>)
 8002aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d0ed      	beq.n	8002a90 <HAL_RCC_OscConfig+0x53c>
 8002ab4:	e015      	b.n	8002ae2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab6:	f7fe f959 	bl	8000d6c <HAL_GetTick>
 8002aba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002abc:	e00a      	b.n	8002ad4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002abe:	f7fe f955 	bl	8000d6c <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d901      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e14b      	b.n	8002d6c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ad4:	4b7d      	ldr	r3, [pc, #500]	; (8002ccc <HAL_RCC_OscConfig+0x778>)
 8002ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1ed      	bne.n	8002abe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ae2:	7ffb      	ldrb	r3, [r7, #31]
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d105      	bne.n	8002af4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ae8:	4b78      	ldr	r3, [pc, #480]	; (8002ccc <HAL_RCC_OscConfig+0x778>)
 8002aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aec:	4a77      	ldr	r2, [pc, #476]	; (8002ccc <HAL_RCC_OscConfig+0x778>)
 8002aee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002af2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0320 	and.w	r3, r3, #32
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d03c      	beq.n	8002b7a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d01c      	beq.n	8002b42 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b08:	4b70      	ldr	r3, [pc, #448]	; (8002ccc <HAL_RCC_OscConfig+0x778>)
 8002b0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b0e:	4a6f      	ldr	r2, [pc, #444]	; (8002ccc <HAL_RCC_OscConfig+0x778>)
 8002b10:	f043 0301 	orr.w	r3, r3, #1
 8002b14:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b18:	f7fe f928 	bl	8000d6c <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b20:	f7fe f924 	bl	8000d6c <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e11c      	b.n	8002d6c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b32:	4b66      	ldr	r3, [pc, #408]	; (8002ccc <HAL_RCC_OscConfig+0x778>)
 8002b34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d0ef      	beq.n	8002b20 <HAL_RCC_OscConfig+0x5cc>
 8002b40:	e01b      	b.n	8002b7a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b42:	4b62      	ldr	r3, [pc, #392]	; (8002ccc <HAL_RCC_OscConfig+0x778>)
 8002b44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b48:	4a60      	ldr	r2, [pc, #384]	; (8002ccc <HAL_RCC_OscConfig+0x778>)
 8002b4a:	f023 0301 	bic.w	r3, r3, #1
 8002b4e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b52:	f7fe f90b 	bl	8000d6c <HAL_GetTick>
 8002b56:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b58:	e008      	b.n	8002b6c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b5a:	f7fe f907 	bl	8000d6c <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d901      	bls.n	8002b6c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e0ff      	b.n	8002d6c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b6c:	4b57      	ldr	r3, [pc, #348]	; (8002ccc <HAL_RCC_OscConfig+0x778>)
 8002b6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1ef      	bne.n	8002b5a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	f000 80f3 	beq.w	8002d6a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	f040 80c9 	bne.w	8002d20 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002b8e:	4b4f      	ldr	r3, [pc, #316]	; (8002ccc <HAL_RCC_OscConfig+0x778>)
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	f003 0203 	and.w	r2, r3, #3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d12c      	bne.n	8002bfc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bac:	3b01      	subs	r3, #1
 8002bae:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d123      	bne.n	8002bfc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bbe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d11b      	bne.n	8002bfc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bce:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d113      	bne.n	8002bfc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bde:	085b      	lsrs	r3, r3, #1
 8002be0:	3b01      	subs	r3, #1
 8002be2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d109      	bne.n	8002bfc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf2:	085b      	lsrs	r3, r3, #1
 8002bf4:	3b01      	subs	r3, #1
 8002bf6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d06b      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	2b0c      	cmp	r3, #12
 8002c00:	d062      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002c02:	4b32      	ldr	r3, [pc, #200]	; (8002ccc <HAL_RCC_OscConfig+0x778>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e0ac      	b.n	8002d6c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002c12:	4b2e      	ldr	r3, [pc, #184]	; (8002ccc <HAL_RCC_OscConfig+0x778>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a2d      	ldr	r2, [pc, #180]	; (8002ccc <HAL_RCC_OscConfig+0x778>)
 8002c18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c1c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c1e:	f7fe f8a5 	bl	8000d6c <HAL_GetTick>
 8002c22:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c24:	e008      	b.n	8002c38 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c26:	f7fe f8a1 	bl	8000d6c <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d901      	bls.n	8002c38 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e099      	b.n	8002d6c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c38:	4b24      	ldr	r3, [pc, #144]	; (8002ccc <HAL_RCC_OscConfig+0x778>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d1f0      	bne.n	8002c26 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c44:	4b21      	ldr	r3, [pc, #132]	; (8002ccc <HAL_RCC_OscConfig+0x778>)
 8002c46:	68da      	ldr	r2, [r3, #12]
 8002c48:	4b21      	ldr	r3, [pc, #132]	; (8002cd0 <HAL_RCC_OscConfig+0x77c>)
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002c54:	3a01      	subs	r2, #1
 8002c56:	0112      	lsls	r2, r2, #4
 8002c58:	4311      	orrs	r1, r2
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c5e:	0212      	lsls	r2, r2, #8
 8002c60:	4311      	orrs	r1, r2
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002c66:	0852      	lsrs	r2, r2, #1
 8002c68:	3a01      	subs	r2, #1
 8002c6a:	0552      	lsls	r2, r2, #21
 8002c6c:	4311      	orrs	r1, r2
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c72:	0852      	lsrs	r2, r2, #1
 8002c74:	3a01      	subs	r2, #1
 8002c76:	0652      	lsls	r2, r2, #25
 8002c78:	4311      	orrs	r1, r2
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c7e:	06d2      	lsls	r2, r2, #27
 8002c80:	430a      	orrs	r2, r1
 8002c82:	4912      	ldr	r1, [pc, #72]	; (8002ccc <HAL_RCC_OscConfig+0x778>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002c88:	4b10      	ldr	r3, [pc, #64]	; (8002ccc <HAL_RCC_OscConfig+0x778>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a0f      	ldr	r2, [pc, #60]	; (8002ccc <HAL_RCC_OscConfig+0x778>)
 8002c8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c92:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c94:	4b0d      	ldr	r3, [pc, #52]	; (8002ccc <HAL_RCC_OscConfig+0x778>)
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	4a0c      	ldr	r2, [pc, #48]	; (8002ccc <HAL_RCC_OscConfig+0x778>)
 8002c9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c9e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ca0:	f7fe f864 	bl	8000d6c <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ca6:	e008      	b.n	8002cba <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ca8:	f7fe f860 	bl	8000d6c <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e058      	b.n	8002d6c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cba:	4b04      	ldr	r3, [pc, #16]	; (8002ccc <HAL_RCC_OscConfig+0x778>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d0f0      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cc6:	e050      	b.n	8002d6a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e04f      	b.n	8002d6c <HAL_RCC_OscConfig+0x818>
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cd4:	4b27      	ldr	r3, [pc, #156]	; (8002d74 <HAL_RCC_OscConfig+0x820>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d144      	bne.n	8002d6a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002ce0:	4b24      	ldr	r3, [pc, #144]	; (8002d74 <HAL_RCC_OscConfig+0x820>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a23      	ldr	r2, [pc, #140]	; (8002d74 <HAL_RCC_OscConfig+0x820>)
 8002ce6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002cec:	4b21      	ldr	r3, [pc, #132]	; (8002d74 <HAL_RCC_OscConfig+0x820>)
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	4a20      	ldr	r2, [pc, #128]	; (8002d74 <HAL_RCC_OscConfig+0x820>)
 8002cf2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cf6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002cf8:	f7fe f838 	bl	8000d6c <HAL_GetTick>
 8002cfc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cfe:	e008      	b.n	8002d12 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d00:	f7fe f834 	bl	8000d6c <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e02c      	b.n	8002d6c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d12:	4b18      	ldr	r3, [pc, #96]	; (8002d74 <HAL_RCC_OscConfig+0x820>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d0f0      	beq.n	8002d00 <HAL_RCC_OscConfig+0x7ac>
 8002d1e:	e024      	b.n	8002d6a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	2b0c      	cmp	r3, #12
 8002d24:	d01f      	beq.n	8002d66 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d26:	4b13      	ldr	r3, [pc, #76]	; (8002d74 <HAL_RCC_OscConfig+0x820>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a12      	ldr	r2, [pc, #72]	; (8002d74 <HAL_RCC_OscConfig+0x820>)
 8002d2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d32:	f7fe f81b 	bl	8000d6c <HAL_GetTick>
 8002d36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d38:	e008      	b.n	8002d4c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d3a:	f7fe f817 	bl	8000d6c <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d901      	bls.n	8002d4c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e00f      	b.n	8002d6c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d4c:	4b09      	ldr	r3, [pc, #36]	; (8002d74 <HAL_RCC_OscConfig+0x820>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d1f0      	bne.n	8002d3a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002d58:	4b06      	ldr	r3, [pc, #24]	; (8002d74 <HAL_RCC_OscConfig+0x820>)
 8002d5a:	68da      	ldr	r2, [r3, #12]
 8002d5c:	4905      	ldr	r1, [pc, #20]	; (8002d74 <HAL_RCC_OscConfig+0x820>)
 8002d5e:	4b06      	ldr	r3, [pc, #24]	; (8002d78 <HAL_RCC_OscConfig+0x824>)
 8002d60:	4013      	ands	r3, r2
 8002d62:	60cb      	str	r3, [r1, #12]
 8002d64:	e001      	b.n	8002d6a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e000      	b.n	8002d6c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3720      	adds	r7, #32
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	40021000 	.word	0x40021000
 8002d78:	feeefffc 	.word	0xfeeefffc

08002d7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d101      	bne.n	8002d90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e0e7      	b.n	8002f60 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d90:	4b75      	ldr	r3, [pc, #468]	; (8002f68 <HAL_RCC_ClockConfig+0x1ec>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0307 	and.w	r3, r3, #7
 8002d98:	683a      	ldr	r2, [r7, #0]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d910      	bls.n	8002dc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d9e:	4b72      	ldr	r3, [pc, #456]	; (8002f68 <HAL_RCC_ClockConfig+0x1ec>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f023 0207 	bic.w	r2, r3, #7
 8002da6:	4970      	ldr	r1, [pc, #448]	; (8002f68 <HAL_RCC_ClockConfig+0x1ec>)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dae:	4b6e      	ldr	r3, [pc, #440]	; (8002f68 <HAL_RCC_ClockConfig+0x1ec>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0307 	and.w	r3, r3, #7
 8002db6:	683a      	ldr	r2, [r7, #0]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d001      	beq.n	8002dc0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e0cf      	b.n	8002f60 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0302 	and.w	r3, r3, #2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d010      	beq.n	8002dee <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689a      	ldr	r2, [r3, #8]
 8002dd0:	4b66      	ldr	r3, [pc, #408]	; (8002f6c <HAL_RCC_ClockConfig+0x1f0>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d908      	bls.n	8002dee <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ddc:	4b63      	ldr	r3, [pc, #396]	; (8002f6c <HAL_RCC_ClockConfig+0x1f0>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	4960      	ldr	r1, [pc, #384]	; (8002f6c <HAL_RCC_ClockConfig+0x1f0>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d04c      	beq.n	8002e94 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	2b03      	cmp	r3, #3
 8002e00:	d107      	bne.n	8002e12 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e02:	4b5a      	ldr	r3, [pc, #360]	; (8002f6c <HAL_RCC_ClockConfig+0x1f0>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d121      	bne.n	8002e52 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e0a6      	b.n	8002f60 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d107      	bne.n	8002e2a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e1a:	4b54      	ldr	r3, [pc, #336]	; (8002f6c <HAL_RCC_ClockConfig+0x1f0>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d115      	bne.n	8002e52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e09a      	b.n	8002f60 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d107      	bne.n	8002e42 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e32:	4b4e      	ldr	r3, [pc, #312]	; (8002f6c <HAL_RCC_ClockConfig+0x1f0>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d109      	bne.n	8002e52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e08e      	b.n	8002f60 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e42:	4b4a      	ldr	r3, [pc, #296]	; (8002f6c <HAL_RCC_ClockConfig+0x1f0>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e086      	b.n	8002f60 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e52:	4b46      	ldr	r3, [pc, #280]	; (8002f6c <HAL_RCC_ClockConfig+0x1f0>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f023 0203 	bic.w	r2, r3, #3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	4943      	ldr	r1, [pc, #268]	; (8002f6c <HAL_RCC_ClockConfig+0x1f0>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e64:	f7fd ff82 	bl	8000d6c <HAL_GetTick>
 8002e68:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e6a:	e00a      	b.n	8002e82 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e6c:	f7fd ff7e 	bl	8000d6c <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e06e      	b.n	8002f60 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e82:	4b3a      	ldr	r3, [pc, #232]	; (8002f6c <HAL_RCC_ClockConfig+0x1f0>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f003 020c 	and.w	r2, r3, #12
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d1eb      	bne.n	8002e6c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0302 	and.w	r3, r3, #2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d010      	beq.n	8002ec2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689a      	ldr	r2, [r3, #8]
 8002ea4:	4b31      	ldr	r3, [pc, #196]	; (8002f6c <HAL_RCC_ClockConfig+0x1f0>)
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d208      	bcs.n	8002ec2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eb0:	4b2e      	ldr	r3, [pc, #184]	; (8002f6c <HAL_RCC_ClockConfig+0x1f0>)
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	492b      	ldr	r1, [pc, #172]	; (8002f6c <HAL_RCC_ClockConfig+0x1f0>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ec2:	4b29      	ldr	r3, [pc, #164]	; (8002f68 <HAL_RCC_ClockConfig+0x1ec>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0307 	and.w	r3, r3, #7
 8002eca:	683a      	ldr	r2, [r7, #0]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d210      	bcs.n	8002ef2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ed0:	4b25      	ldr	r3, [pc, #148]	; (8002f68 <HAL_RCC_ClockConfig+0x1ec>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f023 0207 	bic.w	r2, r3, #7
 8002ed8:	4923      	ldr	r1, [pc, #140]	; (8002f68 <HAL_RCC_ClockConfig+0x1ec>)
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ee0:	4b21      	ldr	r3, [pc, #132]	; (8002f68 <HAL_RCC_ClockConfig+0x1ec>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0307 	and.w	r3, r3, #7
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d001      	beq.n	8002ef2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e036      	b.n	8002f60 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0304 	and.w	r3, r3, #4
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d008      	beq.n	8002f10 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002efe:	4b1b      	ldr	r3, [pc, #108]	; (8002f6c <HAL_RCC_ClockConfig+0x1f0>)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	4918      	ldr	r1, [pc, #96]	; (8002f6c <HAL_RCC_ClockConfig+0x1f0>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0308 	and.w	r3, r3, #8
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d009      	beq.n	8002f30 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f1c:	4b13      	ldr	r3, [pc, #76]	; (8002f6c <HAL_RCC_ClockConfig+0x1f0>)
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	00db      	lsls	r3, r3, #3
 8002f2a:	4910      	ldr	r1, [pc, #64]	; (8002f6c <HAL_RCC_ClockConfig+0x1f0>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f30:	f000 f824 	bl	8002f7c <HAL_RCC_GetSysClockFreq>
 8002f34:	4602      	mov	r2, r0
 8002f36:	4b0d      	ldr	r3, [pc, #52]	; (8002f6c <HAL_RCC_ClockConfig+0x1f0>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	091b      	lsrs	r3, r3, #4
 8002f3c:	f003 030f 	and.w	r3, r3, #15
 8002f40:	490b      	ldr	r1, [pc, #44]	; (8002f70 <HAL_RCC_ClockConfig+0x1f4>)
 8002f42:	5ccb      	ldrb	r3, [r1, r3]
 8002f44:	f003 031f 	and.w	r3, r3, #31
 8002f48:	fa22 f303 	lsr.w	r3, r2, r3
 8002f4c:	4a09      	ldr	r2, [pc, #36]	; (8002f74 <HAL_RCC_ClockConfig+0x1f8>)
 8002f4e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f50:	4b09      	ldr	r3, [pc, #36]	; (8002f78 <HAL_RCC_ClockConfig+0x1fc>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7fd feb9 	bl	8000ccc <HAL_InitTick>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	72fb      	strb	r3, [r7, #11]

  return status;
 8002f5e:	7afb      	ldrb	r3, [r7, #11]
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3710      	adds	r7, #16
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	40022000 	.word	0x40022000
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	08003794 	.word	0x08003794
 8002f74:	20000000 	.word	0x20000000
 8002f78:	20000004 	.word	0x20000004

08002f7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b089      	sub	sp, #36	; 0x24
 8002f80:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002f82:	2300      	movs	r3, #0
 8002f84:	61fb      	str	r3, [r7, #28]
 8002f86:	2300      	movs	r3, #0
 8002f88:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f8a:	4b3e      	ldr	r3, [pc, #248]	; (8003084 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f003 030c 	and.w	r3, r3, #12
 8002f92:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f94:	4b3b      	ldr	r3, [pc, #236]	; (8003084 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	f003 0303 	and.w	r3, r3, #3
 8002f9c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d005      	beq.n	8002fb0 <HAL_RCC_GetSysClockFreq+0x34>
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	2b0c      	cmp	r3, #12
 8002fa8:	d121      	bne.n	8002fee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d11e      	bne.n	8002fee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002fb0:	4b34      	ldr	r3, [pc, #208]	; (8003084 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0308 	and.w	r3, r3, #8
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d107      	bne.n	8002fcc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002fbc:	4b31      	ldr	r3, [pc, #196]	; (8003084 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fc2:	0a1b      	lsrs	r3, r3, #8
 8002fc4:	f003 030f 	and.w	r3, r3, #15
 8002fc8:	61fb      	str	r3, [r7, #28]
 8002fca:	e005      	b.n	8002fd8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002fcc:	4b2d      	ldr	r3, [pc, #180]	; (8003084 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	091b      	lsrs	r3, r3, #4
 8002fd2:	f003 030f 	and.w	r3, r3, #15
 8002fd6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002fd8:	4a2b      	ldr	r2, [pc, #172]	; (8003088 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fe0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d10d      	bne.n	8003004 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fec:	e00a      	b.n	8003004 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	2b04      	cmp	r3, #4
 8002ff2:	d102      	bne.n	8002ffa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ff4:	4b25      	ldr	r3, [pc, #148]	; (800308c <HAL_RCC_GetSysClockFreq+0x110>)
 8002ff6:	61bb      	str	r3, [r7, #24]
 8002ff8:	e004      	b.n	8003004 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	2b08      	cmp	r3, #8
 8002ffe:	d101      	bne.n	8003004 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003000:	4b23      	ldr	r3, [pc, #140]	; (8003090 <HAL_RCC_GetSysClockFreq+0x114>)
 8003002:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	2b0c      	cmp	r3, #12
 8003008:	d134      	bne.n	8003074 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800300a:	4b1e      	ldr	r3, [pc, #120]	; (8003084 <HAL_RCC_GetSysClockFreq+0x108>)
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	f003 0303 	and.w	r3, r3, #3
 8003012:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	2b02      	cmp	r3, #2
 8003018:	d003      	beq.n	8003022 <HAL_RCC_GetSysClockFreq+0xa6>
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	2b03      	cmp	r3, #3
 800301e:	d003      	beq.n	8003028 <HAL_RCC_GetSysClockFreq+0xac>
 8003020:	e005      	b.n	800302e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003022:	4b1a      	ldr	r3, [pc, #104]	; (800308c <HAL_RCC_GetSysClockFreq+0x110>)
 8003024:	617b      	str	r3, [r7, #20]
      break;
 8003026:	e005      	b.n	8003034 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003028:	4b19      	ldr	r3, [pc, #100]	; (8003090 <HAL_RCC_GetSysClockFreq+0x114>)
 800302a:	617b      	str	r3, [r7, #20]
      break;
 800302c:	e002      	b.n	8003034 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	617b      	str	r3, [r7, #20]
      break;
 8003032:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003034:	4b13      	ldr	r3, [pc, #76]	; (8003084 <HAL_RCC_GetSysClockFreq+0x108>)
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	091b      	lsrs	r3, r3, #4
 800303a:	f003 0307 	and.w	r3, r3, #7
 800303e:	3301      	adds	r3, #1
 8003040:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003042:	4b10      	ldr	r3, [pc, #64]	; (8003084 <HAL_RCC_GetSysClockFreq+0x108>)
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	0a1b      	lsrs	r3, r3, #8
 8003048:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800304c:	697a      	ldr	r2, [r7, #20]
 800304e:	fb03 f202 	mul.w	r2, r3, r2
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	fbb2 f3f3 	udiv	r3, r2, r3
 8003058:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800305a:	4b0a      	ldr	r3, [pc, #40]	; (8003084 <HAL_RCC_GetSysClockFreq+0x108>)
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	0e5b      	lsrs	r3, r3, #25
 8003060:	f003 0303 	and.w	r3, r3, #3
 8003064:	3301      	adds	r3, #1
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003072:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003074:	69bb      	ldr	r3, [r7, #24]
}
 8003076:	4618      	mov	r0, r3
 8003078:	3724      	adds	r7, #36	; 0x24
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	40021000 	.word	0x40021000
 8003088:	080037a4 	.word	0x080037a4
 800308c:	00f42400 	.word	0x00f42400
 8003090:	007a1200 	.word	0x007a1200

08003094 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b086      	sub	sp, #24
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800309c:	2300      	movs	r3, #0
 800309e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80030a0:	4b2a      	ldr	r3, [pc, #168]	; (800314c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d003      	beq.n	80030b4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80030ac:	f7ff f9ee 	bl	800248c <HAL_PWREx_GetVoltageRange>
 80030b0:	6178      	str	r0, [r7, #20]
 80030b2:	e014      	b.n	80030de <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80030b4:	4b25      	ldr	r3, [pc, #148]	; (800314c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b8:	4a24      	ldr	r2, [pc, #144]	; (800314c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030be:	6593      	str	r3, [r2, #88]	; 0x58
 80030c0:	4b22      	ldr	r3, [pc, #136]	; (800314c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030c8:	60fb      	str	r3, [r7, #12]
 80030ca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80030cc:	f7ff f9de 	bl	800248c <HAL_PWREx_GetVoltageRange>
 80030d0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80030d2:	4b1e      	ldr	r3, [pc, #120]	; (800314c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d6:	4a1d      	ldr	r2, [pc, #116]	; (800314c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030dc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030e4:	d10b      	bne.n	80030fe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2b80      	cmp	r3, #128	; 0x80
 80030ea:	d919      	bls.n	8003120 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2ba0      	cmp	r3, #160	; 0xa0
 80030f0:	d902      	bls.n	80030f8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030f2:	2302      	movs	r3, #2
 80030f4:	613b      	str	r3, [r7, #16]
 80030f6:	e013      	b.n	8003120 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030f8:	2301      	movs	r3, #1
 80030fa:	613b      	str	r3, [r7, #16]
 80030fc:	e010      	b.n	8003120 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2b80      	cmp	r3, #128	; 0x80
 8003102:	d902      	bls.n	800310a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003104:	2303      	movs	r3, #3
 8003106:	613b      	str	r3, [r7, #16]
 8003108:	e00a      	b.n	8003120 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2b80      	cmp	r3, #128	; 0x80
 800310e:	d102      	bne.n	8003116 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003110:	2302      	movs	r3, #2
 8003112:	613b      	str	r3, [r7, #16]
 8003114:	e004      	b.n	8003120 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2b70      	cmp	r3, #112	; 0x70
 800311a:	d101      	bne.n	8003120 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800311c:	2301      	movs	r3, #1
 800311e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003120:	4b0b      	ldr	r3, [pc, #44]	; (8003150 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f023 0207 	bic.w	r2, r3, #7
 8003128:	4909      	ldr	r1, [pc, #36]	; (8003150 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	4313      	orrs	r3, r2
 800312e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003130:	4b07      	ldr	r3, [pc, #28]	; (8003150 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0307 	and.w	r3, r3, #7
 8003138:	693a      	ldr	r2, [r7, #16]
 800313a:	429a      	cmp	r2, r3
 800313c:	d001      	beq.n	8003142 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e000      	b.n	8003144 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003142:	2300      	movs	r3, #0
}
 8003144:	4618      	mov	r0, r3
 8003146:	3718      	adds	r7, #24
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}
 800314c:	40021000 	.word	0x40021000
 8003150:	40022000 	.word	0x40022000

08003154 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800315c:	2300      	movs	r3, #0
 800315e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003160:	2300      	movs	r3, #0
 8003162:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800316c:	2b00      	cmp	r3, #0
 800316e:	d031      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003174:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003178:	d01a      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800317a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800317e:	d814      	bhi.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003180:	2b00      	cmp	r3, #0
 8003182:	d009      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003184:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003188:	d10f      	bne.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800318a:	4b5d      	ldr	r3, [pc, #372]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	4a5c      	ldr	r2, [pc, #368]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003190:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003194:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003196:	e00c      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	3304      	adds	r3, #4
 800319c:	2100      	movs	r1, #0
 800319e:	4618      	mov	r0, r3
 80031a0:	f000 f9ce 	bl	8003540 <RCCEx_PLLSAI1_Config>
 80031a4:	4603      	mov	r3, r0
 80031a6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80031a8:	e003      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	74fb      	strb	r3, [r7, #19]
      break;
 80031ae:	e000      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80031b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031b2:	7cfb      	ldrb	r3, [r7, #19]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d10b      	bne.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80031b8:	4b51      	ldr	r3, [pc, #324]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031c6:	494e      	ldr	r1, [pc, #312]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80031ce:	e001      	b.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031d0:	7cfb      	ldrb	r3, [r7, #19]
 80031d2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	f000 809e 	beq.w	800331e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031e2:	2300      	movs	r3, #0
 80031e4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80031e6:	4b46      	ldr	r3, [pc, #280]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80031f2:	2301      	movs	r3, #1
 80031f4:	e000      	b.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80031f6:	2300      	movs	r3, #0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00d      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031fc:	4b40      	ldr	r3, [pc, #256]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003200:	4a3f      	ldr	r2, [pc, #252]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003202:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003206:	6593      	str	r3, [r2, #88]	; 0x58
 8003208:	4b3d      	ldr	r3, [pc, #244]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800320a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800320c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003210:	60bb      	str	r3, [r7, #8]
 8003212:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003214:	2301      	movs	r3, #1
 8003216:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003218:	4b3a      	ldr	r3, [pc, #232]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a39      	ldr	r2, [pc, #228]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800321e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003222:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003224:	f7fd fda2 	bl	8000d6c <HAL_GetTick>
 8003228:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800322a:	e009      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800322c:	f7fd fd9e 	bl	8000d6c <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	2b02      	cmp	r3, #2
 8003238:	d902      	bls.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	74fb      	strb	r3, [r7, #19]
        break;
 800323e:	e005      	b.n	800324c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003240:	4b30      	ldr	r3, [pc, #192]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003248:	2b00      	cmp	r3, #0
 800324a:	d0ef      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800324c:	7cfb      	ldrb	r3, [r7, #19]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d15a      	bne.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003252:	4b2b      	ldr	r3, [pc, #172]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003258:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800325c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d01e      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003268:	697a      	ldr	r2, [r7, #20]
 800326a:	429a      	cmp	r2, r3
 800326c:	d019      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800326e:	4b24      	ldr	r3, [pc, #144]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003270:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003274:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003278:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800327a:	4b21      	ldr	r3, [pc, #132]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800327c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003280:	4a1f      	ldr	r2, [pc, #124]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003282:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003286:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800328a:	4b1d      	ldr	r3, [pc, #116]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800328c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003290:	4a1b      	ldr	r2, [pc, #108]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003292:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003296:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800329a:	4a19      	ldr	r2, [pc, #100]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	f003 0301 	and.w	r3, r3, #1
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d016      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ac:	f7fd fd5e 	bl	8000d6c <HAL_GetTick>
 80032b0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032b2:	e00b      	b.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032b4:	f7fd fd5a 	bl	8000d6c <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	f241 3288 	movw	r2, #5000	; 0x1388
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d902      	bls.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	74fb      	strb	r3, [r7, #19]
            break;
 80032ca:	e006      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032cc:	4b0c      	ldr	r3, [pc, #48]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80032ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d0ec      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80032da:	7cfb      	ldrb	r3, [r7, #19]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d10b      	bne.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032e0:	4b07      	ldr	r3, [pc, #28]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80032e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032ee:	4904      	ldr	r1, [pc, #16]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80032f6:	e009      	b.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80032f8:	7cfb      	ldrb	r3, [r7, #19]
 80032fa:	74bb      	strb	r3, [r7, #18]
 80032fc:	e006      	b.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80032fe:	bf00      	nop
 8003300:	40021000 	.word	0x40021000
 8003304:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003308:	7cfb      	ldrb	r3, [r7, #19]
 800330a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800330c:	7c7b      	ldrb	r3, [r7, #17]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d105      	bne.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003312:	4b8a      	ldr	r3, [pc, #552]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003316:	4a89      	ldr	r2, [pc, #548]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003318:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800331c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00a      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800332a:	4b84      	ldr	r3, [pc, #528]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800332c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003330:	f023 0203 	bic.w	r2, r3, #3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a1b      	ldr	r3, [r3, #32]
 8003338:	4980      	ldr	r1, [pc, #512]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800333a:	4313      	orrs	r3, r2
 800333c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0302 	and.w	r3, r3, #2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d00a      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800334c:	4b7b      	ldr	r3, [pc, #492]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800334e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003352:	f023 020c 	bic.w	r2, r3, #12
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335a:	4978      	ldr	r1, [pc, #480]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800335c:	4313      	orrs	r3, r2
 800335e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0320 	and.w	r3, r3, #32
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00a      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800336e:	4b73      	ldr	r3, [pc, #460]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003374:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337c:	496f      	ldr	r1, [pc, #444]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800337e:	4313      	orrs	r3, r2
 8003380:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800338c:	2b00      	cmp	r3, #0
 800338e:	d00a      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003390:	4b6a      	ldr	r3, [pc, #424]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003396:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800339e:	4967      	ldr	r1, [pc, #412]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00a      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80033b2:	4b62      	ldr	r3, [pc, #392]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80033b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c0:	495e      	ldr	r1, [pc, #376]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d00a      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033d4:	4b59      	ldr	r3, [pc, #356]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80033d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033da:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e2:	4956      	ldr	r1, [pc, #344]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00a      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033f6:	4b51      	ldr	r3, [pc, #324]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80033f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003404:	494d      	ldr	r1, [pc, #308]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003406:	4313      	orrs	r3, r2
 8003408:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d028      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003418:	4b48      	ldr	r3, [pc, #288]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800341a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800341e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003426:	4945      	ldr	r1, [pc, #276]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003428:	4313      	orrs	r3, r2
 800342a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003432:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003436:	d106      	bne.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003438:	4b40      	ldr	r3, [pc, #256]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	4a3f      	ldr	r2, [pc, #252]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800343e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003442:	60d3      	str	r3, [r2, #12]
 8003444:	e011      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800344e:	d10c      	bne.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	3304      	adds	r3, #4
 8003454:	2101      	movs	r1, #1
 8003456:	4618      	mov	r0, r3
 8003458:	f000 f872 	bl	8003540 <RCCEx_PLLSAI1_Config>
 800345c:	4603      	mov	r3, r0
 800345e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003460:	7cfb      	ldrb	r3, [r7, #19]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d001      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003466:	7cfb      	ldrb	r3, [r7, #19]
 8003468:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d028      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003476:	4b31      	ldr	r3, [pc, #196]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800347c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003484:	492d      	ldr	r1, [pc, #180]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003486:	4313      	orrs	r3, r2
 8003488:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003490:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003494:	d106      	bne.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003496:	4b29      	ldr	r3, [pc, #164]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	4a28      	ldr	r2, [pc, #160]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800349c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034a0:	60d3      	str	r3, [r2, #12]
 80034a2:	e011      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034ac:	d10c      	bne.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	3304      	adds	r3, #4
 80034b2:	2101      	movs	r1, #1
 80034b4:	4618      	mov	r0, r3
 80034b6:	f000 f843 	bl	8003540 <RCCEx_PLLSAI1_Config>
 80034ba:	4603      	mov	r3, r0
 80034bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034be:	7cfb      	ldrb	r3, [r7, #19]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d001      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80034c4:	7cfb      	ldrb	r3, [r7, #19]
 80034c6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d01c      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034d4:	4b19      	ldr	r3, [pc, #100]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80034d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034da:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034e2:	4916      	ldr	r1, [pc, #88]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034f2:	d10c      	bne.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	3304      	adds	r3, #4
 80034f8:	2102      	movs	r1, #2
 80034fa:	4618      	mov	r0, r3
 80034fc:	f000 f820 	bl	8003540 <RCCEx_PLLSAI1_Config>
 8003500:	4603      	mov	r3, r0
 8003502:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003504:	7cfb      	ldrb	r3, [r7, #19]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d001      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800350a:	7cfb      	ldrb	r3, [r7, #19]
 800350c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00a      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800351a:	4b08      	ldr	r3, [pc, #32]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800351c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003520:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003528:	4904      	ldr	r1, [pc, #16]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800352a:	4313      	orrs	r3, r2
 800352c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003530:	7cbb      	ldrb	r3, [r7, #18]
}
 8003532:	4618      	mov	r0, r3
 8003534:	3718      	adds	r7, #24
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	40021000 	.word	0x40021000

08003540 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800354a:	2300      	movs	r3, #0
 800354c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800354e:	4b74      	ldr	r3, [pc, #464]	; (8003720 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	f003 0303 	and.w	r3, r3, #3
 8003556:	2b00      	cmp	r3, #0
 8003558:	d018      	beq.n	800358c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800355a:	4b71      	ldr	r3, [pc, #452]	; (8003720 <RCCEx_PLLSAI1_Config+0x1e0>)
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	f003 0203 	and.w	r2, r3, #3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	429a      	cmp	r2, r3
 8003568:	d10d      	bne.n	8003586 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
       ||
 800356e:	2b00      	cmp	r3, #0
 8003570:	d009      	beq.n	8003586 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003572:	4b6b      	ldr	r3, [pc, #428]	; (8003720 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	091b      	lsrs	r3, r3, #4
 8003578:	f003 0307 	and.w	r3, r3, #7
 800357c:	1c5a      	adds	r2, r3, #1
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
       ||
 8003582:	429a      	cmp	r2, r3
 8003584:	d047      	beq.n	8003616 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	73fb      	strb	r3, [r7, #15]
 800358a:	e044      	b.n	8003616 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2b03      	cmp	r3, #3
 8003592:	d018      	beq.n	80035c6 <RCCEx_PLLSAI1_Config+0x86>
 8003594:	2b03      	cmp	r3, #3
 8003596:	d825      	bhi.n	80035e4 <RCCEx_PLLSAI1_Config+0xa4>
 8003598:	2b01      	cmp	r3, #1
 800359a:	d002      	beq.n	80035a2 <RCCEx_PLLSAI1_Config+0x62>
 800359c:	2b02      	cmp	r3, #2
 800359e:	d009      	beq.n	80035b4 <RCCEx_PLLSAI1_Config+0x74>
 80035a0:	e020      	b.n	80035e4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80035a2:	4b5f      	ldr	r3, [pc, #380]	; (8003720 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d11d      	bne.n	80035ea <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035b2:	e01a      	b.n	80035ea <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80035b4:	4b5a      	ldr	r3, [pc, #360]	; (8003720 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d116      	bne.n	80035ee <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035c4:	e013      	b.n	80035ee <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80035c6:	4b56      	ldr	r3, [pc, #344]	; (8003720 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d10f      	bne.n	80035f2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80035d2:	4b53      	ldr	r3, [pc, #332]	; (8003720 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d109      	bne.n	80035f2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80035e2:	e006      	b.n	80035f2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	73fb      	strb	r3, [r7, #15]
      break;
 80035e8:	e004      	b.n	80035f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80035ea:	bf00      	nop
 80035ec:	e002      	b.n	80035f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80035ee:	bf00      	nop
 80035f0:	e000      	b.n	80035f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80035f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80035f4:	7bfb      	ldrb	r3, [r7, #15]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d10d      	bne.n	8003616 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80035fa:	4b49      	ldr	r3, [pc, #292]	; (8003720 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6819      	ldr	r1, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	3b01      	subs	r3, #1
 800360c:	011b      	lsls	r3, r3, #4
 800360e:	430b      	orrs	r3, r1
 8003610:	4943      	ldr	r1, [pc, #268]	; (8003720 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003612:	4313      	orrs	r3, r2
 8003614:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003616:	7bfb      	ldrb	r3, [r7, #15]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d17c      	bne.n	8003716 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800361c:	4b40      	ldr	r3, [pc, #256]	; (8003720 <RCCEx_PLLSAI1_Config+0x1e0>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a3f      	ldr	r2, [pc, #252]	; (8003720 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003622:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003626:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003628:	f7fd fba0 	bl	8000d6c <HAL_GetTick>
 800362c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800362e:	e009      	b.n	8003644 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003630:	f7fd fb9c 	bl	8000d6c <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b02      	cmp	r3, #2
 800363c:	d902      	bls.n	8003644 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	73fb      	strb	r3, [r7, #15]
        break;
 8003642:	e005      	b.n	8003650 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003644:	4b36      	ldr	r3, [pc, #216]	; (8003720 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1ef      	bne.n	8003630 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003650:	7bfb      	ldrb	r3, [r7, #15]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d15f      	bne.n	8003716 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d110      	bne.n	800367e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800365c:	4b30      	ldr	r3, [pc, #192]	; (8003720 <RCCEx_PLLSAI1_Config+0x1e0>)
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003664:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	6892      	ldr	r2, [r2, #8]
 800366c:	0211      	lsls	r1, r2, #8
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	68d2      	ldr	r2, [r2, #12]
 8003672:	06d2      	lsls	r2, r2, #27
 8003674:	430a      	orrs	r2, r1
 8003676:	492a      	ldr	r1, [pc, #168]	; (8003720 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003678:	4313      	orrs	r3, r2
 800367a:	610b      	str	r3, [r1, #16]
 800367c:	e027      	b.n	80036ce <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d112      	bne.n	80036aa <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003684:	4b26      	ldr	r3, [pc, #152]	; (8003720 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800368c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	6892      	ldr	r2, [r2, #8]
 8003694:	0211      	lsls	r1, r2, #8
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	6912      	ldr	r2, [r2, #16]
 800369a:	0852      	lsrs	r2, r2, #1
 800369c:	3a01      	subs	r2, #1
 800369e:	0552      	lsls	r2, r2, #21
 80036a0:	430a      	orrs	r2, r1
 80036a2:	491f      	ldr	r1, [pc, #124]	; (8003720 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	610b      	str	r3, [r1, #16]
 80036a8:	e011      	b.n	80036ce <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036aa:	4b1d      	ldr	r3, [pc, #116]	; (8003720 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80036b2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	6892      	ldr	r2, [r2, #8]
 80036ba:	0211      	lsls	r1, r2, #8
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	6952      	ldr	r2, [r2, #20]
 80036c0:	0852      	lsrs	r2, r2, #1
 80036c2:	3a01      	subs	r2, #1
 80036c4:	0652      	lsls	r2, r2, #25
 80036c6:	430a      	orrs	r2, r1
 80036c8:	4915      	ldr	r1, [pc, #84]	; (8003720 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80036ce:	4b14      	ldr	r3, [pc, #80]	; (8003720 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a13      	ldr	r2, [pc, #76]	; (8003720 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80036d8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036da:	f7fd fb47 	bl	8000d6c <HAL_GetTick>
 80036de:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80036e0:	e009      	b.n	80036f6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036e2:	f7fd fb43 	bl	8000d6c <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d902      	bls.n	80036f6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	73fb      	strb	r3, [r7, #15]
          break;
 80036f4:	e005      	b.n	8003702 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80036f6:	4b0a      	ldr	r3, [pc, #40]	; (8003720 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d0ef      	beq.n	80036e2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003702:	7bfb      	ldrb	r3, [r7, #15]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d106      	bne.n	8003716 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003708:	4b05      	ldr	r3, [pc, #20]	; (8003720 <RCCEx_PLLSAI1_Config+0x1e0>)
 800370a:	691a      	ldr	r2, [r3, #16]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	699b      	ldr	r3, [r3, #24]
 8003710:	4903      	ldr	r1, [pc, #12]	; (8003720 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003712:	4313      	orrs	r3, r2
 8003714:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003716:	7bfb      	ldrb	r3, [r7, #15]
}
 8003718:	4618      	mov	r0, r3
 800371a:	3710      	adds	r7, #16
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	40021000 	.word	0x40021000

08003724 <__libc_init_array>:
 8003724:	b570      	push	{r4, r5, r6, lr}
 8003726:	4d0d      	ldr	r5, [pc, #52]	; (800375c <__libc_init_array+0x38>)
 8003728:	4c0d      	ldr	r4, [pc, #52]	; (8003760 <__libc_init_array+0x3c>)
 800372a:	1b64      	subs	r4, r4, r5
 800372c:	10a4      	asrs	r4, r4, #2
 800372e:	2600      	movs	r6, #0
 8003730:	42a6      	cmp	r6, r4
 8003732:	d109      	bne.n	8003748 <__libc_init_array+0x24>
 8003734:	4d0b      	ldr	r5, [pc, #44]	; (8003764 <__libc_init_array+0x40>)
 8003736:	4c0c      	ldr	r4, [pc, #48]	; (8003768 <__libc_init_array+0x44>)
 8003738:	f000 f820 	bl	800377c <_init>
 800373c:	1b64      	subs	r4, r4, r5
 800373e:	10a4      	asrs	r4, r4, #2
 8003740:	2600      	movs	r6, #0
 8003742:	42a6      	cmp	r6, r4
 8003744:	d105      	bne.n	8003752 <__libc_init_array+0x2e>
 8003746:	bd70      	pop	{r4, r5, r6, pc}
 8003748:	f855 3b04 	ldr.w	r3, [r5], #4
 800374c:	4798      	blx	r3
 800374e:	3601      	adds	r6, #1
 8003750:	e7ee      	b.n	8003730 <__libc_init_array+0xc>
 8003752:	f855 3b04 	ldr.w	r3, [r5], #4
 8003756:	4798      	blx	r3
 8003758:	3601      	adds	r6, #1
 800375a:	e7f2      	b.n	8003742 <__libc_init_array+0x1e>
 800375c:	080037d4 	.word	0x080037d4
 8003760:	080037d4 	.word	0x080037d4
 8003764:	080037d4 	.word	0x080037d4
 8003768:	080037d8 	.word	0x080037d8

0800376c <memset>:
 800376c:	4402      	add	r2, r0
 800376e:	4603      	mov	r3, r0
 8003770:	4293      	cmp	r3, r2
 8003772:	d100      	bne.n	8003776 <memset+0xa>
 8003774:	4770      	bx	lr
 8003776:	f803 1b01 	strb.w	r1, [r3], #1
 800377a:	e7f9      	b.n	8003770 <memset+0x4>

0800377c <_init>:
 800377c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800377e:	bf00      	nop
 8003780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003782:	bc08      	pop	{r3}
 8003784:	469e      	mov	lr, r3
 8003786:	4770      	bx	lr

08003788 <_fini>:
 8003788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800378a:	bf00      	nop
 800378c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800378e:	bc08      	pop	{r3}
 8003790:	469e      	mov	lr, r3
 8003792:	4770      	bx	lr
