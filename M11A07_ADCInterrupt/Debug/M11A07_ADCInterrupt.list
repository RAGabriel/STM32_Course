
M11A07_ADCInterrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037fc  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800398c  0800398c  0001398c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039cc  080039cc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080039cc  080039cc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080039cc  080039cc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039cc  080039cc  000139cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039d0  080039d0  000139d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080039d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  2000000c  080039e0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  080039e0  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a872  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bcf  00000000  00000000  0002a8ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a00  00000000  00000000  0002c480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000918  00000000  00000000  0002ce80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002018e  00000000  00000000  0002d798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a8c7  00000000  00000000  0004d926  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6e50  00000000  00000000  000581ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011f03d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028cc  00000000  00000000  0011f090  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000000c 	.word	0x2000000c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003974 	.word	0x08003974

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000010 	.word	0x20000010
 80001cc:	08003974 	.word	0x08003974

080001d0 <__aeabi_dmul>:
 80001d0:	b570      	push	{r4, r5, r6, lr}
 80001d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001de:	bf1d      	ittte	ne
 80001e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001e4:	ea94 0f0c 	teqne	r4, ip
 80001e8:	ea95 0f0c 	teqne	r5, ip
 80001ec:	f000 f8de 	bleq	80003ac <__aeabi_dmul+0x1dc>
 80001f0:	442c      	add	r4, r5
 80001f2:	ea81 0603 	eor.w	r6, r1, r3
 80001f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000202:	bf18      	it	ne
 8000204:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000208:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800020c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000210:	d038      	beq.n	8000284 <__aeabi_dmul+0xb4>
 8000212:	fba0 ce02 	umull	ip, lr, r0, r2
 8000216:	f04f 0500 	mov.w	r5, #0
 800021a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800021e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000222:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000226:	f04f 0600 	mov.w	r6, #0
 800022a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800022e:	f09c 0f00 	teq	ip, #0
 8000232:	bf18      	it	ne
 8000234:	f04e 0e01 	orrne.w	lr, lr, #1
 8000238:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800023c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000240:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000244:	d204      	bcs.n	8000250 <__aeabi_dmul+0x80>
 8000246:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800024a:	416d      	adcs	r5, r5
 800024c:	eb46 0606 	adc.w	r6, r6, r6
 8000250:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000254:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000258:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800025c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000260:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000264:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000268:	bf88      	it	hi
 800026a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800026e:	d81e      	bhi.n	80002ae <__aeabi_dmul+0xde>
 8000270:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000274:	bf08      	it	eq
 8000276:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800027a:	f150 0000 	adcs.w	r0, r0, #0
 800027e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000288:	ea46 0101 	orr.w	r1, r6, r1
 800028c:	ea40 0002 	orr.w	r0, r0, r2
 8000290:	ea81 0103 	eor.w	r1, r1, r3
 8000294:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000298:	bfc2      	ittt	gt
 800029a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800029e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002a2:	bd70      	popgt	{r4, r5, r6, pc}
 80002a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a8:	f04f 0e00 	mov.w	lr, #0
 80002ac:	3c01      	subs	r4, #1
 80002ae:	f300 80ab 	bgt.w	8000408 <__aeabi_dmul+0x238>
 80002b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002b6:	bfde      	ittt	le
 80002b8:	2000      	movle	r0, #0
 80002ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002be:	bd70      	pople	{r4, r5, r6, pc}
 80002c0:	f1c4 0400 	rsb	r4, r4, #0
 80002c4:	3c20      	subs	r4, #32
 80002c6:	da35      	bge.n	8000334 <__aeabi_dmul+0x164>
 80002c8:	340c      	adds	r4, #12
 80002ca:	dc1b      	bgt.n	8000304 <__aeabi_dmul+0x134>
 80002cc:	f104 0414 	add.w	r4, r4, #20
 80002d0:	f1c4 0520 	rsb	r5, r4, #32
 80002d4:	fa00 f305 	lsl.w	r3, r0, r5
 80002d8:	fa20 f004 	lsr.w	r0, r0, r4
 80002dc:	fa01 f205 	lsl.w	r2, r1, r5
 80002e0:	ea40 0002 	orr.w	r0, r0, r2
 80002e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f0:	fa21 f604 	lsr.w	r6, r1, r4
 80002f4:	eb42 0106 	adc.w	r1, r2, r6
 80002f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002fc:	bf08      	it	eq
 80002fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000302:	bd70      	pop	{r4, r5, r6, pc}
 8000304:	f1c4 040c 	rsb	r4, r4, #12
 8000308:	f1c4 0520 	rsb	r5, r4, #32
 800030c:	fa00 f304 	lsl.w	r3, r0, r4
 8000310:	fa20 f005 	lsr.w	r0, r0, r5
 8000314:	fa01 f204 	lsl.w	r2, r1, r4
 8000318:	ea40 0002 	orr.w	r0, r0, r2
 800031c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000320:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000324:	f141 0100 	adc.w	r1, r1, #0
 8000328:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800032c:	bf08      	it	eq
 800032e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f1c4 0520 	rsb	r5, r4, #32
 8000338:	fa00 f205 	lsl.w	r2, r0, r5
 800033c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000340:	fa20 f304 	lsr.w	r3, r0, r4
 8000344:	fa01 f205 	lsl.w	r2, r1, r5
 8000348:	ea43 0302 	orr.w	r3, r3, r2
 800034c:	fa21 f004 	lsr.w	r0, r1, r4
 8000350:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000354:	fa21 f204 	lsr.w	r2, r1, r4
 8000358:	ea20 0002 	bic.w	r0, r0, r2
 800035c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f094 0f00 	teq	r4, #0
 8000370:	d10f      	bne.n	8000392 <__aeabi_dmul+0x1c2>
 8000372:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000376:	0040      	lsls	r0, r0, #1
 8000378:	eb41 0101 	adc.w	r1, r1, r1
 800037c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000380:	bf08      	it	eq
 8000382:	3c01      	subeq	r4, #1
 8000384:	d0f7      	beq.n	8000376 <__aeabi_dmul+0x1a6>
 8000386:	ea41 0106 	orr.w	r1, r1, r6
 800038a:	f095 0f00 	teq	r5, #0
 800038e:	bf18      	it	ne
 8000390:	4770      	bxne	lr
 8000392:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000396:	0052      	lsls	r2, r2, #1
 8000398:	eb43 0303 	adc.w	r3, r3, r3
 800039c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a0:	bf08      	it	eq
 80003a2:	3d01      	subeq	r5, #1
 80003a4:	d0f7      	beq.n	8000396 <__aeabi_dmul+0x1c6>
 80003a6:	ea43 0306 	orr.w	r3, r3, r6
 80003aa:	4770      	bx	lr
 80003ac:	ea94 0f0c 	teq	r4, ip
 80003b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003b4:	bf18      	it	ne
 80003b6:	ea95 0f0c 	teqne	r5, ip
 80003ba:	d00c      	beq.n	80003d6 <__aeabi_dmul+0x206>
 80003bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c0:	bf18      	it	ne
 80003c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003c6:	d1d1      	bne.n	800036c <__aeabi_dmul+0x19c>
 80003c8:	ea81 0103 	eor.w	r1, r1, r3
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	f04f 0000 	mov.w	r0, #0
 80003d4:	bd70      	pop	{r4, r5, r6, pc}
 80003d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003da:	bf06      	itte	eq
 80003dc:	4610      	moveq	r0, r2
 80003de:	4619      	moveq	r1, r3
 80003e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003e4:	d019      	beq.n	800041a <__aeabi_dmul+0x24a>
 80003e6:	ea94 0f0c 	teq	r4, ip
 80003ea:	d102      	bne.n	80003f2 <__aeabi_dmul+0x222>
 80003ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f0:	d113      	bne.n	800041a <__aeabi_dmul+0x24a>
 80003f2:	ea95 0f0c 	teq	r5, ip
 80003f6:	d105      	bne.n	8000404 <__aeabi_dmul+0x234>
 80003f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003fc:	bf1c      	itt	ne
 80003fe:	4610      	movne	r0, r2
 8000400:	4619      	movne	r1, r3
 8000402:	d10a      	bne.n	800041a <__aeabi_dmul+0x24a>
 8000404:	ea81 0103 	eor.w	r1, r1, r3
 8000408:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800040c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000410:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000414:	f04f 0000 	mov.w	r0, #0
 8000418:	bd70      	pop	{r4, r5, r6, pc}
 800041a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800041e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000422:	bd70      	pop	{r4, r5, r6, pc}

08000424 <__aeabi_drsub>:
 8000424:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000428:	e002      	b.n	8000430 <__adddf3>
 800042a:	bf00      	nop

0800042c <__aeabi_dsub>:
 800042c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000430 <__adddf3>:
 8000430:	b530      	push	{r4, r5, lr}
 8000432:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000436:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800043a:	ea94 0f05 	teq	r4, r5
 800043e:	bf08      	it	eq
 8000440:	ea90 0f02 	teqeq	r0, r2
 8000444:	bf1f      	itttt	ne
 8000446:	ea54 0c00 	orrsne.w	ip, r4, r0
 800044a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800044e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000452:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000456:	f000 80e2 	beq.w	800061e <__adddf3+0x1ee>
 800045a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800045e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000462:	bfb8      	it	lt
 8000464:	426d      	neglt	r5, r5
 8000466:	dd0c      	ble.n	8000482 <__adddf3+0x52>
 8000468:	442c      	add	r4, r5
 800046a:	ea80 0202 	eor.w	r2, r0, r2
 800046e:	ea81 0303 	eor.w	r3, r1, r3
 8000472:	ea82 0000 	eor.w	r0, r2, r0
 8000476:	ea83 0101 	eor.w	r1, r3, r1
 800047a:	ea80 0202 	eor.w	r2, r0, r2
 800047e:	ea81 0303 	eor.w	r3, r1, r3
 8000482:	2d36      	cmp	r5, #54	; 0x36
 8000484:	bf88      	it	hi
 8000486:	bd30      	pophi	{r4, r5, pc}
 8000488:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800048c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000490:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000494:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000498:	d002      	beq.n	80004a0 <__adddf3+0x70>
 800049a:	4240      	negs	r0, r0
 800049c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004ac:	d002      	beq.n	80004b4 <__adddf3+0x84>
 80004ae:	4252      	negs	r2, r2
 80004b0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004b4:	ea94 0f05 	teq	r4, r5
 80004b8:	f000 80a7 	beq.w	800060a <__adddf3+0x1da>
 80004bc:	f1a4 0401 	sub.w	r4, r4, #1
 80004c0:	f1d5 0e20 	rsbs	lr, r5, #32
 80004c4:	db0d      	blt.n	80004e2 <__adddf3+0xb2>
 80004c6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004ca:	fa22 f205 	lsr.w	r2, r2, r5
 80004ce:	1880      	adds	r0, r0, r2
 80004d0:	f141 0100 	adc.w	r1, r1, #0
 80004d4:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d8:	1880      	adds	r0, r0, r2
 80004da:	fa43 f305 	asr.w	r3, r3, r5
 80004de:	4159      	adcs	r1, r3
 80004e0:	e00e      	b.n	8000500 <__adddf3+0xd0>
 80004e2:	f1a5 0520 	sub.w	r5, r5, #32
 80004e6:	f10e 0e20 	add.w	lr, lr, #32
 80004ea:	2a01      	cmp	r2, #1
 80004ec:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f0:	bf28      	it	cs
 80004f2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004f6:	fa43 f305 	asr.w	r3, r3, r5
 80004fa:	18c0      	adds	r0, r0, r3
 80004fc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	d507      	bpl.n	8000516 <__adddf3+0xe6>
 8000506:	f04f 0e00 	mov.w	lr, #0
 800050a:	f1dc 0c00 	rsbs	ip, ip, #0
 800050e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000512:	eb6e 0101 	sbc.w	r1, lr, r1
 8000516:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800051a:	d31b      	bcc.n	8000554 <__adddf3+0x124>
 800051c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000520:	d30c      	bcc.n	800053c <__adddf3+0x10c>
 8000522:	0849      	lsrs	r1, r1, #1
 8000524:	ea5f 0030 	movs.w	r0, r0, rrx
 8000528:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800052c:	f104 0401 	add.w	r4, r4, #1
 8000530:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000534:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000538:	f080 809a 	bcs.w	8000670 <__adddf3+0x240>
 800053c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000540:	bf08      	it	eq
 8000542:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000546:	f150 0000 	adcs.w	r0, r0, #0
 800054a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800054e:	ea41 0105 	orr.w	r1, r1, r5
 8000552:	bd30      	pop	{r4, r5, pc}
 8000554:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000558:	4140      	adcs	r0, r0
 800055a:	eb41 0101 	adc.w	r1, r1, r1
 800055e:	3c01      	subs	r4, #1
 8000560:	bf28      	it	cs
 8000562:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000566:	d2e9      	bcs.n	800053c <__adddf3+0x10c>
 8000568:	f091 0f00 	teq	r1, #0
 800056c:	bf04      	itt	eq
 800056e:	4601      	moveq	r1, r0
 8000570:	2000      	moveq	r0, #0
 8000572:	fab1 f381 	clz	r3, r1
 8000576:	bf08      	it	eq
 8000578:	3320      	addeq	r3, #32
 800057a:	f1a3 030b 	sub.w	r3, r3, #11
 800057e:	f1b3 0220 	subs.w	r2, r3, #32
 8000582:	da0c      	bge.n	800059e <__adddf3+0x16e>
 8000584:	320c      	adds	r2, #12
 8000586:	dd08      	ble.n	800059a <__adddf3+0x16a>
 8000588:	f102 0c14 	add.w	ip, r2, #20
 800058c:	f1c2 020c 	rsb	r2, r2, #12
 8000590:	fa01 f00c 	lsl.w	r0, r1, ip
 8000594:	fa21 f102 	lsr.w	r1, r1, r2
 8000598:	e00c      	b.n	80005b4 <__adddf3+0x184>
 800059a:	f102 0214 	add.w	r2, r2, #20
 800059e:	bfd8      	it	le
 80005a0:	f1c2 0c20 	rsble	ip, r2, #32
 80005a4:	fa01 f102 	lsl.w	r1, r1, r2
 80005a8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005ac:	bfdc      	itt	le
 80005ae:	ea41 010c 	orrle.w	r1, r1, ip
 80005b2:	4090      	lslle	r0, r2
 80005b4:	1ae4      	subs	r4, r4, r3
 80005b6:	bfa2      	ittt	ge
 80005b8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005bc:	4329      	orrge	r1, r5
 80005be:	bd30      	popge	{r4, r5, pc}
 80005c0:	ea6f 0404 	mvn.w	r4, r4
 80005c4:	3c1f      	subs	r4, #31
 80005c6:	da1c      	bge.n	8000602 <__adddf3+0x1d2>
 80005c8:	340c      	adds	r4, #12
 80005ca:	dc0e      	bgt.n	80005ea <__adddf3+0x1ba>
 80005cc:	f104 0414 	add.w	r4, r4, #20
 80005d0:	f1c4 0220 	rsb	r2, r4, #32
 80005d4:	fa20 f004 	lsr.w	r0, r0, r4
 80005d8:	fa01 f302 	lsl.w	r3, r1, r2
 80005dc:	ea40 0003 	orr.w	r0, r0, r3
 80005e0:	fa21 f304 	lsr.w	r3, r1, r4
 80005e4:	ea45 0103 	orr.w	r1, r5, r3
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	f1c4 040c 	rsb	r4, r4, #12
 80005ee:	f1c4 0220 	rsb	r2, r4, #32
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 f304 	lsl.w	r3, r1, r4
 80005fa:	ea40 0003 	orr.w	r0, r0, r3
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	fa21 f004 	lsr.w	r0, r1, r4
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	f094 0f00 	teq	r4, #0
 800060e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000612:	bf06      	itte	eq
 8000614:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000618:	3401      	addeq	r4, #1
 800061a:	3d01      	subne	r5, #1
 800061c:	e74e      	b.n	80004bc <__adddf3+0x8c>
 800061e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000622:	bf18      	it	ne
 8000624:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000628:	d029      	beq.n	800067e <__adddf3+0x24e>
 800062a:	ea94 0f05 	teq	r4, r5
 800062e:	bf08      	it	eq
 8000630:	ea90 0f02 	teqeq	r0, r2
 8000634:	d005      	beq.n	8000642 <__adddf3+0x212>
 8000636:	ea54 0c00 	orrs.w	ip, r4, r0
 800063a:	bf04      	itt	eq
 800063c:	4619      	moveq	r1, r3
 800063e:	4610      	moveq	r0, r2
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	ea91 0f03 	teq	r1, r3
 8000646:	bf1e      	ittt	ne
 8000648:	2100      	movne	r1, #0
 800064a:	2000      	movne	r0, #0
 800064c:	bd30      	popne	{r4, r5, pc}
 800064e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000652:	d105      	bne.n	8000660 <__adddf3+0x230>
 8000654:	0040      	lsls	r0, r0, #1
 8000656:	4149      	adcs	r1, r1
 8000658:	bf28      	it	cs
 800065a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800065e:	bd30      	pop	{r4, r5, pc}
 8000660:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000664:	bf3c      	itt	cc
 8000666:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800066a:	bd30      	popcc	{r4, r5, pc}
 800066c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000670:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000674:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000678:	f04f 0000 	mov.w	r0, #0
 800067c:	bd30      	pop	{r4, r5, pc}
 800067e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000682:	bf1a      	itte	ne
 8000684:	4619      	movne	r1, r3
 8000686:	4610      	movne	r0, r2
 8000688:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800068c:	bf1c      	itt	ne
 800068e:	460b      	movne	r3, r1
 8000690:	4602      	movne	r2, r0
 8000692:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000696:	bf06      	itte	eq
 8000698:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800069c:	ea91 0f03 	teqeq	r1, r3
 80006a0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006a4:	bd30      	pop	{r4, r5, pc}
 80006a6:	bf00      	nop

080006a8 <__aeabi_ui2d>:
 80006a8:	f090 0f00 	teq	r0, #0
 80006ac:	bf04      	itt	eq
 80006ae:	2100      	moveq	r1, #0
 80006b0:	4770      	bxeq	lr
 80006b2:	b530      	push	{r4, r5, lr}
 80006b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006bc:	f04f 0500 	mov.w	r5, #0
 80006c0:	f04f 0100 	mov.w	r1, #0
 80006c4:	e750      	b.n	8000568 <__adddf3+0x138>
 80006c6:	bf00      	nop

080006c8 <__aeabi_i2d>:
 80006c8:	f090 0f00 	teq	r0, #0
 80006cc:	bf04      	itt	eq
 80006ce:	2100      	moveq	r1, #0
 80006d0:	4770      	bxeq	lr
 80006d2:	b530      	push	{r4, r5, lr}
 80006d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006dc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e0:	bf48      	it	mi
 80006e2:	4240      	negmi	r0, r0
 80006e4:	f04f 0100 	mov.w	r1, #0
 80006e8:	e73e      	b.n	8000568 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_f2d>:
 80006ec:	0042      	lsls	r2, r0, #1
 80006ee:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006fa:	bf1f      	itttt	ne
 80006fc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000700:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000704:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000708:	4770      	bxne	lr
 800070a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800070e:	bf08      	it	eq
 8000710:	4770      	bxeq	lr
 8000712:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000716:	bf04      	itt	eq
 8000718:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800071c:	4770      	bxeq	lr
 800071e:	b530      	push	{r4, r5, lr}
 8000720:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000724:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000728:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800072c:	e71c      	b.n	8000568 <__adddf3+0x138>
 800072e:	bf00      	nop

08000730 <__aeabi_ul2d>:
 8000730:	ea50 0201 	orrs.w	r2, r0, r1
 8000734:	bf08      	it	eq
 8000736:	4770      	bxeq	lr
 8000738:	b530      	push	{r4, r5, lr}
 800073a:	f04f 0500 	mov.w	r5, #0
 800073e:	e00a      	b.n	8000756 <__aeabi_l2d+0x16>

08000740 <__aeabi_l2d>:
 8000740:	ea50 0201 	orrs.w	r2, r0, r1
 8000744:	bf08      	it	eq
 8000746:	4770      	bxeq	lr
 8000748:	b530      	push	{r4, r5, lr}
 800074a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800074e:	d502      	bpl.n	8000756 <__aeabi_l2d+0x16>
 8000750:	4240      	negs	r0, r0
 8000752:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000756:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800075a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000762:	f43f aed8 	beq.w	8000516 <__adddf3+0xe6>
 8000766:	f04f 0203 	mov.w	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800077e:	f1c2 0320 	rsb	r3, r2, #32
 8000782:	fa00 fc03 	lsl.w	ip, r0, r3
 8000786:	fa20 f002 	lsr.w	r0, r0, r2
 800078a:	fa01 fe03 	lsl.w	lr, r1, r3
 800078e:	ea40 000e 	orr.w	r0, r0, lr
 8000792:	fa21 f102 	lsr.w	r1, r1, r2
 8000796:	4414      	add	r4, r2
 8000798:	e6bd      	b.n	8000516 <__adddf3+0xe6>
 800079a:	bf00      	nop

0800079c <__aeabi_d2f>:
 800079c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007a0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007a4:	bf24      	itt	cs
 80007a6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007aa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007ae:	d90d      	bls.n	80007cc <__aeabi_d2f+0x30>
 80007b0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007b4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007b8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007bc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007c0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007c4:	bf08      	it	eq
 80007c6:	f020 0001 	biceq.w	r0, r0, #1
 80007ca:	4770      	bx	lr
 80007cc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007d0:	d121      	bne.n	8000816 <__aeabi_d2f+0x7a>
 80007d2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007d6:	bfbc      	itt	lt
 80007d8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007dc:	4770      	bxlt	lr
 80007de:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007e6:	f1c2 0218 	rsb	r2, r2, #24
 80007ea:	f1c2 0c20 	rsb	ip, r2, #32
 80007ee:	fa10 f30c 	lsls.w	r3, r0, ip
 80007f2:	fa20 f002 	lsr.w	r0, r0, r2
 80007f6:	bf18      	it	ne
 80007f8:	f040 0001 	orrne.w	r0, r0, #1
 80007fc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000800:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000804:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000808:	ea40 000c 	orr.w	r0, r0, ip
 800080c:	fa23 f302 	lsr.w	r3, r3, r2
 8000810:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000814:	e7cc      	b.n	80007b0 <__aeabi_d2f+0x14>
 8000816:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800081a:	d107      	bne.n	800082c <__aeabi_d2f+0x90>
 800081c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000820:	bf1e      	ittt	ne
 8000822:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000826:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800082a:	4770      	bxne	lr
 800082c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000830:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000834:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop

0800083c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000842:	463b      	mov	r3, r7
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	611a      	str	r2, [r3, #16]
 8000850:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000852:	4b29      	ldr	r3, [pc, #164]	; (80008f8 <MX_ADC1_Init+0xbc>)
 8000854:	4a29      	ldr	r2, [pc, #164]	; (80008fc <MX_ADC1_Init+0xc0>)
 8000856:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000858:	4b27      	ldr	r3, [pc, #156]	; (80008f8 <MX_ADC1_Init+0xbc>)
 800085a:	2200      	movs	r2, #0
 800085c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 800085e:	4b26      	ldr	r3, [pc, #152]	; (80008f8 <MX_ADC1_Init+0xbc>)
 8000860:	2208      	movs	r2, #8
 8000862:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000864:	4b24      	ldr	r3, [pc, #144]	; (80008f8 <MX_ADC1_Init+0xbc>)
 8000866:	2200      	movs	r2, #0
 8000868:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800086a:	4b23      	ldr	r3, [pc, #140]	; (80008f8 <MX_ADC1_Init+0xbc>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000870:	4b21      	ldr	r3, [pc, #132]	; (80008f8 <MX_ADC1_Init+0xbc>)
 8000872:	2204      	movs	r2, #4
 8000874:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000876:	4b20      	ldr	r3, [pc, #128]	; (80008f8 <MX_ADC1_Init+0xbc>)
 8000878:	2200      	movs	r2, #0
 800087a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800087c:	4b1e      	ldr	r3, [pc, #120]	; (80008f8 <MX_ADC1_Init+0xbc>)
 800087e:	2201      	movs	r2, #1
 8000880:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000882:	4b1d      	ldr	r3, [pc, #116]	; (80008f8 <MX_ADC1_Init+0xbc>)
 8000884:	2201      	movs	r2, #1
 8000886:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000888:	4b1b      	ldr	r3, [pc, #108]	; (80008f8 <MX_ADC1_Init+0xbc>)
 800088a:	2200      	movs	r2, #0
 800088c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000890:	4b19      	ldr	r3, [pc, #100]	; (80008f8 <MX_ADC1_Init+0xbc>)
 8000892:	2200      	movs	r2, #0
 8000894:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000896:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <MX_ADC1_Init+0xbc>)
 8000898:	2200      	movs	r2, #0
 800089a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800089c:	4b16      	ldr	r3, [pc, #88]	; (80008f8 <MX_ADC1_Init+0xbc>)
 800089e:	2200      	movs	r2, #0
 80008a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008a4:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <MX_ADC1_Init+0xbc>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80008aa:	4b13      	ldr	r3, [pc, #76]	; (80008f8 <MX_ADC1_Init+0xbc>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008b2:	4811      	ldr	r0, [pc, #68]	; (80008f8 <MX_ADC1_Init+0xbc>)
 80008b4:	f000 fc00 	bl	80010b8 <HAL_ADC_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80008be:	f000 f914 	bl	8000aea <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80008c2:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <MX_ADC1_Init+0xc4>)
 80008c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008c6:	2306      	movs	r3, #6
 80008c8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 80008ca:	2304      	movs	r3, #4
 80008cc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008ce:	237f      	movs	r3, #127	; 0x7f
 80008d0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008d2:	2304      	movs	r3, #4
 80008d4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008da:	463b      	mov	r3, r7
 80008dc:	4619      	mov	r1, r3
 80008de:	4806      	ldr	r0, [pc, #24]	; (80008f8 <MX_ADC1_Init+0xbc>)
 80008e0:	f000 ffbc 	bl	800185c <HAL_ADC_ConfigChannel>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80008ea:	f000 f8fe 	bl	8000aea <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008ee:	bf00      	nop
 80008f0:	3718      	adds	r7, #24
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	20000028 	.word	0x20000028
 80008fc:	50040000 	.word	0x50040000
 8000900:	14f00020 	.word	0x14f00020

08000904 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b09e      	sub	sp, #120	; 0x78
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
 800091a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800091c:	f107 0310 	add.w	r3, r7, #16
 8000920:	2254      	movs	r2, #84	; 0x54
 8000922:	2100      	movs	r1, #0
 8000924:	4618      	mov	r0, r3
 8000926:	f003 f81d 	bl	8003964 <memset>
  if(adcHandle->Instance==ADC1)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4a22      	ldr	r2, [pc, #136]	; (80009b8 <HAL_ADC_MspInit+0xb4>)
 8000930:	4293      	cmp	r3, r2
 8000932:	d13c      	bne.n	80009ae <HAL_ADC_MspInit+0xaa>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000934:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000938:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800093a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800093e:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000940:	f107 0310 	add.w	r3, r7, #16
 8000944:	4618      	mov	r0, r3
 8000946:	f002 fd01 	bl	800334c <HAL_RCCEx_PeriphCLKConfig>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000950:	f000 f8cb 	bl	8000aea <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000954:	4b19      	ldr	r3, [pc, #100]	; (80009bc <HAL_ADC_MspInit+0xb8>)
 8000956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000958:	4a18      	ldr	r2, [pc, #96]	; (80009bc <HAL_ADC_MspInit+0xb8>)
 800095a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800095e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000960:	4b16      	ldr	r3, [pc, #88]	; (80009bc <HAL_ADC_MspInit+0xb8>)
 8000962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000964:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000968:	60fb      	str	r3, [r7, #12]
 800096a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800096c:	4b13      	ldr	r3, [pc, #76]	; (80009bc <HAL_ADC_MspInit+0xb8>)
 800096e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000970:	4a12      	ldr	r2, [pc, #72]	; (80009bc <HAL_ADC_MspInit+0xb8>)
 8000972:	f043 0301 	orr.w	r3, r3, #1
 8000976:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000978:	4b10      	ldr	r3, [pc, #64]	; (80009bc <HAL_ADC_MspInit+0xb8>)
 800097a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097c:	f003 0301 	and.w	r3, r3, #1
 8000980:	60bb      	str	r3, [r7, #8]
 8000982:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000984:	2301      	movs	r3, #1
 8000986:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000988:	230b      	movs	r3, #11
 800098a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000990:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000994:	4619      	mov	r1, r3
 8000996:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800099a:	f001 fd09 	bl	80023b0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 800099e:	2200      	movs	r2, #0
 80009a0:	2100      	movs	r1, #0
 80009a2:	2012      	movs	r0, #18
 80009a4:	f001 fccd 	bl	8002342 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80009a8:	2012      	movs	r0, #18
 80009aa:	f001 fce6 	bl	800237a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80009ae:	bf00      	nop
 80009b0:	3778      	adds	r7, #120	; 0x78
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	50040000 	.word	0x50040000
 80009bc:	40021000 	.word	0x40021000

080009c0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c6:	4b09      	ldr	r3, [pc, #36]	; (80009ec <MX_GPIO_Init+0x2c>)
 80009c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ca:	4a08      	ldr	r2, [pc, #32]	; (80009ec <MX_GPIO_Init+0x2c>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009d2:	4b06      	ldr	r3, [pc, #24]	; (80009ec <MX_GPIO_Init+0x2c>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]

}
 80009de:	bf00      	nop
 80009e0:	370c      	adds	r7, #12
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	40021000 	.word	0x40021000

080009f0 <HAL_ADC_ConvCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
	uint16_t Raw_Data = HAL_ADC_GetValue(&hadc1);
 80009f8:	480f      	ldr	r0, [pc, #60]	; (8000a38 <HAL_ADC_ConvCpltCallback+0x48>)
 80009fa:	f000 fd5a 	bl	80014b2 <HAL_ADC_GetValue>
 80009fe:	4603      	mov	r3, r0
 8000a00:	81fb      	strh	r3, [r7, #14]
	Voltage = Raw_Data * 0.0032258064516129032258064516129;
 8000a02:	89fb      	ldrh	r3, [r7, #14]
 8000a04:	4618      	mov	r0, r3
 8000a06:	f7ff fe5f 	bl	80006c8 <__aeabi_i2d>
 8000a0a:	a309      	add	r3, pc, #36	; (adr r3, 8000a30 <HAL_ADC_ConvCpltCallback+0x40>)
 8000a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a10:	f7ff fbde 	bl	80001d0 <__aeabi_dmul>
 8000a14:	4602      	mov	r2, r0
 8000a16:	460b      	mov	r3, r1
 8000a18:	4610      	mov	r0, r2
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	f7ff febe 	bl	800079c <__aeabi_d2f>
 8000a20:	4603      	mov	r3, r0
 8000a22:	4a06      	ldr	r2, [pc, #24]	; (8000a3c <HAL_ADC_ConvCpltCallback+0x4c>)
 8000a24:	6013      	str	r3, [r2, #0]
}
 8000a26:	bf00      	nop
 8000a28:	3710      	adds	r7, #16
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	a6d01a6d 	.word	0xa6d01a6d
 8000a34:	3f6a6d01 	.word	0x3f6a6d01
 8000a38:	20000028 	.word	0x20000028
 8000a3c:	2000008c 	.word	0x2000008c

08000a40 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000a44:	f000 f8e9 	bl	8000c1a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000a48:	f000 f80a 	bl	8000a60 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000a4c:	f7ff ffb8 	bl	80009c0 <MX_GPIO_Init>
	MX_ADC1_Init();
 8000a50:	f7ff fef4 	bl	800083c <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */
	HAL_ADC_Start_IT(&hadc1);
 8000a54:	4801      	ldr	r0, [pc, #4]	; (8000a5c <main+0x1c>)
 8000a56:	f000 fc77 	bl	8001348 <HAL_ADC_Start_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000a5a:	e7fe      	b.n	8000a5a <main+0x1a>
 8000a5c:	20000028 	.word	0x20000028

08000a60 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b096      	sub	sp, #88	; 0x58
 8000a64:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000a66:	f107 0314 	add.w	r3, r7, #20
 8000a6a:	2244      	movs	r2, #68	; 0x44
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f002 ff78 	bl	8003964 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000a74:	463b      	mov	r3, r7
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
 8000a80:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 8000a82:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a86:	f001 fe0b 	bl	80026a0 <HAL_PWREx_ControlVoltageScaling>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 8000a90:	f000 f82b 	bl	8000aea <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a94:	2302      	movs	r3, #2
 8000a96:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a9c:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a9e:	2310      	movs	r3, #16
 8000aa0:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000aa6:	f107 0314 	add.w	r3, r7, #20
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f001 fe4e 	bl	800274c <HAL_RCC_OscConfig>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <SystemClock_Config+0x5a>
		Error_Handler();
 8000ab6:	f000 f818 	bl	8000aea <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000aba:	230f      	movs	r3, #15
 8000abc:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aca:	2300      	movs	r3, #0
 8000acc:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000ace:	463b      	mov	r3, r7
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f002 fa4e 	bl	8002f74 <HAL_RCC_ClockConfig>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <SystemClock_Config+0x82>
		Error_Handler();
 8000ade:	f000 f804 	bl	8000aea <Error_Handler>
	}
}
 8000ae2:	bf00      	nop
 8000ae4:	3758      	adds	r7, #88	; 0x58
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aee:	b672      	cpsid	i
}
 8000af0:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000af2:	e7fe      	b.n	8000af2 <Error_Handler+0x8>

08000af4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afa:	4b0f      	ldr	r3, [pc, #60]	; (8000b38 <HAL_MspInit+0x44>)
 8000afc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000afe:	4a0e      	ldr	r2, [pc, #56]	; (8000b38 <HAL_MspInit+0x44>)
 8000b00:	f043 0301 	orr.w	r3, r3, #1
 8000b04:	6613      	str	r3, [r2, #96]	; 0x60
 8000b06:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <HAL_MspInit+0x44>)
 8000b08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b12:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <HAL_MspInit+0x44>)
 8000b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b16:	4a08      	ldr	r2, [pc, #32]	; (8000b38 <HAL_MspInit+0x44>)
 8000b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b1c:	6593      	str	r3, [r2, #88]	; 0x58
 8000b1e:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <HAL_MspInit+0x44>)
 8000b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b26:	603b      	str	r3, [r7, #0]
 8000b28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	40021000 	.word	0x40021000

08000b3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <NMI_Handler+0x4>

08000b42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b46:	e7fe      	b.n	8000b46 <HardFault_Handler+0x4>

08000b48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b4c:	e7fe      	b.n	8000b4c <MemManage_Handler+0x4>

08000b4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b52:	e7fe      	b.n	8000b52 <BusFault_Handler+0x4>

08000b54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b58:	e7fe      	b.n	8000b58 <UsageFault_Handler+0x4>

08000b5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr

08000b68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr

08000b76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b88:	f000 f89c 	bl	8000cc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b8c:	bf00      	nop
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000b94:	4802      	ldr	r0, [pc, #8]	; (8000ba0 <ADC1_IRQHandler+0x10>)
 8000b96:	f000 fc99 	bl	80014cc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20000028 	.word	0x20000028

08000ba4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <SystemInit+0x20>)
 8000baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bae:	4a05      	ldr	r2, [pc, #20]	; (8000bc4 <SystemInit+0x20>)
 8000bb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c00 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bcc:	f7ff ffea 	bl	8000ba4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bd0:	480c      	ldr	r0, [pc, #48]	; (8000c04 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bd2:	490d      	ldr	r1, [pc, #52]	; (8000c08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bd4:	4a0d      	ldr	r2, [pc, #52]	; (8000c0c <LoopForever+0xe>)
  movs r3, #0
 8000bd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd8:	e002      	b.n	8000be0 <LoopCopyDataInit>

08000bda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bde:	3304      	adds	r3, #4

08000be0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000be2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be4:	d3f9      	bcc.n	8000bda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000be6:	4a0a      	ldr	r2, [pc, #40]	; (8000c10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000be8:	4c0a      	ldr	r4, [pc, #40]	; (8000c14 <LoopForever+0x16>)
  movs r3, #0
 8000bea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bec:	e001      	b.n	8000bf2 <LoopFillZerobss>

08000bee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf0:	3204      	adds	r2, #4

08000bf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf4:	d3fb      	bcc.n	8000bee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bf6:	f002 fe91 	bl	800391c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bfa:	f7ff ff21 	bl	8000a40 <main>

08000bfe <LoopForever>:

LoopForever:
    b LoopForever
 8000bfe:	e7fe      	b.n	8000bfe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c00:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000c04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c08:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c0c:	080039d4 	.word	0x080039d4
  ldr r2, =_sbss
 8000c10:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c14:	20000094 	.word	0x20000094

08000c18 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c18:	e7fe      	b.n	8000c18 <CAN1_RX0_IRQHandler>

08000c1a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b082      	sub	sp, #8
 8000c1e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c20:	2300      	movs	r3, #0
 8000c22:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c24:	2003      	movs	r0, #3
 8000c26:	f001 fb81 	bl	800232c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	f000 f80e 	bl	8000c4c <HAL_InitTick>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d002      	beq.n	8000c3c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
 8000c38:	71fb      	strb	r3, [r7, #7]
 8000c3a:	e001      	b.n	8000c40 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c3c:	f7ff ff5a 	bl	8000af4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c40:	79fb      	ldrb	r3, [r7, #7]
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
	...

08000c4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c54:	2300      	movs	r3, #0
 8000c56:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c58:	4b17      	ldr	r3, [pc, #92]	; (8000cb8 <HAL_InitTick+0x6c>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d023      	beq.n	8000ca8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c60:	4b16      	ldr	r3, [pc, #88]	; (8000cbc <HAL_InitTick+0x70>)
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	4b14      	ldr	r3, [pc, #80]	; (8000cb8 <HAL_InitTick+0x6c>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	4619      	mov	r1, r3
 8000c6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c76:	4618      	mov	r0, r3
 8000c78:	f001 fb8d 	bl	8002396 <HAL_SYSTICK_Config>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d10f      	bne.n	8000ca2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2b0f      	cmp	r3, #15
 8000c86:	d809      	bhi.n	8000c9c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	6879      	ldr	r1, [r7, #4]
 8000c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c90:	f001 fb57 	bl	8002342 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c94:	4a0a      	ldr	r2, [pc, #40]	; (8000cc0 <HAL_InitTick+0x74>)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6013      	str	r3, [r2, #0]
 8000c9a:	e007      	b.n	8000cac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	73fb      	strb	r3, [r7, #15]
 8000ca0:	e004      	b.n	8000cac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	73fb      	strb	r3, [r7, #15]
 8000ca6:	e001      	b.n	8000cac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3710      	adds	r7, #16
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	20000008 	.word	0x20000008
 8000cbc:	20000000 	.word	0x20000000
 8000cc0:	20000004 	.word	0x20000004

08000cc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <HAL_IncTick+0x20>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	461a      	mov	r2, r3
 8000cce:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <HAL_IncTick+0x24>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	4a04      	ldr	r2, [pc, #16]	; (8000ce8 <HAL_IncTick+0x24>)
 8000cd6:	6013      	str	r3, [r2, #0]
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	20000008 	.word	0x20000008
 8000ce8:	20000090 	.word	0x20000090

08000cec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf0:	4b03      	ldr	r3, [pc, #12]	; (8000d00 <HAL_GetTick+0x14>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	20000090 	.word	0x20000090

08000d04 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	689b      	ldr	r3, [r3, #8]
 8000d12:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	431a      	orrs	r2, r3
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	609a      	str	r2, [r3, #8]
}
 8000d1e:	bf00      	nop
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr

08000d2a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	b083      	sub	sp, #12
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
 8000d32:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	689b      	ldr	r3, [r3, #8]
 8000d38:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	431a      	orrs	r2, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	609a      	str	r2, [r3, #8]
}
 8000d44:	bf00      	nop
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	689b      	ldr	r3, [r3, #8]
 8000d5c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b087      	sub	sp, #28
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	607a      	str	r2, [r7, #4]
 8000d78:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	3360      	adds	r3, #96	; 0x60
 8000d7e:	461a      	mov	r2, r3
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	4413      	add	r3, r2
 8000d86:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <LL_ADC_SetOffset+0x44>)
 8000d8e:	4013      	ands	r3, r2
 8000d90:	687a      	ldr	r2, [r7, #4]
 8000d92:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000d96:	683a      	ldr	r2, [r7, #0]
 8000d98:	430a      	orrs	r2, r1
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000da4:	bf00      	nop
 8000da6:	371c      	adds	r7, #28
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	03fff000 	.word	0x03fff000

08000db4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	3360      	adds	r3, #96	; 0x60
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	4413      	add	r3, r2
 8000dca:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3714      	adds	r7, #20
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b087      	sub	sp, #28
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	3360      	adds	r3, #96	; 0x60
 8000df0:	461a      	mov	r2, r3
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	4413      	add	r3, r2
 8000df8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	431a      	orrs	r2, r3
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000e0a:	bf00      	nop
 8000e0c:	371c      	adds	r7, #28
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr

08000e16 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000e16:	b480      	push	{r7}
 8000e18:	b083      	sub	sp, #12
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	68db      	ldr	r3, [r3, #12]
 8000e22:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d101      	bne.n	8000e2e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e000      	b.n	8000e30 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000e2e:	2300      	movs	r3, #0
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b087      	sub	sp, #28
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	3330      	adds	r3, #48	; 0x30
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	0a1b      	lsrs	r3, r3, #8
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	f003 030c 	and.w	r3, r3, #12
 8000e58:	4413      	add	r3, r2
 8000e5a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	f003 031f 	and.w	r3, r3, #31
 8000e66:	211f      	movs	r1, #31
 8000e68:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	401a      	ands	r2, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	0e9b      	lsrs	r3, r3, #26
 8000e74:	f003 011f 	and.w	r1, r3, #31
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	f003 031f 	and.w	r3, r3, #31
 8000e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e82:	431a      	orrs	r2, r3
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000e88:	bf00      	nop
 8000e8a:	371c      	adds	r7, #28
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d101      	bne.n	8000eac <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	e000      	b.n	8000eae <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr

08000eba <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	b087      	sub	sp, #28
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	60f8      	str	r0, [r7, #12]
 8000ec2:	60b9      	str	r1, [r7, #8]
 8000ec4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	3314      	adds	r3, #20
 8000eca:	461a      	mov	r2, r3
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	0e5b      	lsrs	r3, r3, #25
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	f003 0304 	and.w	r3, r3, #4
 8000ed6:	4413      	add	r3, r2
 8000ed8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	0d1b      	lsrs	r3, r3, #20
 8000ee2:	f003 031f 	and.w	r3, r3, #31
 8000ee6:	2107      	movs	r1, #7
 8000ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8000eec:	43db      	mvns	r3, r3
 8000eee:	401a      	ands	r2, r3
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	0d1b      	lsrs	r3, r3, #20
 8000ef4:	f003 031f 	and.w	r3, r3, #31
 8000ef8:	6879      	ldr	r1, [r7, #4]
 8000efa:	fa01 f303 	lsl.w	r3, r1, r3
 8000efe:	431a      	orrs	r2, r3
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000f04:	bf00      	nop
 8000f06:	371c      	adds	r7, #28
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	401a      	ands	r2, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f003 0318 	and.w	r3, r3, #24
 8000f32:	4908      	ldr	r1, [pc, #32]	; (8000f54 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000f34:	40d9      	lsrs	r1, r3
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	400b      	ands	r3, r1
 8000f3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f3e:	431a      	orrs	r2, r3
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000f46:	bf00      	nop
 8000f48:	3714      	adds	r7, #20
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	0007ffff 	.word	0x0007ffff

08000f58 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000f68:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f6c:	687a      	ldr	r2, [r7, #4]
 8000f6e:	6093      	str	r3, [r2, #8]
}
 8000f70:	bf00      	nop
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000f8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000f90:	d101      	bne.n	8000f96 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000f92:	2301      	movs	r3, #1
 8000f94:	e000      	b.n	8000f98 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000f96:	2300      	movs	r3, #0
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000fb4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fb8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fdc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000fe0:	d101      	bne.n	8000fe6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e000      	b.n	8000fe8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000fe6:	2300      	movs	r3, #0
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001004:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001008:	f043 0201 	orr.w	r2, r3, #1
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	f003 0301 	and.w	r3, r3, #1
 800102c:	2b01      	cmp	r3, #1
 800102e:	d101      	bne.n	8001034 <LL_ADC_IsEnabled+0x18>
 8001030:	2301      	movs	r3, #1
 8001032:	e000      	b.n	8001036 <LL_ADC_IsEnabled+0x1a>
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001042:	b480      	push	{r7}
 8001044:	b083      	sub	sp, #12
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001052:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001056:	f043 0204 	orr.w	r2, r3, #4
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800105e:	bf00      	nop
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800106a:	b480      	push	{r7}
 800106c:	b083      	sub	sp, #12
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	f003 0304 	and.w	r3, r3, #4
 800107a:	2b04      	cmp	r3, #4
 800107c:	d101      	bne.n	8001082 <LL_ADC_REG_IsConversionOngoing+0x18>
 800107e:	2301      	movs	r3, #1
 8001080:	e000      	b.n	8001084 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001082:	2300      	movs	r3, #0
}
 8001084:	4618      	mov	r0, r3
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	f003 0308 	and.w	r3, r3, #8
 80010a0:	2b08      	cmp	r3, #8
 80010a2:	d101      	bne.n	80010a8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80010a4:	2301      	movs	r3, #1
 80010a6:	e000      	b.n	80010aa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
	...

080010b8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b088      	sub	sp, #32
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010c0:	2300      	movs	r3, #0
 80010c2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d101      	bne.n	80010d2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e12c      	b.n	800132c <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	691b      	ldr	r3, [r3, #16]
 80010d6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d109      	bne.n	80010f4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f7ff fc0f 	bl	8000904 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2200      	movs	r2, #0
 80010ea:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2200      	movs	r2, #0
 80010f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff3f 	bl	8000f7c <LL_ADC_IsDeepPowerDownEnabled>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d004      	beq.n	800110e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff ff25 	bl	8000f58 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff ff5a 	bl	8000fcc <LL_ADC_IsInternalRegulatorEnabled>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d115      	bne.n	800114a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff ff3e 	bl	8000fa4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001128:	4b82      	ldr	r3, [pc, #520]	; (8001334 <HAL_ADC_Init+0x27c>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	099b      	lsrs	r3, r3, #6
 800112e:	4a82      	ldr	r2, [pc, #520]	; (8001338 <HAL_ADC_Init+0x280>)
 8001130:	fba2 2303 	umull	r2, r3, r2, r3
 8001134:	099b      	lsrs	r3, r3, #6
 8001136:	3301      	adds	r3, #1
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800113c:	e002      	b.n	8001144 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	3b01      	subs	r3, #1
 8001142:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d1f9      	bne.n	800113e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff ff3c 	bl	8000fcc <LL_ADC_IsInternalRegulatorEnabled>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d10d      	bne.n	8001176 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800115e:	f043 0210 	orr.w	r2, r3, #16
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800116a:	f043 0201 	orr.w	r2, r3, #1
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff ff75 	bl	800106a <LL_ADC_REG_IsConversionOngoing>
 8001180:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001186:	f003 0310 	and.w	r3, r3, #16
 800118a:	2b00      	cmp	r3, #0
 800118c:	f040 80c5 	bne.w	800131a <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	2b00      	cmp	r3, #0
 8001194:	f040 80c1 	bne.w	800131a <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800119c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80011a0:	f043 0202 	orr.w	r2, r3, #2
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ff35 	bl	800101c <LL_ADC_IsEnabled>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d10b      	bne.n	80011d0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80011b8:	4860      	ldr	r0, [pc, #384]	; (800133c <HAL_ADC_Init+0x284>)
 80011ba:	f7ff ff2f 	bl	800101c <LL_ADC_IsEnabled>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d105      	bne.n	80011d0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	4619      	mov	r1, r3
 80011ca:	485d      	ldr	r0, [pc, #372]	; (8001340 <HAL_ADC_Init+0x288>)
 80011cc:	f7ff fd9a 	bl	8000d04 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	7e5b      	ldrb	r3, [r3, #25]
 80011d4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80011da:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80011e0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80011e6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011ee:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80011f0:	4313      	orrs	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d106      	bne.n	800120c <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001202:	3b01      	subs	r3, #1
 8001204:	045b      	lsls	r3, r3, #17
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4313      	orrs	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001210:	2b00      	cmp	r3, #0
 8001212:	d009      	beq.n	8001228 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001218:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001220:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4313      	orrs	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	68da      	ldr	r2, [r3, #12]
 800122e:	4b45      	ldr	r3, [pc, #276]	; (8001344 <HAL_ADC_Init+0x28c>)
 8001230:	4013      	ands	r3, r2
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	6812      	ldr	r2, [r2, #0]
 8001236:	69b9      	ldr	r1, [r7, #24]
 8001238:	430b      	orrs	r3, r1
 800123a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff ff12 	bl	800106a <LL_ADC_REG_IsConversionOngoing>
 8001246:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff ff1f 	bl	8001090 <LL_ADC_INJ_IsConversionOngoing>
 8001252:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d13d      	bne.n	80012d6 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d13a      	bne.n	80012d6 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001264:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800126c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800126e:	4313      	orrs	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800127c:	f023 0302 	bic.w	r3, r3, #2
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	6812      	ldr	r2, [r2, #0]
 8001284:	69b9      	ldr	r1, [r7, #24]
 8001286:	430b      	orrs	r3, r1
 8001288:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001290:	2b01      	cmp	r3, #1
 8001292:	d118      	bne.n	80012c6 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	691b      	ldr	r3, [r3, #16]
 800129a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800129e:	f023 0304 	bic.w	r3, r3, #4
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80012aa:	4311      	orrs	r1, r2
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80012b0:	4311      	orrs	r1, r2
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80012b6:	430a      	orrs	r2, r1
 80012b8:	431a      	orrs	r2, r3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f042 0201 	orr.w	r2, r2, #1
 80012c2:	611a      	str	r2, [r3, #16]
 80012c4:	e007      	b.n	80012d6 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	691a      	ldr	r2, [r3, #16]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f022 0201 	bic.w	r2, r2, #1
 80012d4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	691b      	ldr	r3, [r3, #16]
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d10c      	bne.n	80012f8 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e4:	f023 010f 	bic.w	r1, r3, #15
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	69db      	ldr	r3, [r3, #28]
 80012ec:	1e5a      	subs	r2, r3, #1
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	430a      	orrs	r2, r1
 80012f4:	631a      	str	r2, [r3, #48]	; 0x30
 80012f6:	e007      	b.n	8001308 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f022 020f 	bic.w	r2, r2, #15
 8001306:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800130c:	f023 0303 	bic.w	r3, r3, #3
 8001310:	f043 0201 	orr.w	r2, r3, #1
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	655a      	str	r2, [r3, #84]	; 0x54
 8001318:	e007      	b.n	800132a <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800131e:	f043 0210 	orr.w	r2, r3, #16
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800132a:	7ffb      	ldrb	r3, [r7, #31]
}
 800132c:	4618      	mov	r0, r3
 800132e:	3720      	adds	r7, #32
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20000000 	.word	0x20000000
 8001338:	053e2d63 	.word	0x053e2d63
 800133c:	50040000 	.word	0x50040000
 8001340:	50040300 	.word	0x50040300
 8001344:	fff0c007 	.word	0xfff0c007

08001348 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff fe88 	bl	800106a <LL_ADC_REG_IsConversionOngoing>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	f040 80a1 	bne.w	80014a4 <HAL_ADC_Start_IT+0x15c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001368:	2b01      	cmp	r3, #1
 800136a:	d101      	bne.n	8001370 <HAL_ADC_Start_IT+0x28>
 800136c:	2302      	movs	r3, #2
 800136e:	e09c      	b.n	80014aa <HAL_ADC_Start_IT+0x162>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2201      	movs	r2, #1
 8001374:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f000 fe4f 	bl	800201c <ADC_Enable>
 800137e:	4603      	mov	r3, r0
 8001380:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001382:	7bfb      	ldrb	r3, [r7, #15]
 8001384:	2b00      	cmp	r3, #0
 8001386:	f040 8088 	bne.w	800149a <HAL_ADC_Start_IT+0x152>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800138e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001392:	f023 0301 	bic.w	r3, r3, #1
 8001396:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d006      	beq.n	80013b8 <HAL_ADC_Start_IT+0x70>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ae:	f023 0206 	bic.w	r2, r3, #6
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	659a      	str	r2, [r3, #88]	; 0x58
 80013b6:	e002      	b.n	80013be <HAL_ADC_Start_IT+0x76>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2200      	movs	r2, #0
 80013bc:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	221c      	movs	r2, #28
 80013c4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	685a      	ldr	r2, [r3, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f022 021c 	bic.w	r2, r2, #28
 80013dc:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	695b      	ldr	r3, [r3, #20]
 80013e2:	2b08      	cmp	r3, #8
 80013e4:	d108      	bne.n	80013f8 <HAL_ADC_Start_IT+0xb0>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	685a      	ldr	r2, [r3, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f042 0208 	orr.w	r2, r2, #8
 80013f4:	605a      	str	r2, [r3, #4]
          break;
 80013f6:	e008      	b.n	800140a <HAL_ADC_Start_IT+0xc2>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	685a      	ldr	r2, [r3, #4]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f042 0204 	orr.w	r2, r2, #4
 8001406:	605a      	str	r2, [r3, #4]
          break;
 8001408:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800140e:	2b00      	cmp	r3, #0
 8001410:	d107      	bne.n	8001422 <HAL_ADC_Start_IT+0xda>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	685a      	ldr	r2, [r3, #4]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f042 0210 	orr.w	r2, r2, #16
 8001420:	605a      	str	r2, [r3, #4]
          }
        }
      }
#else
      /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d02d      	beq.n	800148c <HAL_ADC_Start_IT+0x144>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001434:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001438:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Enable as well injected interruptions in case
         HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
         allows to start regular and injected conversions when JAUTO is
         set with a single call to HAL_ADC_Start_IT() */
        switch (hadc->Init.EOCSelection)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	695b      	ldr	r3, [r3, #20]
 8001444:	2b08      	cmp	r3, #8
 8001446:	d110      	bne.n	800146a <HAL_ADC_Start_IT+0x122>
        {
          case ADC_EOC_SEQ_CONV:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	685a      	ldr	r2, [r3, #4]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f022 0220 	bic.w	r2, r2, #32
 8001456:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	685a      	ldr	r2, [r3, #4]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001466:	605a      	str	r2, [r3, #4]
            break;
 8001468:	e011      	b.n	800148e <HAL_ADC_Start_IT+0x146>
          /* case ADC_EOC_SINGLE_CONV */
          default:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	685a      	ldr	r2, [r3, #4]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001478:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	685a      	ldr	r2, [r3, #4]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f042 0220 	orr.w	r2, r2, #32
 8001488:	605a      	str	r2, [r3, #4]
            break;
 800148a:	e000      	b.n	800148e <HAL_ADC_Start_IT+0x146>
        }
      }
 800148c:	bf00      	nop

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff fdd5 	bl	8001042 <LL_ADC_REG_StartConversion>
 8001498:	e006      	b.n	80014a8 <HAL_ADC_Start_IT+0x160>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2200      	movs	r2, #0
 800149e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80014a2:	e001      	b.n	80014a8 <HAL_ADC_Start_IT+0x160>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80014a4:	2302      	movs	r3, #2
 80014a6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80014a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80014b2:	b480      	push	{r7}
 80014b4:	b083      	sub	sp, #12
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b088      	sub	sp, #32
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80014d4:	2300      	movs	r3, #0
 80014d6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d017      	beq.n	8001522 <HAL_ADC_IRQHandler+0x56>
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	f003 0302 	and.w	r3, r3, #2
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d012      	beq.n	8001522 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001500:	f003 0310 	and.w	r3, r3, #16
 8001504:	2b00      	cmp	r3, #0
 8001506:	d105      	bne.n	8001514 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800150c:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f000 fe2f 	bl	8002178 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2202      	movs	r2, #2
 8001520:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	f003 0304 	and.w	r3, r3, #4
 8001528:	2b00      	cmp	r3, #0
 800152a:	d004      	beq.n	8001536 <HAL_ADC_IRQHandler+0x6a>
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	f003 0304 	and.w	r3, r3, #4
 8001532:	2b00      	cmp	r3, #0
 8001534:	d109      	bne.n	800154a <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800153c:	2b00      	cmp	r3, #0
 800153e:	d05e      	beq.n	80015fe <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	f003 0308 	and.w	r3, r3, #8
 8001546:	2b00      	cmp	r3, #0
 8001548:	d059      	beq.n	80015fe <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800154e:	f003 0310 	and.w	r3, r3, #16
 8001552:	2b00      	cmp	r3, #0
 8001554:	d105      	bne.n	8001562 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800155a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff fc55 	bl	8000e16 <LL_ADC_REG_IsTriggerSourceSWStart>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d03e      	beq.n	80015f0 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	613b      	str	r3, [r7, #16]
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001580:	2b00      	cmp	r3, #0
 8001582:	d135      	bne.n	80015f0 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0308 	and.w	r3, r3, #8
 800158e:	2b08      	cmp	r3, #8
 8001590:	d12e      	bne.n	80015f0 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff fd67 	bl	800106a <LL_ADC_REG_IsConversionOngoing>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d11a      	bne.n	80015d8 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	685a      	ldr	r2, [r3, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f022 020c 	bic.w	r2, r2, #12
 80015b0:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d112      	bne.n	80015f0 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ce:	f043 0201 	orr.w	r2, r3, #1
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	655a      	str	r2, [r3, #84]	; 0x54
 80015d6:	e00b      	b.n	80015f0 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015dc:	f043 0210 	orr.w	r2, r3, #16
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e8:	f043 0201 	orr.w	r2, r3, #1
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f7ff f9fd 	bl	80009f0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	220c      	movs	r2, #12
 80015fc:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	f003 0320 	and.w	r3, r3, #32
 8001604:	2b00      	cmp	r3, #0
 8001606:	d004      	beq.n	8001612 <HAL_ADC_IRQHandler+0x146>
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	f003 0320 	and.w	r3, r3, #32
 800160e:	2b00      	cmp	r3, #0
 8001610:	d109      	bne.n	8001626 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001618:	2b00      	cmp	r3, #0
 800161a:	d072      	beq.n	8001702 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001622:	2b00      	cmp	r3, #0
 8001624:	d06d      	beq.n	8001702 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800162a:	f003 0310 	and.w	r3, r3, #16
 800162e:	2b00      	cmp	r3, #0
 8001630:	d105      	bne.n	800163e <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001636:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff fc26 	bl	8000e94 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001648:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff fbe1 	bl	8000e16 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001654:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d047      	beq.n	80016f4 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d007      	beq.n	800167e <HAL_ADC_IRQHandler+0x1b2>
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d03f      	beq.n	80016f4 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800167a:	2b00      	cmp	r3, #0
 800167c:	d13a      	bne.n	80016f4 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001688:	2b40      	cmp	r3, #64	; 0x40
 800168a:	d133      	bne.n	80016f4 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d12e      	bne.n	80016f4 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff fcf8 	bl	8001090 <LL_ADC_INJ_IsConversionOngoing>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d11a      	bne.n	80016dc <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	685a      	ldr	r2, [r3, #4]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80016b4:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d112      	bne.n	80016f4 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016d2:	f043 0201 	orr.w	r2, r3, #1
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	655a      	str	r2, [r3, #84]	; 0x54
 80016da:	e00b      	b.n	80016f4 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016e0:	f043 0210 	orr.w	r2, r3, #16
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ec:	f043 0201 	orr.w	r2, r3, #1
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f000 fd17 	bl	8002128 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2260      	movs	r2, #96	; 0x60
 8001700:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001708:	2b00      	cmp	r3, #0
 800170a:	d011      	beq.n	8001730 <HAL_ADC_IRQHandler+0x264>
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001712:	2b00      	cmp	r3, #0
 8001714:	d00c      	beq.n	8001730 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800171a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f000 f886 	bl	8001834 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2280      	movs	r2, #128	; 0x80
 800172e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001736:	2b00      	cmp	r3, #0
 8001738:	d012      	beq.n	8001760 <HAL_ADC_IRQHandler+0x294>
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001740:	2b00      	cmp	r3, #0
 8001742:	d00d      	beq.n	8001760 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001748:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f000 fcfd 	bl	8002150 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800175e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001766:	2b00      	cmp	r3, #0
 8001768:	d012      	beq.n	8001790 <HAL_ADC_IRQHandler+0x2c4>
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001770:	2b00      	cmp	r3, #0
 8001772:	d00d      	beq.n	8001790 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001778:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f000 fcef 	bl	8002164 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800178e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	f003 0310 	and.w	r3, r3, #16
 8001796:	2b00      	cmp	r3, #0
 8001798:	d02a      	beq.n	80017f0 <HAL_ADC_IRQHandler+0x324>
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	f003 0310 	and.w	r3, r3, #16
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d025      	beq.n	80017f0 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d102      	bne.n	80017b2 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 80017ac:	2301      	movs	r3, #1
 80017ae:	61fb      	str	r3, [r7, #28]
 80017b0:	e008      	b.n	80017c4 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	f003 0301 	and.w	r3, r3, #1
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 80017c0:	2301      	movs	r3, #1
 80017c2:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d10e      	bne.n	80017e8 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ce:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017da:	f043 0202 	orr.w	r2, r3, #2
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f000 f830 	bl	8001848 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2210      	movs	r2, #16
 80017ee:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d018      	beq.n	800182c <HAL_ADC_IRQHandler+0x360>
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001800:	2b00      	cmp	r3, #0
 8001802:	d013      	beq.n	800182c <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001808:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001814:	f043 0208 	orr.w	r2, r3, #8
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001824:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f000 fc88 	bl	800213c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800182c:	bf00      	nop
 800182e:	3720      	adds	r7, #32
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b0b6      	sub	sp, #216	; 0xd8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001866:	2300      	movs	r3, #0
 8001868:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800186c:	2300      	movs	r3, #0
 800186e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001876:	2b01      	cmp	r3, #1
 8001878:	d101      	bne.n	800187e <HAL_ADC_ConfigChannel+0x22>
 800187a:	2302      	movs	r3, #2
 800187c:	e3b9      	b.n	8001ff2 <HAL_ADC_ConfigChannel+0x796>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2201      	movs	r2, #1
 8001882:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff fbed 	bl	800106a <LL_ADC_REG_IsConversionOngoing>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	f040 839e 	bne.w	8001fd4 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	2b05      	cmp	r3, #5
 800189e:	d824      	bhi.n	80018ea <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	3b02      	subs	r3, #2
 80018a6:	2b03      	cmp	r3, #3
 80018a8:	d81b      	bhi.n	80018e2 <HAL_ADC_ConfigChannel+0x86>
 80018aa:	a201      	add	r2, pc, #4	; (adr r2, 80018b0 <HAL_ADC_ConfigChannel+0x54>)
 80018ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018b0:	080018c1 	.word	0x080018c1
 80018b4:	080018c9 	.word	0x080018c9
 80018b8:	080018d1 	.word	0x080018d1
 80018bc:	080018d9 	.word	0x080018d9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	220c      	movs	r2, #12
 80018c4:	605a      	str	r2, [r3, #4]
          break;
 80018c6:	e011      	b.n	80018ec <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	2212      	movs	r2, #18
 80018cc:	605a      	str	r2, [r3, #4]
          break;
 80018ce:	e00d      	b.n	80018ec <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	2218      	movs	r2, #24
 80018d4:	605a      	str	r2, [r3, #4]
          break;
 80018d6:	e009      	b.n	80018ec <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018de:	605a      	str	r2, [r3, #4]
          break;
 80018e0:	e004      	b.n	80018ec <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	2206      	movs	r2, #6
 80018e6:	605a      	str	r2, [r3, #4]
          break;
 80018e8:	e000      	b.n	80018ec <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80018ea:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6818      	ldr	r0, [r3, #0]
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	6859      	ldr	r1, [r3, #4]
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	461a      	mov	r2, r3
 80018fa:	f7ff fa9f 	bl	8000e3c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff fbb1 	bl	800106a <LL_ADC_REG_IsConversionOngoing>
 8001908:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff fbbd 	bl	8001090 <LL_ADC_INJ_IsConversionOngoing>
 8001916:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800191a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800191e:	2b00      	cmp	r3, #0
 8001920:	f040 81a6 	bne.w	8001c70 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001924:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001928:	2b00      	cmp	r3, #0
 800192a:	f040 81a1 	bne.w	8001c70 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6818      	ldr	r0, [r3, #0]
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	6819      	ldr	r1, [r3, #0]
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	461a      	mov	r2, r3
 800193c:	f7ff fabd 	bl	8000eba <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	695a      	ldr	r2, [r3, #20]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	08db      	lsrs	r3, r3, #3
 800194c:	f003 0303 	and.w	r3, r3, #3
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	691b      	ldr	r3, [r3, #16]
 800195e:	2b04      	cmp	r3, #4
 8001960:	d00a      	beq.n	8001978 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6818      	ldr	r0, [r3, #0]
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	6919      	ldr	r1, [r3, #16]
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001972:	f7ff f9fb 	bl	8000d6c <LL_ADC_SetOffset>
 8001976:	e17b      	b.n	8001c70 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2100      	movs	r1, #0
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff fa18 	bl	8000db4 <LL_ADC_GetOffsetChannel>
 8001984:	4603      	mov	r3, r0
 8001986:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800198a:	2b00      	cmp	r3, #0
 800198c:	d10a      	bne.n	80019a4 <HAL_ADC_ConfigChannel+0x148>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2100      	movs	r1, #0
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff fa0d 	bl	8000db4 <LL_ADC_GetOffsetChannel>
 800199a:	4603      	mov	r3, r0
 800199c:	0e9b      	lsrs	r3, r3, #26
 800199e:	f003 021f 	and.w	r2, r3, #31
 80019a2:	e01e      	b.n	80019e2 <HAL_ADC_ConfigChannel+0x186>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2100      	movs	r1, #0
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff fa02 	bl	8000db4 <LL_ADC_GetOffsetChannel>
 80019b0:	4603      	mov	r3, r0
 80019b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80019ba:	fa93 f3a3 	rbit	r3, r3
 80019be:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80019c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80019c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80019ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d101      	bne.n	80019d6 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80019d2:	2320      	movs	r3, #32
 80019d4:	e004      	b.n	80019e0 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80019d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80019da:	fab3 f383 	clz	r3, r3
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d105      	bne.n	80019fa <HAL_ADC_ConfigChannel+0x19e>
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	0e9b      	lsrs	r3, r3, #26
 80019f4:	f003 031f 	and.w	r3, r3, #31
 80019f8:	e018      	b.n	8001a2c <HAL_ADC_ConfigChannel+0x1d0>
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a02:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001a06:	fa93 f3a3 	rbit	r3, r3
 8001a0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001a0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001a16:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d101      	bne.n	8001a22 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001a1e:	2320      	movs	r3, #32
 8001a20:	e004      	b.n	8001a2c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001a22:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001a26:	fab3 f383 	clz	r3, r3
 8001a2a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d106      	bne.n	8001a3e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2200      	movs	r2, #0
 8001a36:	2100      	movs	r1, #0
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff f9d1 	bl	8000de0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2101      	movs	r1, #1
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff f9b5 	bl	8000db4 <LL_ADC_GetOffsetChannel>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d10a      	bne.n	8001a6a <HAL_ADC_ConfigChannel+0x20e>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2101      	movs	r1, #1
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff f9aa 	bl	8000db4 <LL_ADC_GetOffsetChannel>
 8001a60:	4603      	mov	r3, r0
 8001a62:	0e9b      	lsrs	r3, r3, #26
 8001a64:	f003 021f 	and.w	r2, r3, #31
 8001a68:	e01e      	b.n	8001aa8 <HAL_ADC_ConfigChannel+0x24c>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2101      	movs	r1, #1
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff f99f 	bl	8000db4 <LL_ADC_GetOffsetChannel>
 8001a76:	4603      	mov	r3, r0
 8001a78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a7c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a80:	fa93 f3a3 	rbit	r3, r3
 8001a84:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001a88:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001a8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001a90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d101      	bne.n	8001a9c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001a98:	2320      	movs	r3, #32
 8001a9a:	e004      	b.n	8001aa6 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001a9c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001aa0:	fab3 f383 	clz	r3, r3
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d105      	bne.n	8001ac0 <HAL_ADC_ConfigChannel+0x264>
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	0e9b      	lsrs	r3, r3, #26
 8001aba:	f003 031f 	and.w	r3, r3, #31
 8001abe:	e018      	b.n	8001af2 <HAL_ADC_ConfigChannel+0x296>
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001acc:	fa93 f3a3 	rbit	r3, r3
 8001ad0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001ad4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001ad8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001adc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d101      	bne.n	8001ae8 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001ae4:	2320      	movs	r3, #32
 8001ae6:	e004      	b.n	8001af2 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001ae8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001aec:	fab3 f383 	clz	r3, r3
 8001af0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d106      	bne.n	8001b04 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2200      	movs	r2, #0
 8001afc:	2101      	movs	r1, #1
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff f96e 	bl	8000de0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2102      	movs	r1, #2
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff f952 	bl	8000db4 <LL_ADC_GetOffsetChannel>
 8001b10:	4603      	mov	r3, r0
 8001b12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d10a      	bne.n	8001b30 <HAL_ADC_ConfigChannel+0x2d4>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2102      	movs	r1, #2
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff f947 	bl	8000db4 <LL_ADC_GetOffsetChannel>
 8001b26:	4603      	mov	r3, r0
 8001b28:	0e9b      	lsrs	r3, r3, #26
 8001b2a:	f003 021f 	and.w	r2, r3, #31
 8001b2e:	e01e      	b.n	8001b6e <HAL_ADC_ConfigChannel+0x312>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2102      	movs	r1, #2
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff f93c 	bl	8000db4 <LL_ADC_GetOffsetChannel>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b46:	fa93 f3a3 	rbit	r3, r3
 8001b4a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001b4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001b56:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d101      	bne.n	8001b62 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001b5e:	2320      	movs	r3, #32
 8001b60:	e004      	b.n	8001b6c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001b62:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b66:	fab3 f383 	clz	r3, r3
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d105      	bne.n	8001b86 <HAL_ADC_ConfigChannel+0x32a>
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	0e9b      	lsrs	r3, r3, #26
 8001b80:	f003 031f 	and.w	r3, r3, #31
 8001b84:	e016      	b.n	8001bb4 <HAL_ADC_ConfigChannel+0x358>
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b92:	fa93 f3a3 	rbit	r3, r3
 8001b96:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001b98:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b9a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001b9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d101      	bne.n	8001baa <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001ba6:	2320      	movs	r3, #32
 8001ba8:	e004      	b.n	8001bb4 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001baa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001bae:	fab3 f383 	clz	r3, r3
 8001bb2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d106      	bne.n	8001bc6 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	2102      	movs	r1, #2
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff f90d 	bl	8000de0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2103      	movs	r1, #3
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff f8f1 	bl	8000db4 <LL_ADC_GetOffsetChannel>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d10a      	bne.n	8001bf2 <HAL_ADC_ConfigChannel+0x396>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2103      	movs	r1, #3
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff f8e6 	bl	8000db4 <LL_ADC_GetOffsetChannel>
 8001be8:	4603      	mov	r3, r0
 8001bea:	0e9b      	lsrs	r3, r3, #26
 8001bec:	f003 021f 	and.w	r2, r3, #31
 8001bf0:	e017      	b.n	8001c22 <HAL_ADC_ConfigChannel+0x3c6>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2103      	movs	r1, #3
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff f8db 	bl	8000db4 <LL_ADC_GetOffsetChannel>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c04:	fa93 f3a3 	rbit	r3, r3
 8001c08:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001c0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c0c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001c0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d101      	bne.n	8001c18 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001c14:	2320      	movs	r3, #32
 8001c16:	e003      	b.n	8001c20 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001c18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c1a:	fab3 f383 	clz	r3, r3
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d105      	bne.n	8001c3a <HAL_ADC_ConfigChannel+0x3de>
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	0e9b      	lsrs	r3, r3, #26
 8001c34:	f003 031f 	and.w	r3, r3, #31
 8001c38:	e011      	b.n	8001c5e <HAL_ADC_ConfigChannel+0x402>
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c42:	fa93 f3a3 	rbit	r3, r3
 8001c46:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001c48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c4a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001c4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d101      	bne.n	8001c56 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001c52:	2320      	movs	r3, #32
 8001c54:	e003      	b.n	8001c5e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001c56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c58:	fab3 f383 	clz	r3, r3
 8001c5c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d106      	bne.n	8001c70 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2200      	movs	r2, #0
 8001c68:	2103      	movs	r1, #3
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff f8b8 	bl	8000de0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff f9d1 	bl	800101c <LL_ADC_IsEnabled>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f040 813f 	bne.w	8001f00 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6818      	ldr	r0, [r3, #0]
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	6819      	ldr	r1, [r3, #0]
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	461a      	mov	r2, r3
 8001c90:	f7ff f93e 	bl	8000f10 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	4a8e      	ldr	r2, [pc, #568]	; (8001ed4 <HAL_ADC_ConfigChannel+0x678>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	f040 8130 	bne.w	8001f00 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d10b      	bne.n	8001cc8 <HAL_ADC_ConfigChannel+0x46c>
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	0e9b      	lsrs	r3, r3, #26
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	f003 031f 	and.w	r3, r3, #31
 8001cbc:	2b09      	cmp	r3, #9
 8001cbe:	bf94      	ite	ls
 8001cc0:	2301      	movls	r3, #1
 8001cc2:	2300      	movhi	r3, #0
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	e019      	b.n	8001cfc <HAL_ADC_ConfigChannel+0x4a0>
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cd0:	fa93 f3a3 	rbit	r3, r3
 8001cd4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001cd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001cd8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001cda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d101      	bne.n	8001ce4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001ce0:	2320      	movs	r3, #32
 8001ce2:	e003      	b.n	8001cec <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001ce4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ce6:	fab3 f383 	clz	r3, r3
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	3301      	adds	r3, #1
 8001cee:	f003 031f 	and.w	r3, r3, #31
 8001cf2:	2b09      	cmp	r3, #9
 8001cf4:	bf94      	ite	ls
 8001cf6:	2301      	movls	r3, #1
 8001cf8:	2300      	movhi	r3, #0
 8001cfa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d079      	beq.n	8001df4 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d107      	bne.n	8001d1c <HAL_ADC_ConfigChannel+0x4c0>
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	0e9b      	lsrs	r3, r3, #26
 8001d12:	3301      	adds	r3, #1
 8001d14:	069b      	lsls	r3, r3, #26
 8001d16:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d1a:	e015      	b.n	8001d48 <HAL_ADC_ConfigChannel+0x4ec>
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d24:	fa93 f3a3 	rbit	r3, r3
 8001d28:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001d2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d2c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001d2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d101      	bne.n	8001d38 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001d34:	2320      	movs	r3, #32
 8001d36:	e003      	b.n	8001d40 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001d38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d3a:	fab3 f383 	clz	r3, r3
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	3301      	adds	r3, #1
 8001d42:	069b      	lsls	r3, r3, #26
 8001d44:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d109      	bne.n	8001d68 <HAL_ADC_ConfigChannel+0x50c>
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	0e9b      	lsrs	r3, r3, #26
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	f003 031f 	and.w	r3, r3, #31
 8001d60:	2101      	movs	r1, #1
 8001d62:	fa01 f303 	lsl.w	r3, r1, r3
 8001d66:	e017      	b.n	8001d98 <HAL_ADC_ConfigChannel+0x53c>
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d70:	fa93 f3a3 	rbit	r3, r3
 8001d74:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001d76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d78:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001d7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d101      	bne.n	8001d84 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001d80:	2320      	movs	r3, #32
 8001d82:	e003      	b.n	8001d8c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001d84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d86:	fab3 f383 	clz	r3, r3
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	f003 031f 	and.w	r3, r3, #31
 8001d92:	2101      	movs	r1, #1
 8001d94:	fa01 f303 	lsl.w	r3, r1, r3
 8001d98:	ea42 0103 	orr.w	r1, r2, r3
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d10a      	bne.n	8001dbe <HAL_ADC_ConfigChannel+0x562>
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	0e9b      	lsrs	r3, r3, #26
 8001dae:	3301      	adds	r3, #1
 8001db0:	f003 021f 	and.w	r2, r3, #31
 8001db4:	4613      	mov	r3, r2
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	4413      	add	r3, r2
 8001dba:	051b      	lsls	r3, r3, #20
 8001dbc:	e018      	b.n	8001df0 <HAL_ADC_ConfigChannel+0x594>
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dc6:	fa93 f3a3 	rbit	r3, r3
 8001dca:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001dd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d101      	bne.n	8001dda <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001dd6:	2320      	movs	r3, #32
 8001dd8:	e003      	b.n	8001de2 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001dda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ddc:	fab3 f383 	clz	r3, r3
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	3301      	adds	r3, #1
 8001de4:	f003 021f 	and.w	r2, r3, #31
 8001de8:	4613      	mov	r3, r2
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	4413      	add	r3, r2
 8001dee:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001df0:	430b      	orrs	r3, r1
 8001df2:	e080      	b.n	8001ef6 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d107      	bne.n	8001e10 <HAL_ADC_ConfigChannel+0x5b4>
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	0e9b      	lsrs	r3, r3, #26
 8001e06:	3301      	adds	r3, #1
 8001e08:	069b      	lsls	r3, r3, #26
 8001e0a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e0e:	e015      	b.n	8001e3c <HAL_ADC_ConfigChannel+0x5e0>
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e18:	fa93 f3a3 	rbit	r3, r3
 8001e1c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e20:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d101      	bne.n	8001e2c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001e28:	2320      	movs	r3, #32
 8001e2a:	e003      	b.n	8001e34 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e2e:	fab3 f383 	clz	r3, r3
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	3301      	adds	r3, #1
 8001e36:	069b      	lsls	r3, r3, #26
 8001e38:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d109      	bne.n	8001e5c <HAL_ADC_ConfigChannel+0x600>
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	0e9b      	lsrs	r3, r3, #26
 8001e4e:	3301      	adds	r3, #1
 8001e50:	f003 031f 	and.w	r3, r3, #31
 8001e54:	2101      	movs	r1, #1
 8001e56:	fa01 f303 	lsl.w	r3, r1, r3
 8001e5a:	e017      	b.n	8001e8c <HAL_ADC_ConfigChannel+0x630>
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e62:	6a3b      	ldr	r3, [r7, #32]
 8001e64:	fa93 f3a3 	rbit	r3, r3
 8001e68:	61fb      	str	r3, [r7, #28]
  return result;
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d101      	bne.n	8001e78 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001e74:	2320      	movs	r3, #32
 8001e76:	e003      	b.n	8001e80 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7a:	fab3 f383 	clz	r3, r3
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	3301      	adds	r3, #1
 8001e82:	f003 031f 	and.w	r3, r3, #31
 8001e86:	2101      	movs	r1, #1
 8001e88:	fa01 f303 	lsl.w	r3, r1, r3
 8001e8c:	ea42 0103 	orr.w	r1, r2, r3
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d10d      	bne.n	8001eb8 <HAL_ADC_ConfigChannel+0x65c>
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	0e9b      	lsrs	r3, r3, #26
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	f003 021f 	and.w	r2, r3, #31
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	4413      	add	r3, r2
 8001eae:	3b1e      	subs	r3, #30
 8001eb0:	051b      	lsls	r3, r3, #20
 8001eb2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001eb6:	e01d      	b.n	8001ef4 <HAL_ADC_ConfigChannel+0x698>
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	fa93 f3a3 	rbit	r3, r3
 8001ec4:	613b      	str	r3, [r7, #16]
  return result;
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d103      	bne.n	8001ed8 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001ed0:	2320      	movs	r3, #32
 8001ed2:	e005      	b.n	8001ee0 <HAL_ADC_ConfigChannel+0x684>
 8001ed4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	fab3 f383 	clz	r3, r3
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	f003 021f 	and.w	r2, r3, #31
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	4413      	add	r3, r2
 8001eec:	3b1e      	subs	r3, #30
 8001eee:	051b      	lsls	r3, r3, #20
 8001ef0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ef4:	430b      	orrs	r3, r1
 8001ef6:	683a      	ldr	r2, [r7, #0]
 8001ef8:	6892      	ldr	r2, [r2, #8]
 8001efa:	4619      	mov	r1, r3
 8001efc:	f7fe ffdd 	bl	8000eba <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	4b3d      	ldr	r3, [pc, #244]	; (8001ffc <HAL_ADC_ConfigChannel+0x7a0>)
 8001f06:	4013      	ands	r3, r2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d06c      	beq.n	8001fe6 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f0c:	483c      	ldr	r0, [pc, #240]	; (8002000 <HAL_ADC_ConfigChannel+0x7a4>)
 8001f0e:	f7fe ff1f 	bl	8000d50 <LL_ADC_GetCommonPathInternalCh>
 8001f12:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a3a      	ldr	r2, [pc, #232]	; (8002004 <HAL_ADC_ConfigChannel+0x7a8>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d127      	bne.n	8001f70 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001f20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d121      	bne.n	8001f70 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a35      	ldr	r2, [pc, #212]	; (8002008 <HAL_ADC_ConfigChannel+0x7ac>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d157      	bne.n	8001fe6 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f3a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f3e:	4619      	mov	r1, r3
 8001f40:	482f      	ldr	r0, [pc, #188]	; (8002000 <HAL_ADC_ConfigChannel+0x7a4>)
 8001f42:	f7fe fef2 	bl	8000d2a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f46:	4b31      	ldr	r3, [pc, #196]	; (800200c <HAL_ADC_ConfigChannel+0x7b0>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	099b      	lsrs	r3, r3, #6
 8001f4c:	4a30      	ldr	r2, [pc, #192]	; (8002010 <HAL_ADC_ConfigChannel+0x7b4>)
 8001f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f52:	099b      	lsrs	r3, r3, #6
 8001f54:	1c5a      	adds	r2, r3, #1
 8001f56:	4613      	mov	r3, r2
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	4413      	add	r3, r2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f60:	e002      	b.n	8001f68 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	3b01      	subs	r3, #1
 8001f66:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1f9      	bne.n	8001f62 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f6e:	e03a      	b.n	8001fe6 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a27      	ldr	r2, [pc, #156]	; (8002014 <HAL_ADC_ConfigChannel+0x7b8>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d113      	bne.n	8001fa2 <HAL_ADC_ConfigChannel+0x746>
 8001f7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d10d      	bne.n	8001fa2 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a1f      	ldr	r2, [pc, #124]	; (8002008 <HAL_ADC_ConfigChannel+0x7ac>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d12a      	bne.n	8001fe6 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4819      	ldr	r0, [pc, #100]	; (8002000 <HAL_ADC_ConfigChannel+0x7a4>)
 8001f9c:	f7fe fec5 	bl	8000d2a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001fa0:	e021      	b.n	8001fe6 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a1c      	ldr	r2, [pc, #112]	; (8002018 <HAL_ADC_ConfigChannel+0x7bc>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d11c      	bne.n	8001fe6 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001fac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001fb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d116      	bne.n	8001fe6 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a12      	ldr	r2, [pc, #72]	; (8002008 <HAL_ADC_ConfigChannel+0x7ac>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d111      	bne.n	8001fe6 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fc2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001fc6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001fca:	4619      	mov	r1, r3
 8001fcc:	480c      	ldr	r0, [pc, #48]	; (8002000 <HAL_ADC_ConfigChannel+0x7a4>)
 8001fce:	f7fe feac 	bl	8000d2a <LL_ADC_SetCommonPathInternalCh>
 8001fd2:	e008      	b.n	8001fe6 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd8:	f043 0220 	orr.w	r2, r3, #32
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001fee:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	37d8      	adds	r7, #216	; 0xd8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	80080000 	.word	0x80080000
 8002000:	50040300 	.word	0x50040300
 8002004:	c7520000 	.word	0xc7520000
 8002008:	50040000 	.word	0x50040000
 800200c:	20000000 	.word	0x20000000
 8002010:	053e2d63 	.word	0x053e2d63
 8002014:	cb840000 	.word	0xcb840000
 8002018:	80000001 	.word	0x80000001

0800201c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002024:	2300      	movs	r3, #0
 8002026:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4618      	mov	r0, r3
 800202e:	f7fe fff5 	bl	800101c <LL_ADC_IsEnabled>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d169      	bne.n	800210c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	689a      	ldr	r2, [r3, #8]
 800203e:	4b36      	ldr	r3, [pc, #216]	; (8002118 <ADC_Enable+0xfc>)
 8002040:	4013      	ands	r3, r2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00d      	beq.n	8002062 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800204a:	f043 0210 	orr.w	r2, r3, #16
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002056:	f043 0201 	orr.w	r2, r3, #1
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e055      	b.n	800210e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f7fe ffc4 	bl	8000ff4 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800206c:	482b      	ldr	r0, [pc, #172]	; (800211c <ADC_Enable+0x100>)
 800206e:	f7fe fe6f 	bl	8000d50 <LL_ADC_GetCommonPathInternalCh>
 8002072:	4603      	mov	r3, r0
 8002074:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d013      	beq.n	80020a4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800207c:	4b28      	ldr	r3, [pc, #160]	; (8002120 <ADC_Enable+0x104>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	099b      	lsrs	r3, r3, #6
 8002082:	4a28      	ldr	r2, [pc, #160]	; (8002124 <ADC_Enable+0x108>)
 8002084:	fba2 2303 	umull	r2, r3, r2, r3
 8002088:	099b      	lsrs	r3, r3, #6
 800208a:	1c5a      	adds	r2, r3, #1
 800208c:	4613      	mov	r3, r2
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	4413      	add	r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002096:	e002      	b.n	800209e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	3b01      	subs	r3, #1
 800209c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d1f9      	bne.n	8002098 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80020a4:	f7fe fe22 	bl	8000cec <HAL_GetTick>
 80020a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80020aa:	e028      	b.n	80020fe <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7fe ffb3 	bl	800101c <LL_ADC_IsEnabled>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d104      	bne.n	80020c6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7fe ff97 	bl	8000ff4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80020c6:	f7fe fe11 	bl	8000cec <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d914      	bls.n	80020fe <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d00d      	beq.n	80020fe <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e6:	f043 0210 	orr.w	r2, r3, #16
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f2:	f043 0201 	orr.w	r2, r3, #1
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e007      	b.n	800210e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	2b01      	cmp	r3, #1
 800210a:	d1cf      	bne.n	80020ac <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	8000003f 	.word	0x8000003f
 800211c:	50040300 	.word	0x50040300
 8002120:	20000000 	.word	0x20000000
 8002124:	053e2d63 	.word	0x053e2d63

08002128 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002180:	bf00      	nop
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f003 0307 	and.w	r3, r3, #7
 800219a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800219c:	4b0c      	ldr	r3, [pc, #48]	; (80021d0 <__NVIC_SetPriorityGrouping+0x44>)
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021a2:	68ba      	ldr	r2, [r7, #8]
 80021a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021a8:	4013      	ands	r3, r2
 80021aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021be:	4a04      	ldr	r2, [pc, #16]	; (80021d0 <__NVIC_SetPriorityGrouping+0x44>)
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	60d3      	str	r3, [r2, #12]
}
 80021c4:	bf00      	nop
 80021c6:	3714      	adds	r7, #20
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr
 80021d0:	e000ed00 	.word	0xe000ed00

080021d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021d8:	4b04      	ldr	r3, [pc, #16]	; (80021ec <__NVIC_GetPriorityGrouping+0x18>)
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	0a1b      	lsrs	r3, r3, #8
 80021de:	f003 0307 	and.w	r3, r3, #7
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr
 80021ec:	e000ed00 	.word	0xe000ed00

080021f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	db0b      	blt.n	800221a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002202:	79fb      	ldrb	r3, [r7, #7]
 8002204:	f003 021f 	and.w	r2, r3, #31
 8002208:	4907      	ldr	r1, [pc, #28]	; (8002228 <__NVIC_EnableIRQ+0x38>)
 800220a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220e:	095b      	lsrs	r3, r3, #5
 8002210:	2001      	movs	r0, #1
 8002212:	fa00 f202 	lsl.w	r2, r0, r2
 8002216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800221a:	bf00      	nop
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	e000e100 	.word	0xe000e100

0800222c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	4603      	mov	r3, r0
 8002234:	6039      	str	r1, [r7, #0]
 8002236:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223c:	2b00      	cmp	r3, #0
 800223e:	db0a      	blt.n	8002256 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	b2da      	uxtb	r2, r3
 8002244:	490c      	ldr	r1, [pc, #48]	; (8002278 <__NVIC_SetPriority+0x4c>)
 8002246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800224a:	0112      	lsls	r2, r2, #4
 800224c:	b2d2      	uxtb	r2, r2
 800224e:	440b      	add	r3, r1
 8002250:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002254:	e00a      	b.n	800226c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	b2da      	uxtb	r2, r3
 800225a:	4908      	ldr	r1, [pc, #32]	; (800227c <__NVIC_SetPriority+0x50>)
 800225c:	79fb      	ldrb	r3, [r7, #7]
 800225e:	f003 030f 	and.w	r3, r3, #15
 8002262:	3b04      	subs	r3, #4
 8002264:	0112      	lsls	r2, r2, #4
 8002266:	b2d2      	uxtb	r2, r2
 8002268:	440b      	add	r3, r1
 800226a:	761a      	strb	r2, [r3, #24]
}
 800226c:	bf00      	nop
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr
 8002278:	e000e100 	.word	0xe000e100
 800227c:	e000ed00 	.word	0xe000ed00

08002280 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002280:	b480      	push	{r7}
 8002282:	b089      	sub	sp, #36	; 0x24
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f003 0307 	and.w	r3, r3, #7
 8002292:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	f1c3 0307 	rsb	r3, r3, #7
 800229a:	2b04      	cmp	r3, #4
 800229c:	bf28      	it	cs
 800229e:	2304      	movcs	r3, #4
 80022a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	3304      	adds	r3, #4
 80022a6:	2b06      	cmp	r3, #6
 80022a8:	d902      	bls.n	80022b0 <NVIC_EncodePriority+0x30>
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	3b03      	subs	r3, #3
 80022ae:	e000      	b.n	80022b2 <NVIC_EncodePriority+0x32>
 80022b0:	2300      	movs	r3, #0
 80022b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022b4:	f04f 32ff 	mov.w	r2, #4294967295
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	43da      	mvns	r2, r3
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	401a      	ands	r2, r3
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022c8:	f04f 31ff 	mov.w	r1, #4294967295
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	fa01 f303 	lsl.w	r3, r1, r3
 80022d2:	43d9      	mvns	r1, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022d8:	4313      	orrs	r3, r2
         );
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3724      	adds	r7, #36	; 0x24
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
	...

080022e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	3b01      	subs	r3, #1
 80022f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022f8:	d301      	bcc.n	80022fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022fa:	2301      	movs	r3, #1
 80022fc:	e00f      	b.n	800231e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022fe:	4a0a      	ldr	r2, [pc, #40]	; (8002328 <SysTick_Config+0x40>)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	3b01      	subs	r3, #1
 8002304:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002306:	210f      	movs	r1, #15
 8002308:	f04f 30ff 	mov.w	r0, #4294967295
 800230c:	f7ff ff8e 	bl	800222c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002310:	4b05      	ldr	r3, [pc, #20]	; (8002328 <SysTick_Config+0x40>)
 8002312:	2200      	movs	r2, #0
 8002314:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002316:	4b04      	ldr	r3, [pc, #16]	; (8002328 <SysTick_Config+0x40>)
 8002318:	2207      	movs	r2, #7
 800231a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	e000e010 	.word	0xe000e010

0800232c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f7ff ff29 	bl	800218c <__NVIC_SetPriorityGrouping>
}
 800233a:	bf00      	nop
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b086      	sub	sp, #24
 8002346:	af00      	add	r7, sp, #0
 8002348:	4603      	mov	r3, r0
 800234a:	60b9      	str	r1, [r7, #8]
 800234c:	607a      	str	r2, [r7, #4]
 800234e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002350:	2300      	movs	r3, #0
 8002352:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002354:	f7ff ff3e 	bl	80021d4 <__NVIC_GetPriorityGrouping>
 8002358:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	68b9      	ldr	r1, [r7, #8]
 800235e:	6978      	ldr	r0, [r7, #20]
 8002360:	f7ff ff8e 	bl	8002280 <NVIC_EncodePriority>
 8002364:	4602      	mov	r2, r0
 8002366:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800236a:	4611      	mov	r1, r2
 800236c:	4618      	mov	r0, r3
 800236e:	f7ff ff5d 	bl	800222c <__NVIC_SetPriority>
}
 8002372:	bf00      	nop
 8002374:	3718      	adds	r7, #24
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	b082      	sub	sp, #8
 800237e:	af00      	add	r7, sp, #0
 8002380:	4603      	mov	r3, r0
 8002382:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff ff31 	bl	80021f0 <__NVIC_EnableIRQ>
}
 800238e:	bf00      	nop
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b082      	sub	sp, #8
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f7ff ffa2 	bl	80022e8 <SysTick_Config>
 80023a4:	4603      	mov	r3, r0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
	...

080023b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b087      	sub	sp, #28
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023ba:	2300      	movs	r3, #0
 80023bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023be:	e148      	b.n	8002652 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	2101      	movs	r1, #1
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	fa01 f303 	lsl.w	r3, r1, r3
 80023cc:	4013      	ands	r3, r2
 80023ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f000 813a 	beq.w	800264c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f003 0303 	and.w	r3, r3, #3
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d005      	beq.n	80023f0 <HAL_GPIO_Init+0x40>
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f003 0303 	and.w	r3, r3, #3
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d130      	bne.n	8002452 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	2203      	movs	r2, #3
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	43db      	mvns	r3, r3
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	4013      	ands	r3, r2
 8002406:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	68da      	ldr	r2, [r3, #12]
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	005b      	lsls	r3, r3, #1
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	4313      	orrs	r3, r2
 8002418:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	693a      	ldr	r2, [r7, #16]
 800241e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002426:	2201      	movs	r2, #1
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
 800242e:	43db      	mvns	r3, r3
 8002430:	693a      	ldr	r2, [r7, #16]
 8002432:	4013      	ands	r3, r2
 8002434:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	091b      	lsrs	r3, r3, #4
 800243c:	f003 0201 	and.w	r2, r3, #1
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	4313      	orrs	r3, r2
 800244a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f003 0303 	and.w	r3, r3, #3
 800245a:	2b03      	cmp	r3, #3
 800245c:	d017      	beq.n	800248e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	2203      	movs	r2, #3
 800246a:	fa02 f303 	lsl.w	r3, r2, r3
 800246e:	43db      	mvns	r3, r3
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	4013      	ands	r3, r2
 8002474:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	689a      	ldr	r2, [r3, #8]
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	4313      	orrs	r3, r2
 8002486:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f003 0303 	and.w	r3, r3, #3
 8002496:	2b02      	cmp	r3, #2
 8002498:	d123      	bne.n	80024e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	08da      	lsrs	r2, r3, #3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	3208      	adds	r2, #8
 80024a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	f003 0307 	and.w	r3, r3, #7
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	220f      	movs	r2, #15
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	43db      	mvns	r3, r3
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	4013      	ands	r3, r2
 80024bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	691a      	ldr	r2, [r3, #16]
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	f003 0307 	and.w	r3, r3, #7
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	fa02 f303 	lsl.w	r3, r2, r3
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	08da      	lsrs	r2, r3, #3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	3208      	adds	r2, #8
 80024dc:	6939      	ldr	r1, [r7, #16]
 80024de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	2203      	movs	r2, #3
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	43db      	mvns	r3, r3
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	4013      	ands	r3, r2
 80024f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f003 0203 	and.w	r2, r3, #3
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	4313      	orrs	r3, r2
 800250e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800251e:	2b00      	cmp	r3, #0
 8002520:	f000 8094 	beq.w	800264c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002524:	4b52      	ldr	r3, [pc, #328]	; (8002670 <HAL_GPIO_Init+0x2c0>)
 8002526:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002528:	4a51      	ldr	r2, [pc, #324]	; (8002670 <HAL_GPIO_Init+0x2c0>)
 800252a:	f043 0301 	orr.w	r3, r3, #1
 800252e:	6613      	str	r3, [r2, #96]	; 0x60
 8002530:	4b4f      	ldr	r3, [pc, #316]	; (8002670 <HAL_GPIO_Init+0x2c0>)
 8002532:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	60bb      	str	r3, [r7, #8]
 800253a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800253c:	4a4d      	ldr	r2, [pc, #308]	; (8002674 <HAL_GPIO_Init+0x2c4>)
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	089b      	lsrs	r3, r3, #2
 8002542:	3302      	adds	r3, #2
 8002544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002548:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	f003 0303 	and.w	r3, r3, #3
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	220f      	movs	r2, #15
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	43db      	mvns	r3, r3
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	4013      	ands	r3, r2
 800255e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002566:	d00d      	beq.n	8002584 <HAL_GPIO_Init+0x1d4>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4a43      	ldr	r2, [pc, #268]	; (8002678 <HAL_GPIO_Init+0x2c8>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d007      	beq.n	8002580 <HAL_GPIO_Init+0x1d0>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4a42      	ldr	r2, [pc, #264]	; (800267c <HAL_GPIO_Init+0x2cc>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d101      	bne.n	800257c <HAL_GPIO_Init+0x1cc>
 8002578:	2302      	movs	r3, #2
 800257a:	e004      	b.n	8002586 <HAL_GPIO_Init+0x1d6>
 800257c:	2307      	movs	r3, #7
 800257e:	e002      	b.n	8002586 <HAL_GPIO_Init+0x1d6>
 8002580:	2301      	movs	r3, #1
 8002582:	e000      	b.n	8002586 <HAL_GPIO_Init+0x1d6>
 8002584:	2300      	movs	r3, #0
 8002586:	697a      	ldr	r2, [r7, #20]
 8002588:	f002 0203 	and.w	r2, r2, #3
 800258c:	0092      	lsls	r2, r2, #2
 800258e:	4093      	lsls	r3, r2
 8002590:	693a      	ldr	r2, [r7, #16]
 8002592:	4313      	orrs	r3, r2
 8002594:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002596:	4937      	ldr	r1, [pc, #220]	; (8002674 <HAL_GPIO_Init+0x2c4>)
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	089b      	lsrs	r3, r3, #2
 800259c:	3302      	adds	r3, #2
 800259e:	693a      	ldr	r2, [r7, #16]
 80025a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025a4:	4b36      	ldr	r3, [pc, #216]	; (8002680 <HAL_GPIO_Init+0x2d0>)
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	43db      	mvns	r3, r3
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	4013      	ands	r3, r2
 80025b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d003      	beq.n	80025c8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80025c8:	4a2d      	ldr	r2, [pc, #180]	; (8002680 <HAL_GPIO_Init+0x2d0>)
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80025ce:	4b2c      	ldr	r3, [pc, #176]	; (8002680 <HAL_GPIO_Init+0x2d0>)
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	43db      	mvns	r3, r3
 80025d8:	693a      	ldr	r2, [r7, #16]
 80025da:	4013      	ands	r3, r2
 80025dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d003      	beq.n	80025f2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80025f2:	4a23      	ldr	r2, [pc, #140]	; (8002680 <HAL_GPIO_Init+0x2d0>)
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80025f8:	4b21      	ldr	r3, [pc, #132]	; (8002680 <HAL_GPIO_Init+0x2d0>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	43db      	mvns	r3, r3
 8002602:	693a      	ldr	r2, [r7, #16]
 8002604:	4013      	ands	r3, r2
 8002606:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d003      	beq.n	800261c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	4313      	orrs	r3, r2
 800261a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800261c:	4a18      	ldr	r2, [pc, #96]	; (8002680 <HAL_GPIO_Init+0x2d0>)
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002622:	4b17      	ldr	r3, [pc, #92]	; (8002680 <HAL_GPIO_Init+0x2d0>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	43db      	mvns	r3, r3
 800262c:	693a      	ldr	r2, [r7, #16]
 800262e:	4013      	ands	r3, r2
 8002630:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d003      	beq.n	8002646 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	4313      	orrs	r3, r2
 8002644:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002646:	4a0e      	ldr	r2, [pc, #56]	; (8002680 <HAL_GPIO_Init+0x2d0>)
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	3301      	adds	r3, #1
 8002650:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	fa22 f303 	lsr.w	r3, r2, r3
 800265c:	2b00      	cmp	r3, #0
 800265e:	f47f aeaf 	bne.w	80023c0 <HAL_GPIO_Init+0x10>
  }
}
 8002662:	bf00      	nop
 8002664:	bf00      	nop
 8002666:	371c      	adds	r7, #28
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr
 8002670:	40021000 	.word	0x40021000
 8002674:	40010000 	.word	0x40010000
 8002678:	48000400 	.word	0x48000400
 800267c:	48000800 	.word	0x48000800
 8002680:	40010400 	.word	0x40010400

08002684 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002688:	4b04      	ldr	r3, [pc, #16]	; (800269c <HAL_PWREx_GetVoltageRange+0x18>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002690:	4618      	mov	r0, r3
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	40007000 	.word	0x40007000

080026a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026ae:	d130      	bne.n	8002712 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80026b0:	4b23      	ldr	r3, [pc, #140]	; (8002740 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80026b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026bc:	d038      	beq.n	8002730 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80026be:	4b20      	ldr	r3, [pc, #128]	; (8002740 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026c6:	4a1e      	ldr	r2, [pc, #120]	; (8002740 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026cc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80026ce:	4b1d      	ldr	r3, [pc, #116]	; (8002744 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2232      	movs	r2, #50	; 0x32
 80026d4:	fb02 f303 	mul.w	r3, r2, r3
 80026d8:	4a1b      	ldr	r2, [pc, #108]	; (8002748 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80026da:	fba2 2303 	umull	r2, r3, r2, r3
 80026de:	0c9b      	lsrs	r3, r3, #18
 80026e0:	3301      	adds	r3, #1
 80026e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026e4:	e002      	b.n	80026ec <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	3b01      	subs	r3, #1
 80026ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026ec:	4b14      	ldr	r3, [pc, #80]	; (8002740 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026ee:	695b      	ldr	r3, [r3, #20]
 80026f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026f8:	d102      	bne.n	8002700 <HAL_PWREx_ControlVoltageScaling+0x60>
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d1f2      	bne.n	80026e6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002700:	4b0f      	ldr	r3, [pc, #60]	; (8002740 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002702:	695b      	ldr	r3, [r3, #20]
 8002704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002708:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800270c:	d110      	bne.n	8002730 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e00f      	b.n	8002732 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002712:	4b0b      	ldr	r3, [pc, #44]	; (8002740 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800271a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800271e:	d007      	beq.n	8002730 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002720:	4b07      	ldr	r3, [pc, #28]	; (8002740 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002728:	4a05      	ldr	r2, [pc, #20]	; (8002740 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800272a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800272e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3714      	adds	r7, #20
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	40007000 	.word	0x40007000
 8002744:	20000000 	.word	0x20000000
 8002748:	431bde83 	.word	0x431bde83

0800274c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b088      	sub	sp, #32
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d102      	bne.n	8002760 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	f000 bc02 	b.w	8002f64 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002760:	4b96      	ldr	r3, [pc, #600]	; (80029bc <HAL_RCC_OscConfig+0x270>)
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f003 030c 	and.w	r3, r3, #12
 8002768:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800276a:	4b94      	ldr	r3, [pc, #592]	; (80029bc <HAL_RCC_OscConfig+0x270>)
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	f003 0303 	and.w	r3, r3, #3
 8002772:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0310 	and.w	r3, r3, #16
 800277c:	2b00      	cmp	r3, #0
 800277e:	f000 80e4 	beq.w	800294a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d007      	beq.n	8002798 <HAL_RCC_OscConfig+0x4c>
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	2b0c      	cmp	r3, #12
 800278c:	f040 808b 	bne.w	80028a6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	2b01      	cmp	r3, #1
 8002794:	f040 8087 	bne.w	80028a6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002798:	4b88      	ldr	r3, [pc, #544]	; (80029bc <HAL_RCC_OscConfig+0x270>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0302 	and.w	r3, r3, #2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d005      	beq.n	80027b0 <HAL_RCC_OscConfig+0x64>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d101      	bne.n	80027b0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e3d9      	b.n	8002f64 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a1a      	ldr	r2, [r3, #32]
 80027b4:	4b81      	ldr	r3, [pc, #516]	; (80029bc <HAL_RCC_OscConfig+0x270>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0308 	and.w	r3, r3, #8
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d004      	beq.n	80027ca <HAL_RCC_OscConfig+0x7e>
 80027c0:	4b7e      	ldr	r3, [pc, #504]	; (80029bc <HAL_RCC_OscConfig+0x270>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027c8:	e005      	b.n	80027d6 <HAL_RCC_OscConfig+0x8a>
 80027ca:	4b7c      	ldr	r3, [pc, #496]	; (80029bc <HAL_RCC_OscConfig+0x270>)
 80027cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027d0:	091b      	lsrs	r3, r3, #4
 80027d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d223      	bcs.n	8002822 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a1b      	ldr	r3, [r3, #32]
 80027de:	4618      	mov	r0, r3
 80027e0:	f000 fd54 	bl	800328c <RCC_SetFlashLatencyFromMSIRange>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e3ba      	b.n	8002f64 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027ee:	4b73      	ldr	r3, [pc, #460]	; (80029bc <HAL_RCC_OscConfig+0x270>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a72      	ldr	r2, [pc, #456]	; (80029bc <HAL_RCC_OscConfig+0x270>)
 80027f4:	f043 0308 	orr.w	r3, r3, #8
 80027f8:	6013      	str	r3, [r2, #0]
 80027fa:	4b70      	ldr	r3, [pc, #448]	; (80029bc <HAL_RCC_OscConfig+0x270>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a1b      	ldr	r3, [r3, #32]
 8002806:	496d      	ldr	r1, [pc, #436]	; (80029bc <HAL_RCC_OscConfig+0x270>)
 8002808:	4313      	orrs	r3, r2
 800280a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800280c:	4b6b      	ldr	r3, [pc, #428]	; (80029bc <HAL_RCC_OscConfig+0x270>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	69db      	ldr	r3, [r3, #28]
 8002818:	021b      	lsls	r3, r3, #8
 800281a:	4968      	ldr	r1, [pc, #416]	; (80029bc <HAL_RCC_OscConfig+0x270>)
 800281c:	4313      	orrs	r3, r2
 800281e:	604b      	str	r3, [r1, #4]
 8002820:	e025      	b.n	800286e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002822:	4b66      	ldr	r3, [pc, #408]	; (80029bc <HAL_RCC_OscConfig+0x270>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a65      	ldr	r2, [pc, #404]	; (80029bc <HAL_RCC_OscConfig+0x270>)
 8002828:	f043 0308 	orr.w	r3, r3, #8
 800282c:	6013      	str	r3, [r2, #0]
 800282e:	4b63      	ldr	r3, [pc, #396]	; (80029bc <HAL_RCC_OscConfig+0x270>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a1b      	ldr	r3, [r3, #32]
 800283a:	4960      	ldr	r1, [pc, #384]	; (80029bc <HAL_RCC_OscConfig+0x270>)
 800283c:	4313      	orrs	r3, r2
 800283e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002840:	4b5e      	ldr	r3, [pc, #376]	; (80029bc <HAL_RCC_OscConfig+0x270>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	69db      	ldr	r3, [r3, #28]
 800284c:	021b      	lsls	r3, r3, #8
 800284e:	495b      	ldr	r1, [pc, #364]	; (80029bc <HAL_RCC_OscConfig+0x270>)
 8002850:	4313      	orrs	r3, r2
 8002852:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d109      	bne.n	800286e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a1b      	ldr	r3, [r3, #32]
 800285e:	4618      	mov	r0, r3
 8002860:	f000 fd14 	bl	800328c <RCC_SetFlashLatencyFromMSIRange>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e37a      	b.n	8002f64 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800286e:	f000 fc81 	bl	8003174 <HAL_RCC_GetSysClockFreq>
 8002872:	4602      	mov	r2, r0
 8002874:	4b51      	ldr	r3, [pc, #324]	; (80029bc <HAL_RCC_OscConfig+0x270>)
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	091b      	lsrs	r3, r3, #4
 800287a:	f003 030f 	and.w	r3, r3, #15
 800287e:	4950      	ldr	r1, [pc, #320]	; (80029c0 <HAL_RCC_OscConfig+0x274>)
 8002880:	5ccb      	ldrb	r3, [r1, r3]
 8002882:	f003 031f 	and.w	r3, r3, #31
 8002886:	fa22 f303 	lsr.w	r3, r2, r3
 800288a:	4a4e      	ldr	r2, [pc, #312]	; (80029c4 <HAL_RCC_OscConfig+0x278>)
 800288c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800288e:	4b4e      	ldr	r3, [pc, #312]	; (80029c8 <HAL_RCC_OscConfig+0x27c>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4618      	mov	r0, r3
 8002894:	f7fe f9da 	bl	8000c4c <HAL_InitTick>
 8002898:	4603      	mov	r3, r0
 800289a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800289c:	7bfb      	ldrb	r3, [r7, #15]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d052      	beq.n	8002948 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80028a2:	7bfb      	ldrb	r3, [r7, #15]
 80028a4:	e35e      	b.n	8002f64 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d032      	beq.n	8002914 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80028ae:	4b43      	ldr	r3, [pc, #268]	; (80029bc <HAL_RCC_OscConfig+0x270>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a42      	ldr	r2, [pc, #264]	; (80029bc <HAL_RCC_OscConfig+0x270>)
 80028b4:	f043 0301 	orr.w	r3, r3, #1
 80028b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028ba:	f7fe fa17 	bl	8000cec <HAL_GetTick>
 80028be:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028c0:	e008      	b.n	80028d4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028c2:	f7fe fa13 	bl	8000cec <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d901      	bls.n	80028d4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e347      	b.n	8002f64 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028d4:	4b39      	ldr	r3, [pc, #228]	; (80029bc <HAL_RCC_OscConfig+0x270>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d0f0      	beq.n	80028c2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028e0:	4b36      	ldr	r3, [pc, #216]	; (80029bc <HAL_RCC_OscConfig+0x270>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a35      	ldr	r2, [pc, #212]	; (80029bc <HAL_RCC_OscConfig+0x270>)
 80028e6:	f043 0308 	orr.w	r3, r3, #8
 80028ea:	6013      	str	r3, [r2, #0]
 80028ec:	4b33      	ldr	r3, [pc, #204]	; (80029bc <HAL_RCC_OscConfig+0x270>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a1b      	ldr	r3, [r3, #32]
 80028f8:	4930      	ldr	r1, [pc, #192]	; (80029bc <HAL_RCC_OscConfig+0x270>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028fe:	4b2f      	ldr	r3, [pc, #188]	; (80029bc <HAL_RCC_OscConfig+0x270>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	69db      	ldr	r3, [r3, #28]
 800290a:	021b      	lsls	r3, r3, #8
 800290c:	492b      	ldr	r1, [pc, #172]	; (80029bc <HAL_RCC_OscConfig+0x270>)
 800290e:	4313      	orrs	r3, r2
 8002910:	604b      	str	r3, [r1, #4]
 8002912:	e01a      	b.n	800294a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002914:	4b29      	ldr	r3, [pc, #164]	; (80029bc <HAL_RCC_OscConfig+0x270>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a28      	ldr	r2, [pc, #160]	; (80029bc <HAL_RCC_OscConfig+0x270>)
 800291a:	f023 0301 	bic.w	r3, r3, #1
 800291e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002920:	f7fe f9e4 	bl	8000cec <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002928:	f7fe f9e0 	bl	8000cec <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e314      	b.n	8002f64 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800293a:	4b20      	ldr	r3, [pc, #128]	; (80029bc <HAL_RCC_OscConfig+0x270>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1f0      	bne.n	8002928 <HAL_RCC_OscConfig+0x1dc>
 8002946:	e000      	b.n	800294a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002948:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	2b00      	cmp	r3, #0
 8002954:	d073      	beq.n	8002a3e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	2b08      	cmp	r3, #8
 800295a:	d005      	beq.n	8002968 <HAL_RCC_OscConfig+0x21c>
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	2b0c      	cmp	r3, #12
 8002960:	d10e      	bne.n	8002980 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	2b03      	cmp	r3, #3
 8002966:	d10b      	bne.n	8002980 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002968:	4b14      	ldr	r3, [pc, #80]	; (80029bc <HAL_RCC_OscConfig+0x270>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d063      	beq.n	8002a3c <HAL_RCC_OscConfig+0x2f0>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d15f      	bne.n	8002a3c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e2f1      	b.n	8002f64 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002988:	d106      	bne.n	8002998 <HAL_RCC_OscConfig+0x24c>
 800298a:	4b0c      	ldr	r3, [pc, #48]	; (80029bc <HAL_RCC_OscConfig+0x270>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a0b      	ldr	r2, [pc, #44]	; (80029bc <HAL_RCC_OscConfig+0x270>)
 8002990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002994:	6013      	str	r3, [r2, #0]
 8002996:	e025      	b.n	80029e4 <HAL_RCC_OscConfig+0x298>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029a0:	d114      	bne.n	80029cc <HAL_RCC_OscConfig+0x280>
 80029a2:	4b06      	ldr	r3, [pc, #24]	; (80029bc <HAL_RCC_OscConfig+0x270>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a05      	ldr	r2, [pc, #20]	; (80029bc <HAL_RCC_OscConfig+0x270>)
 80029a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029ac:	6013      	str	r3, [r2, #0]
 80029ae:	4b03      	ldr	r3, [pc, #12]	; (80029bc <HAL_RCC_OscConfig+0x270>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a02      	ldr	r2, [pc, #8]	; (80029bc <HAL_RCC_OscConfig+0x270>)
 80029b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029b8:	6013      	str	r3, [r2, #0]
 80029ba:	e013      	b.n	80029e4 <HAL_RCC_OscConfig+0x298>
 80029bc:	40021000 	.word	0x40021000
 80029c0:	0800398c 	.word	0x0800398c
 80029c4:	20000000 	.word	0x20000000
 80029c8:	20000004 	.word	0x20000004
 80029cc:	4ba0      	ldr	r3, [pc, #640]	; (8002c50 <HAL_RCC_OscConfig+0x504>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a9f      	ldr	r2, [pc, #636]	; (8002c50 <HAL_RCC_OscConfig+0x504>)
 80029d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029d6:	6013      	str	r3, [r2, #0]
 80029d8:	4b9d      	ldr	r3, [pc, #628]	; (8002c50 <HAL_RCC_OscConfig+0x504>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a9c      	ldr	r2, [pc, #624]	; (8002c50 <HAL_RCC_OscConfig+0x504>)
 80029de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d013      	beq.n	8002a14 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ec:	f7fe f97e 	bl	8000cec <HAL_GetTick>
 80029f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029f2:	e008      	b.n	8002a06 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029f4:	f7fe f97a 	bl	8000cec <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b64      	cmp	r3, #100	; 0x64
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e2ae      	b.n	8002f64 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a06:	4b92      	ldr	r3, [pc, #584]	; (8002c50 <HAL_RCC_OscConfig+0x504>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d0f0      	beq.n	80029f4 <HAL_RCC_OscConfig+0x2a8>
 8002a12:	e014      	b.n	8002a3e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a14:	f7fe f96a 	bl	8000cec <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a1c:	f7fe f966 	bl	8000cec <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b64      	cmp	r3, #100	; 0x64
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e29a      	b.n	8002f64 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a2e:	4b88      	ldr	r3, [pc, #544]	; (8002c50 <HAL_RCC_OscConfig+0x504>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1f0      	bne.n	8002a1c <HAL_RCC_OscConfig+0x2d0>
 8002a3a:	e000      	b.n	8002a3e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d060      	beq.n	8002b0c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	2b04      	cmp	r3, #4
 8002a4e:	d005      	beq.n	8002a5c <HAL_RCC_OscConfig+0x310>
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	2b0c      	cmp	r3, #12
 8002a54:	d119      	bne.n	8002a8a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d116      	bne.n	8002a8a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a5c:	4b7c      	ldr	r3, [pc, #496]	; (8002c50 <HAL_RCC_OscConfig+0x504>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d005      	beq.n	8002a74 <HAL_RCC_OscConfig+0x328>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d101      	bne.n	8002a74 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e277      	b.n	8002f64 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a74:	4b76      	ldr	r3, [pc, #472]	; (8002c50 <HAL_RCC_OscConfig+0x504>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	691b      	ldr	r3, [r3, #16]
 8002a80:	061b      	lsls	r3, r3, #24
 8002a82:	4973      	ldr	r1, [pc, #460]	; (8002c50 <HAL_RCC_OscConfig+0x504>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a88:	e040      	b.n	8002b0c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d023      	beq.n	8002ada <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a92:	4b6f      	ldr	r3, [pc, #444]	; (8002c50 <HAL_RCC_OscConfig+0x504>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a6e      	ldr	r2, [pc, #440]	; (8002c50 <HAL_RCC_OscConfig+0x504>)
 8002a98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a9e:	f7fe f925 	bl	8000cec <HAL_GetTick>
 8002aa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002aa4:	e008      	b.n	8002ab8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aa6:	f7fe f921 	bl	8000cec <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d901      	bls.n	8002ab8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e255      	b.n	8002f64 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ab8:	4b65      	ldr	r3, [pc, #404]	; (8002c50 <HAL_RCC_OscConfig+0x504>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d0f0      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ac4:	4b62      	ldr	r3, [pc, #392]	; (8002c50 <HAL_RCC_OscConfig+0x504>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	061b      	lsls	r3, r3, #24
 8002ad2:	495f      	ldr	r1, [pc, #380]	; (8002c50 <HAL_RCC_OscConfig+0x504>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	604b      	str	r3, [r1, #4]
 8002ad8:	e018      	b.n	8002b0c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ada:	4b5d      	ldr	r3, [pc, #372]	; (8002c50 <HAL_RCC_OscConfig+0x504>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a5c      	ldr	r2, [pc, #368]	; (8002c50 <HAL_RCC_OscConfig+0x504>)
 8002ae0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ae4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae6:	f7fe f901 	bl	8000cec <HAL_GetTick>
 8002aea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002aec:	e008      	b.n	8002b00 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aee:	f7fe f8fd 	bl	8000cec <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d901      	bls.n	8002b00 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	e231      	b.n	8002f64 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b00:	4b53      	ldr	r3, [pc, #332]	; (8002c50 <HAL_RCC_OscConfig+0x504>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d1f0      	bne.n	8002aee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0308 	and.w	r3, r3, #8
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d03c      	beq.n	8002b92 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	695b      	ldr	r3, [r3, #20]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d01c      	beq.n	8002b5a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b20:	4b4b      	ldr	r3, [pc, #300]	; (8002c50 <HAL_RCC_OscConfig+0x504>)
 8002b22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b26:	4a4a      	ldr	r2, [pc, #296]	; (8002c50 <HAL_RCC_OscConfig+0x504>)
 8002b28:	f043 0301 	orr.w	r3, r3, #1
 8002b2c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b30:	f7fe f8dc 	bl	8000cec <HAL_GetTick>
 8002b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b36:	e008      	b.n	8002b4a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b38:	f7fe f8d8 	bl	8000cec <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e20c      	b.n	8002f64 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b4a:	4b41      	ldr	r3, [pc, #260]	; (8002c50 <HAL_RCC_OscConfig+0x504>)
 8002b4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b50:	f003 0302 	and.w	r3, r3, #2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d0ef      	beq.n	8002b38 <HAL_RCC_OscConfig+0x3ec>
 8002b58:	e01b      	b.n	8002b92 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b5a:	4b3d      	ldr	r3, [pc, #244]	; (8002c50 <HAL_RCC_OscConfig+0x504>)
 8002b5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b60:	4a3b      	ldr	r2, [pc, #236]	; (8002c50 <HAL_RCC_OscConfig+0x504>)
 8002b62:	f023 0301 	bic.w	r3, r3, #1
 8002b66:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b6a:	f7fe f8bf 	bl	8000cec <HAL_GetTick>
 8002b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b70:	e008      	b.n	8002b84 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b72:	f7fe f8bb 	bl	8000cec <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d901      	bls.n	8002b84 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e1ef      	b.n	8002f64 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b84:	4b32      	ldr	r3, [pc, #200]	; (8002c50 <HAL_RCC_OscConfig+0x504>)
 8002b86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1ef      	bne.n	8002b72 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0304 	and.w	r3, r3, #4
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f000 80a6 	beq.w	8002cec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002ba4:	4b2a      	ldr	r3, [pc, #168]	; (8002c50 <HAL_RCC_OscConfig+0x504>)
 8002ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d10d      	bne.n	8002bcc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bb0:	4b27      	ldr	r3, [pc, #156]	; (8002c50 <HAL_RCC_OscConfig+0x504>)
 8002bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb4:	4a26      	ldr	r2, [pc, #152]	; (8002c50 <HAL_RCC_OscConfig+0x504>)
 8002bb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bba:	6593      	str	r3, [r2, #88]	; 0x58
 8002bbc:	4b24      	ldr	r3, [pc, #144]	; (8002c50 <HAL_RCC_OscConfig+0x504>)
 8002bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc4:	60bb      	str	r3, [r7, #8]
 8002bc6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bcc:	4b21      	ldr	r3, [pc, #132]	; (8002c54 <HAL_RCC_OscConfig+0x508>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d118      	bne.n	8002c0a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bd8:	4b1e      	ldr	r3, [pc, #120]	; (8002c54 <HAL_RCC_OscConfig+0x508>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a1d      	ldr	r2, [pc, #116]	; (8002c54 <HAL_RCC_OscConfig+0x508>)
 8002bde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002be2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002be4:	f7fe f882 	bl	8000cec <HAL_GetTick>
 8002be8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bea:	e008      	b.n	8002bfe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bec:	f7fe f87e 	bl	8000cec <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e1b2      	b.n	8002f64 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bfe:	4b15      	ldr	r3, [pc, #84]	; (8002c54 <HAL_RCC_OscConfig+0x508>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d0f0      	beq.n	8002bec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d108      	bne.n	8002c24 <HAL_RCC_OscConfig+0x4d8>
 8002c12:	4b0f      	ldr	r3, [pc, #60]	; (8002c50 <HAL_RCC_OscConfig+0x504>)
 8002c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c18:	4a0d      	ldr	r2, [pc, #52]	; (8002c50 <HAL_RCC_OscConfig+0x504>)
 8002c1a:	f043 0301 	orr.w	r3, r3, #1
 8002c1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c22:	e029      	b.n	8002c78 <HAL_RCC_OscConfig+0x52c>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	2b05      	cmp	r3, #5
 8002c2a:	d115      	bne.n	8002c58 <HAL_RCC_OscConfig+0x50c>
 8002c2c:	4b08      	ldr	r3, [pc, #32]	; (8002c50 <HAL_RCC_OscConfig+0x504>)
 8002c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c32:	4a07      	ldr	r2, [pc, #28]	; (8002c50 <HAL_RCC_OscConfig+0x504>)
 8002c34:	f043 0304 	orr.w	r3, r3, #4
 8002c38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c3c:	4b04      	ldr	r3, [pc, #16]	; (8002c50 <HAL_RCC_OscConfig+0x504>)
 8002c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c42:	4a03      	ldr	r2, [pc, #12]	; (8002c50 <HAL_RCC_OscConfig+0x504>)
 8002c44:	f043 0301 	orr.w	r3, r3, #1
 8002c48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c4c:	e014      	b.n	8002c78 <HAL_RCC_OscConfig+0x52c>
 8002c4e:	bf00      	nop
 8002c50:	40021000 	.word	0x40021000
 8002c54:	40007000 	.word	0x40007000
 8002c58:	4b9a      	ldr	r3, [pc, #616]	; (8002ec4 <HAL_RCC_OscConfig+0x778>)
 8002c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c5e:	4a99      	ldr	r2, [pc, #612]	; (8002ec4 <HAL_RCC_OscConfig+0x778>)
 8002c60:	f023 0301 	bic.w	r3, r3, #1
 8002c64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c68:	4b96      	ldr	r3, [pc, #600]	; (8002ec4 <HAL_RCC_OscConfig+0x778>)
 8002c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c6e:	4a95      	ldr	r2, [pc, #596]	; (8002ec4 <HAL_RCC_OscConfig+0x778>)
 8002c70:	f023 0304 	bic.w	r3, r3, #4
 8002c74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d016      	beq.n	8002cae <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c80:	f7fe f834 	bl	8000cec <HAL_GetTick>
 8002c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c86:	e00a      	b.n	8002c9e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c88:	f7fe f830 	bl	8000cec <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e162      	b.n	8002f64 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c9e:	4b89      	ldr	r3, [pc, #548]	; (8002ec4 <HAL_RCC_OscConfig+0x778>)
 8002ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ca4:	f003 0302 	and.w	r3, r3, #2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d0ed      	beq.n	8002c88 <HAL_RCC_OscConfig+0x53c>
 8002cac:	e015      	b.n	8002cda <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cae:	f7fe f81d 	bl	8000cec <HAL_GetTick>
 8002cb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cb4:	e00a      	b.n	8002ccc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cb6:	f7fe f819 	bl	8000cec <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d901      	bls.n	8002ccc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e14b      	b.n	8002f64 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ccc:	4b7d      	ldr	r3, [pc, #500]	; (8002ec4 <HAL_RCC_OscConfig+0x778>)
 8002cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1ed      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cda:	7ffb      	ldrb	r3, [r7, #31]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d105      	bne.n	8002cec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ce0:	4b78      	ldr	r3, [pc, #480]	; (8002ec4 <HAL_RCC_OscConfig+0x778>)
 8002ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ce4:	4a77      	ldr	r2, [pc, #476]	; (8002ec4 <HAL_RCC_OscConfig+0x778>)
 8002ce6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cea:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0320 	and.w	r3, r3, #32
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d03c      	beq.n	8002d72 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d01c      	beq.n	8002d3a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d00:	4b70      	ldr	r3, [pc, #448]	; (8002ec4 <HAL_RCC_OscConfig+0x778>)
 8002d02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d06:	4a6f      	ldr	r2, [pc, #444]	; (8002ec4 <HAL_RCC_OscConfig+0x778>)
 8002d08:	f043 0301 	orr.w	r3, r3, #1
 8002d0c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d10:	f7fd ffec 	bl	8000cec <HAL_GetTick>
 8002d14:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d16:	e008      	b.n	8002d2a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d18:	f7fd ffe8 	bl	8000cec <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e11c      	b.n	8002f64 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d2a:	4b66      	ldr	r3, [pc, #408]	; (8002ec4 <HAL_RCC_OscConfig+0x778>)
 8002d2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d0ef      	beq.n	8002d18 <HAL_RCC_OscConfig+0x5cc>
 8002d38:	e01b      	b.n	8002d72 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d3a:	4b62      	ldr	r3, [pc, #392]	; (8002ec4 <HAL_RCC_OscConfig+0x778>)
 8002d3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d40:	4a60      	ldr	r2, [pc, #384]	; (8002ec4 <HAL_RCC_OscConfig+0x778>)
 8002d42:	f023 0301 	bic.w	r3, r3, #1
 8002d46:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d4a:	f7fd ffcf 	bl	8000cec <HAL_GetTick>
 8002d4e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d50:	e008      	b.n	8002d64 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d52:	f7fd ffcb 	bl	8000cec <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d901      	bls.n	8002d64 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e0ff      	b.n	8002f64 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d64:	4b57      	ldr	r3, [pc, #348]	; (8002ec4 <HAL_RCC_OscConfig+0x778>)
 8002d66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d1ef      	bne.n	8002d52 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	f000 80f3 	beq.w	8002f62 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	f040 80c9 	bne.w	8002f18 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002d86:	4b4f      	ldr	r3, [pc, #316]	; (8002ec4 <HAL_RCC_OscConfig+0x778>)
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	f003 0203 	and.w	r2, r3, #3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d12c      	bne.n	8002df4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da4:	3b01      	subs	r3, #1
 8002da6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d123      	bne.n	8002df4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002db6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d11b      	bne.n	8002df4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d113      	bne.n	8002df4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd6:	085b      	lsrs	r3, r3, #1
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d109      	bne.n	8002df4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dea:	085b      	lsrs	r3, r3, #1
 8002dec:	3b01      	subs	r3, #1
 8002dee:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d06b      	beq.n	8002ecc <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	2b0c      	cmp	r3, #12
 8002df8:	d062      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002dfa:	4b32      	ldr	r3, [pc, #200]	; (8002ec4 <HAL_RCC_OscConfig+0x778>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e0ac      	b.n	8002f64 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002e0a:	4b2e      	ldr	r3, [pc, #184]	; (8002ec4 <HAL_RCC_OscConfig+0x778>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a2d      	ldr	r2, [pc, #180]	; (8002ec4 <HAL_RCC_OscConfig+0x778>)
 8002e10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e14:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e16:	f7fd ff69 	bl	8000cec <HAL_GetTick>
 8002e1a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e1c:	e008      	b.n	8002e30 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e1e:	f7fd ff65 	bl	8000cec <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e099      	b.n	8002f64 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e30:	4b24      	ldr	r3, [pc, #144]	; (8002ec4 <HAL_RCC_OscConfig+0x778>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d1f0      	bne.n	8002e1e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e3c:	4b21      	ldr	r3, [pc, #132]	; (8002ec4 <HAL_RCC_OscConfig+0x778>)
 8002e3e:	68da      	ldr	r2, [r3, #12]
 8002e40:	4b21      	ldr	r3, [pc, #132]	; (8002ec8 <HAL_RCC_OscConfig+0x77c>)
 8002e42:	4013      	ands	r3, r2
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002e4c:	3a01      	subs	r2, #1
 8002e4e:	0112      	lsls	r2, r2, #4
 8002e50:	4311      	orrs	r1, r2
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e56:	0212      	lsls	r2, r2, #8
 8002e58:	4311      	orrs	r1, r2
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002e5e:	0852      	lsrs	r2, r2, #1
 8002e60:	3a01      	subs	r2, #1
 8002e62:	0552      	lsls	r2, r2, #21
 8002e64:	4311      	orrs	r1, r2
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002e6a:	0852      	lsrs	r2, r2, #1
 8002e6c:	3a01      	subs	r2, #1
 8002e6e:	0652      	lsls	r2, r2, #25
 8002e70:	4311      	orrs	r1, r2
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e76:	06d2      	lsls	r2, r2, #27
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	4912      	ldr	r1, [pc, #72]	; (8002ec4 <HAL_RCC_OscConfig+0x778>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002e80:	4b10      	ldr	r3, [pc, #64]	; (8002ec4 <HAL_RCC_OscConfig+0x778>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a0f      	ldr	r2, [pc, #60]	; (8002ec4 <HAL_RCC_OscConfig+0x778>)
 8002e86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e8a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e8c:	4b0d      	ldr	r3, [pc, #52]	; (8002ec4 <HAL_RCC_OscConfig+0x778>)
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	4a0c      	ldr	r2, [pc, #48]	; (8002ec4 <HAL_RCC_OscConfig+0x778>)
 8002e92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e96:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e98:	f7fd ff28 	bl	8000cec <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ea0:	f7fd ff24 	bl	8000cec <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e058      	b.n	8002f64 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eb2:	4b04      	ldr	r3, [pc, #16]	; (8002ec4 <HAL_RCC_OscConfig+0x778>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d0f0      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ebe:	e050      	b.n	8002f62 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e04f      	b.n	8002f64 <HAL_RCC_OscConfig+0x818>
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ecc:	4b27      	ldr	r3, [pc, #156]	; (8002f6c <HAL_RCC_OscConfig+0x820>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d144      	bne.n	8002f62 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002ed8:	4b24      	ldr	r3, [pc, #144]	; (8002f6c <HAL_RCC_OscConfig+0x820>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a23      	ldr	r2, [pc, #140]	; (8002f6c <HAL_RCC_OscConfig+0x820>)
 8002ede:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ee2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ee4:	4b21      	ldr	r3, [pc, #132]	; (8002f6c <HAL_RCC_OscConfig+0x820>)
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	4a20      	ldr	r2, [pc, #128]	; (8002f6c <HAL_RCC_OscConfig+0x820>)
 8002eea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002eee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ef0:	f7fd fefc 	bl	8000cec <HAL_GetTick>
 8002ef4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ef6:	e008      	b.n	8002f0a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ef8:	f7fd fef8 	bl	8000cec <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e02c      	b.n	8002f64 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f0a:	4b18      	ldr	r3, [pc, #96]	; (8002f6c <HAL_RCC_OscConfig+0x820>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d0f0      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x7ac>
 8002f16:	e024      	b.n	8002f62 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	2b0c      	cmp	r3, #12
 8002f1c:	d01f      	beq.n	8002f5e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f1e:	4b13      	ldr	r3, [pc, #76]	; (8002f6c <HAL_RCC_OscConfig+0x820>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a12      	ldr	r2, [pc, #72]	; (8002f6c <HAL_RCC_OscConfig+0x820>)
 8002f24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f2a:	f7fd fedf 	bl	8000cec <HAL_GetTick>
 8002f2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f30:	e008      	b.n	8002f44 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f32:	f7fd fedb 	bl	8000cec <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d901      	bls.n	8002f44 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e00f      	b.n	8002f64 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f44:	4b09      	ldr	r3, [pc, #36]	; (8002f6c <HAL_RCC_OscConfig+0x820>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d1f0      	bne.n	8002f32 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002f50:	4b06      	ldr	r3, [pc, #24]	; (8002f6c <HAL_RCC_OscConfig+0x820>)
 8002f52:	68da      	ldr	r2, [r3, #12]
 8002f54:	4905      	ldr	r1, [pc, #20]	; (8002f6c <HAL_RCC_OscConfig+0x820>)
 8002f56:	4b06      	ldr	r3, [pc, #24]	; (8002f70 <HAL_RCC_OscConfig+0x824>)
 8002f58:	4013      	ands	r3, r2
 8002f5a:	60cb      	str	r3, [r1, #12]
 8002f5c:	e001      	b.n	8002f62 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e000      	b.n	8002f64 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002f62:	2300      	movs	r3, #0
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3720      	adds	r7, #32
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	feeefffc 	.word	0xfeeefffc

08002f74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d101      	bne.n	8002f88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e0e7      	b.n	8003158 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f88:	4b75      	ldr	r3, [pc, #468]	; (8003160 <HAL_RCC_ClockConfig+0x1ec>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0307 	and.w	r3, r3, #7
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d910      	bls.n	8002fb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f96:	4b72      	ldr	r3, [pc, #456]	; (8003160 <HAL_RCC_ClockConfig+0x1ec>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f023 0207 	bic.w	r2, r3, #7
 8002f9e:	4970      	ldr	r1, [pc, #448]	; (8003160 <HAL_RCC_ClockConfig+0x1ec>)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fa6:	4b6e      	ldr	r3, [pc, #440]	; (8003160 <HAL_RCC_ClockConfig+0x1ec>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0307 	and.w	r3, r3, #7
 8002fae:	683a      	ldr	r2, [r7, #0]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d001      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e0cf      	b.n	8003158 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0302 	and.w	r3, r3, #2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d010      	beq.n	8002fe6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689a      	ldr	r2, [r3, #8]
 8002fc8:	4b66      	ldr	r3, [pc, #408]	; (8003164 <HAL_RCC_ClockConfig+0x1f0>)
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d908      	bls.n	8002fe6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fd4:	4b63      	ldr	r3, [pc, #396]	; (8003164 <HAL_RCC_ClockConfig+0x1f0>)
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	4960      	ldr	r1, [pc, #384]	; (8003164 <HAL_RCC_ClockConfig+0x1f0>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d04c      	beq.n	800308c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	2b03      	cmp	r3, #3
 8002ff8:	d107      	bne.n	800300a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ffa:	4b5a      	ldr	r3, [pc, #360]	; (8003164 <HAL_RCC_ClockConfig+0x1f0>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d121      	bne.n	800304a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e0a6      	b.n	8003158 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	2b02      	cmp	r3, #2
 8003010:	d107      	bne.n	8003022 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003012:	4b54      	ldr	r3, [pc, #336]	; (8003164 <HAL_RCC_ClockConfig+0x1f0>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d115      	bne.n	800304a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e09a      	b.n	8003158 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d107      	bne.n	800303a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800302a:	4b4e      	ldr	r3, [pc, #312]	; (8003164 <HAL_RCC_ClockConfig+0x1f0>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d109      	bne.n	800304a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e08e      	b.n	8003158 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800303a:	4b4a      	ldr	r3, [pc, #296]	; (8003164 <HAL_RCC_ClockConfig+0x1f0>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003042:	2b00      	cmp	r3, #0
 8003044:	d101      	bne.n	800304a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e086      	b.n	8003158 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800304a:	4b46      	ldr	r3, [pc, #280]	; (8003164 <HAL_RCC_ClockConfig+0x1f0>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f023 0203 	bic.w	r2, r3, #3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	4943      	ldr	r1, [pc, #268]	; (8003164 <HAL_RCC_ClockConfig+0x1f0>)
 8003058:	4313      	orrs	r3, r2
 800305a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800305c:	f7fd fe46 	bl	8000cec <HAL_GetTick>
 8003060:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003062:	e00a      	b.n	800307a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003064:	f7fd fe42 	bl	8000cec <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003072:	4293      	cmp	r3, r2
 8003074:	d901      	bls.n	800307a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e06e      	b.n	8003158 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800307a:	4b3a      	ldr	r3, [pc, #232]	; (8003164 <HAL_RCC_ClockConfig+0x1f0>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f003 020c 	and.w	r2, r3, #12
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	429a      	cmp	r2, r3
 800308a:	d1eb      	bne.n	8003064 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0302 	and.w	r3, r3, #2
 8003094:	2b00      	cmp	r3, #0
 8003096:	d010      	beq.n	80030ba <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689a      	ldr	r2, [r3, #8]
 800309c:	4b31      	ldr	r3, [pc, #196]	; (8003164 <HAL_RCC_ClockConfig+0x1f0>)
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d208      	bcs.n	80030ba <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030a8:	4b2e      	ldr	r3, [pc, #184]	; (8003164 <HAL_RCC_ClockConfig+0x1f0>)
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	492b      	ldr	r1, [pc, #172]	; (8003164 <HAL_RCC_ClockConfig+0x1f0>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030ba:	4b29      	ldr	r3, [pc, #164]	; (8003160 <HAL_RCC_ClockConfig+0x1ec>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0307 	and.w	r3, r3, #7
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d210      	bcs.n	80030ea <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030c8:	4b25      	ldr	r3, [pc, #148]	; (8003160 <HAL_RCC_ClockConfig+0x1ec>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f023 0207 	bic.w	r2, r3, #7
 80030d0:	4923      	ldr	r1, [pc, #140]	; (8003160 <HAL_RCC_ClockConfig+0x1ec>)
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030d8:	4b21      	ldr	r3, [pc, #132]	; (8003160 <HAL_RCC_ClockConfig+0x1ec>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0307 	and.w	r3, r3, #7
 80030e0:	683a      	ldr	r2, [r7, #0]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d001      	beq.n	80030ea <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e036      	b.n	8003158 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0304 	and.w	r3, r3, #4
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d008      	beq.n	8003108 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030f6:	4b1b      	ldr	r3, [pc, #108]	; (8003164 <HAL_RCC_ClockConfig+0x1f0>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	4918      	ldr	r1, [pc, #96]	; (8003164 <HAL_RCC_ClockConfig+0x1f0>)
 8003104:	4313      	orrs	r3, r2
 8003106:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0308 	and.w	r3, r3, #8
 8003110:	2b00      	cmp	r3, #0
 8003112:	d009      	beq.n	8003128 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003114:	4b13      	ldr	r3, [pc, #76]	; (8003164 <HAL_RCC_ClockConfig+0x1f0>)
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	00db      	lsls	r3, r3, #3
 8003122:	4910      	ldr	r1, [pc, #64]	; (8003164 <HAL_RCC_ClockConfig+0x1f0>)
 8003124:	4313      	orrs	r3, r2
 8003126:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003128:	f000 f824 	bl	8003174 <HAL_RCC_GetSysClockFreq>
 800312c:	4602      	mov	r2, r0
 800312e:	4b0d      	ldr	r3, [pc, #52]	; (8003164 <HAL_RCC_ClockConfig+0x1f0>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	091b      	lsrs	r3, r3, #4
 8003134:	f003 030f 	and.w	r3, r3, #15
 8003138:	490b      	ldr	r1, [pc, #44]	; (8003168 <HAL_RCC_ClockConfig+0x1f4>)
 800313a:	5ccb      	ldrb	r3, [r1, r3]
 800313c:	f003 031f 	and.w	r3, r3, #31
 8003140:	fa22 f303 	lsr.w	r3, r2, r3
 8003144:	4a09      	ldr	r2, [pc, #36]	; (800316c <HAL_RCC_ClockConfig+0x1f8>)
 8003146:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003148:	4b09      	ldr	r3, [pc, #36]	; (8003170 <HAL_RCC_ClockConfig+0x1fc>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4618      	mov	r0, r3
 800314e:	f7fd fd7d 	bl	8000c4c <HAL_InitTick>
 8003152:	4603      	mov	r3, r0
 8003154:	72fb      	strb	r3, [r7, #11]

  return status;
 8003156:	7afb      	ldrb	r3, [r7, #11]
}
 8003158:	4618      	mov	r0, r3
 800315a:	3710      	adds	r7, #16
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	40022000 	.word	0x40022000
 8003164:	40021000 	.word	0x40021000
 8003168:	0800398c 	.word	0x0800398c
 800316c:	20000000 	.word	0x20000000
 8003170:	20000004 	.word	0x20000004

08003174 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003174:	b480      	push	{r7}
 8003176:	b089      	sub	sp, #36	; 0x24
 8003178:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800317a:	2300      	movs	r3, #0
 800317c:	61fb      	str	r3, [r7, #28]
 800317e:	2300      	movs	r3, #0
 8003180:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003182:	4b3e      	ldr	r3, [pc, #248]	; (800327c <HAL_RCC_GetSysClockFreq+0x108>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f003 030c 	and.w	r3, r3, #12
 800318a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800318c:	4b3b      	ldr	r3, [pc, #236]	; (800327c <HAL_RCC_GetSysClockFreq+0x108>)
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	f003 0303 	and.w	r3, r3, #3
 8003194:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d005      	beq.n	80031a8 <HAL_RCC_GetSysClockFreq+0x34>
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	2b0c      	cmp	r3, #12
 80031a0:	d121      	bne.n	80031e6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d11e      	bne.n	80031e6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80031a8:	4b34      	ldr	r3, [pc, #208]	; (800327c <HAL_RCC_GetSysClockFreq+0x108>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0308 	and.w	r3, r3, #8
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d107      	bne.n	80031c4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80031b4:	4b31      	ldr	r3, [pc, #196]	; (800327c <HAL_RCC_GetSysClockFreq+0x108>)
 80031b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031ba:	0a1b      	lsrs	r3, r3, #8
 80031bc:	f003 030f 	and.w	r3, r3, #15
 80031c0:	61fb      	str	r3, [r7, #28]
 80031c2:	e005      	b.n	80031d0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80031c4:	4b2d      	ldr	r3, [pc, #180]	; (800327c <HAL_RCC_GetSysClockFreq+0x108>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	091b      	lsrs	r3, r3, #4
 80031ca:	f003 030f 	and.w	r3, r3, #15
 80031ce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80031d0:	4a2b      	ldr	r2, [pc, #172]	; (8003280 <HAL_RCC_GetSysClockFreq+0x10c>)
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031d8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d10d      	bne.n	80031fc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031e4:	e00a      	b.n	80031fc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	2b04      	cmp	r3, #4
 80031ea:	d102      	bne.n	80031f2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80031ec:	4b25      	ldr	r3, [pc, #148]	; (8003284 <HAL_RCC_GetSysClockFreq+0x110>)
 80031ee:	61bb      	str	r3, [r7, #24]
 80031f0:	e004      	b.n	80031fc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	2b08      	cmp	r3, #8
 80031f6:	d101      	bne.n	80031fc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80031f8:	4b23      	ldr	r3, [pc, #140]	; (8003288 <HAL_RCC_GetSysClockFreq+0x114>)
 80031fa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	2b0c      	cmp	r3, #12
 8003200:	d134      	bne.n	800326c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003202:	4b1e      	ldr	r3, [pc, #120]	; (800327c <HAL_RCC_GetSysClockFreq+0x108>)
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	f003 0303 	and.w	r3, r3, #3
 800320a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	2b02      	cmp	r3, #2
 8003210:	d003      	beq.n	800321a <HAL_RCC_GetSysClockFreq+0xa6>
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	2b03      	cmp	r3, #3
 8003216:	d003      	beq.n	8003220 <HAL_RCC_GetSysClockFreq+0xac>
 8003218:	e005      	b.n	8003226 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800321a:	4b1a      	ldr	r3, [pc, #104]	; (8003284 <HAL_RCC_GetSysClockFreq+0x110>)
 800321c:	617b      	str	r3, [r7, #20]
      break;
 800321e:	e005      	b.n	800322c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003220:	4b19      	ldr	r3, [pc, #100]	; (8003288 <HAL_RCC_GetSysClockFreq+0x114>)
 8003222:	617b      	str	r3, [r7, #20]
      break;
 8003224:	e002      	b.n	800322c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	617b      	str	r3, [r7, #20]
      break;
 800322a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800322c:	4b13      	ldr	r3, [pc, #76]	; (800327c <HAL_RCC_GetSysClockFreq+0x108>)
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	091b      	lsrs	r3, r3, #4
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	3301      	adds	r3, #1
 8003238:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800323a:	4b10      	ldr	r3, [pc, #64]	; (800327c <HAL_RCC_GetSysClockFreq+0x108>)
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	0a1b      	lsrs	r3, r3, #8
 8003240:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003244:	697a      	ldr	r2, [r7, #20]
 8003246:	fb03 f202 	mul.w	r2, r3, r2
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003250:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003252:	4b0a      	ldr	r3, [pc, #40]	; (800327c <HAL_RCC_GetSysClockFreq+0x108>)
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	0e5b      	lsrs	r3, r3, #25
 8003258:	f003 0303 	and.w	r3, r3, #3
 800325c:	3301      	adds	r3, #1
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003262:	697a      	ldr	r2, [r7, #20]
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	fbb2 f3f3 	udiv	r3, r2, r3
 800326a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800326c:	69bb      	ldr	r3, [r7, #24]
}
 800326e:	4618      	mov	r0, r3
 8003270:	3724      	adds	r7, #36	; 0x24
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	40021000 	.word	0x40021000
 8003280:	0800399c 	.word	0x0800399c
 8003284:	00f42400 	.word	0x00f42400
 8003288:	007a1200 	.word	0x007a1200

0800328c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b086      	sub	sp, #24
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003294:	2300      	movs	r3, #0
 8003296:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003298:	4b2a      	ldr	r3, [pc, #168]	; (8003344 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800329a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800329c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d003      	beq.n	80032ac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80032a4:	f7ff f9ee 	bl	8002684 <HAL_PWREx_GetVoltageRange>
 80032a8:	6178      	str	r0, [r7, #20]
 80032aa:	e014      	b.n	80032d6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80032ac:	4b25      	ldr	r3, [pc, #148]	; (8003344 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b0:	4a24      	ldr	r2, [pc, #144]	; (8003344 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032b6:	6593      	str	r3, [r2, #88]	; 0x58
 80032b8:	4b22      	ldr	r3, [pc, #136]	; (8003344 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032c0:	60fb      	str	r3, [r7, #12]
 80032c2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80032c4:	f7ff f9de 	bl	8002684 <HAL_PWREx_GetVoltageRange>
 80032c8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80032ca:	4b1e      	ldr	r3, [pc, #120]	; (8003344 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ce:	4a1d      	ldr	r2, [pc, #116]	; (8003344 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032d4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032dc:	d10b      	bne.n	80032f6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2b80      	cmp	r3, #128	; 0x80
 80032e2:	d919      	bls.n	8003318 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2ba0      	cmp	r3, #160	; 0xa0
 80032e8:	d902      	bls.n	80032f0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80032ea:	2302      	movs	r3, #2
 80032ec:	613b      	str	r3, [r7, #16]
 80032ee:	e013      	b.n	8003318 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80032f0:	2301      	movs	r3, #1
 80032f2:	613b      	str	r3, [r7, #16]
 80032f4:	e010      	b.n	8003318 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2b80      	cmp	r3, #128	; 0x80
 80032fa:	d902      	bls.n	8003302 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80032fc:	2303      	movs	r3, #3
 80032fe:	613b      	str	r3, [r7, #16]
 8003300:	e00a      	b.n	8003318 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2b80      	cmp	r3, #128	; 0x80
 8003306:	d102      	bne.n	800330e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003308:	2302      	movs	r3, #2
 800330a:	613b      	str	r3, [r7, #16]
 800330c:	e004      	b.n	8003318 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2b70      	cmp	r3, #112	; 0x70
 8003312:	d101      	bne.n	8003318 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003314:	2301      	movs	r3, #1
 8003316:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003318:	4b0b      	ldr	r3, [pc, #44]	; (8003348 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f023 0207 	bic.w	r2, r3, #7
 8003320:	4909      	ldr	r1, [pc, #36]	; (8003348 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	4313      	orrs	r3, r2
 8003326:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003328:	4b07      	ldr	r3, [pc, #28]	; (8003348 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0307 	and.w	r3, r3, #7
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	429a      	cmp	r2, r3
 8003334:	d001      	beq.n	800333a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e000      	b.n	800333c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800333a:	2300      	movs	r3, #0
}
 800333c:	4618      	mov	r0, r3
 800333e:	3718      	adds	r7, #24
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	40021000 	.word	0x40021000
 8003348:	40022000 	.word	0x40022000

0800334c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003354:	2300      	movs	r3, #0
 8003356:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003358:	2300      	movs	r3, #0
 800335a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003364:	2b00      	cmp	r3, #0
 8003366:	d031      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800336c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003370:	d01a      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003372:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003376:	d814      	bhi.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003378:	2b00      	cmp	r3, #0
 800337a:	d009      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800337c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003380:	d10f      	bne.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003382:	4b5d      	ldr	r3, [pc, #372]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	4a5c      	ldr	r2, [pc, #368]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003388:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800338c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800338e:	e00c      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	3304      	adds	r3, #4
 8003394:	2100      	movs	r1, #0
 8003396:	4618      	mov	r0, r3
 8003398:	f000 f9ce 	bl	8003738 <RCCEx_PLLSAI1_Config>
 800339c:	4603      	mov	r3, r0
 800339e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033a0:	e003      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	74fb      	strb	r3, [r7, #19]
      break;
 80033a6:	e000      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80033a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033aa:	7cfb      	ldrb	r3, [r7, #19]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d10b      	bne.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033b0:	4b51      	ldr	r3, [pc, #324]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033be:	494e      	ldr	r1, [pc, #312]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80033c6:	e001      	b.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033c8:	7cfb      	ldrb	r3, [r7, #19]
 80033ca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f000 809e 	beq.w	8003516 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033da:	2300      	movs	r3, #0
 80033dc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80033de:	4b46      	ldr	r3, [pc, #280]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d101      	bne.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80033ea:	2301      	movs	r3, #1
 80033ec:	e000      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80033ee:	2300      	movs	r3, #0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00d      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033f4:	4b40      	ldr	r3, [pc, #256]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f8:	4a3f      	ldr	r2, [pc, #252]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033fe:	6593      	str	r3, [r2, #88]	; 0x58
 8003400:	4b3d      	ldr	r3, [pc, #244]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003404:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003408:	60bb      	str	r3, [r7, #8]
 800340a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800340c:	2301      	movs	r3, #1
 800340e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003410:	4b3a      	ldr	r3, [pc, #232]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a39      	ldr	r2, [pc, #228]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003416:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800341a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800341c:	f7fd fc66 	bl	8000cec <HAL_GetTick>
 8003420:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003422:	e009      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003424:	f7fd fc62 	bl	8000cec <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b02      	cmp	r3, #2
 8003430:	d902      	bls.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	74fb      	strb	r3, [r7, #19]
        break;
 8003436:	e005      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003438:	4b30      	ldr	r3, [pc, #192]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003440:	2b00      	cmp	r3, #0
 8003442:	d0ef      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003444:	7cfb      	ldrb	r3, [r7, #19]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d15a      	bne.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800344a:	4b2b      	ldr	r3, [pc, #172]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800344c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003450:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003454:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d01e      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003460:	697a      	ldr	r2, [r7, #20]
 8003462:	429a      	cmp	r2, r3
 8003464:	d019      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003466:	4b24      	ldr	r3, [pc, #144]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800346c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003470:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003472:	4b21      	ldr	r3, [pc, #132]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003478:	4a1f      	ldr	r2, [pc, #124]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800347a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800347e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003482:	4b1d      	ldr	r3, [pc, #116]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003488:	4a1b      	ldr	r2, [pc, #108]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800348a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800348e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003492:	4a19      	ldr	r2, [pc, #100]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	f003 0301 	and.w	r3, r3, #1
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d016      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a4:	f7fd fc22 	bl	8000cec <HAL_GetTick>
 80034a8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034aa:	e00b      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ac:	f7fd fc1e 	bl	8000cec <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d902      	bls.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	74fb      	strb	r3, [r7, #19]
            break;
 80034c2:	e006      	b.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034c4:	4b0c      	ldr	r3, [pc, #48]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d0ec      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80034d2:	7cfb      	ldrb	r3, [r7, #19]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d10b      	bne.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034d8:	4b07      	ldr	r3, [pc, #28]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034e6:	4904      	ldr	r1, [pc, #16]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80034ee:	e009      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80034f0:	7cfb      	ldrb	r3, [r7, #19]
 80034f2:	74bb      	strb	r3, [r7, #18]
 80034f4:	e006      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80034f6:	bf00      	nop
 80034f8:	40021000 	.word	0x40021000
 80034fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003500:	7cfb      	ldrb	r3, [r7, #19]
 8003502:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003504:	7c7b      	ldrb	r3, [r7, #17]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d105      	bne.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800350a:	4b8a      	ldr	r3, [pc, #552]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800350c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800350e:	4a89      	ldr	r2, [pc, #548]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003510:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003514:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00a      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003522:	4b84      	ldr	r3, [pc, #528]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003528:	f023 0203 	bic.w	r2, r3, #3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a1b      	ldr	r3, [r3, #32]
 8003530:	4980      	ldr	r1, [pc, #512]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003532:	4313      	orrs	r3, r2
 8003534:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0302 	and.w	r3, r3, #2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00a      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003544:	4b7b      	ldr	r3, [pc, #492]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800354a:	f023 020c 	bic.w	r2, r3, #12
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003552:	4978      	ldr	r1, [pc, #480]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003554:	4313      	orrs	r3, r2
 8003556:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0320 	and.w	r3, r3, #32
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00a      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003566:	4b73      	ldr	r3, [pc, #460]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800356c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003574:	496f      	ldr	r1, [pc, #444]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003576:	4313      	orrs	r3, r2
 8003578:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00a      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003588:	4b6a      	ldr	r3, [pc, #424]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800358a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800358e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003596:	4967      	ldr	r1, [pc, #412]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003598:	4313      	orrs	r3, r2
 800359a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00a      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80035aa:	4b62      	ldr	r3, [pc, #392]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80035ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b8:	495e      	ldr	r1, [pc, #376]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00a      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035cc:	4b59      	ldr	r3, [pc, #356]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80035ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035d2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035da:	4956      	ldr	r1, [pc, #344]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00a      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035ee:	4b51      	ldr	r3, [pc, #324]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80035f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fc:	494d      	ldr	r1, [pc, #308]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d028      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003610:	4b48      	ldr	r3, [pc, #288]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003616:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361e:	4945      	ldr	r1, [pc, #276]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003620:	4313      	orrs	r3, r2
 8003622:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800362e:	d106      	bne.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003630:	4b40      	ldr	r3, [pc, #256]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	4a3f      	ldr	r2, [pc, #252]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003636:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800363a:	60d3      	str	r3, [r2, #12]
 800363c:	e011      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003642:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003646:	d10c      	bne.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	3304      	adds	r3, #4
 800364c:	2101      	movs	r1, #1
 800364e:	4618      	mov	r0, r3
 8003650:	f000 f872 	bl	8003738 <RCCEx_PLLSAI1_Config>
 8003654:	4603      	mov	r3, r0
 8003656:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003658:	7cfb      	ldrb	r3, [r7, #19]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800365e:	7cfb      	ldrb	r3, [r7, #19]
 8003660:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d028      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800366e:	4b31      	ldr	r3, [pc, #196]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003674:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800367c:	492d      	ldr	r1, [pc, #180]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800367e:	4313      	orrs	r3, r2
 8003680:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003688:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800368c:	d106      	bne.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800368e:	4b29      	ldr	r3, [pc, #164]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	4a28      	ldr	r2, [pc, #160]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003698:	60d3      	str	r3, [r2, #12]
 800369a:	e011      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036a4:	d10c      	bne.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	3304      	adds	r3, #4
 80036aa:	2101      	movs	r1, #1
 80036ac:	4618      	mov	r0, r3
 80036ae:	f000 f843 	bl	8003738 <RCCEx_PLLSAI1_Config>
 80036b2:	4603      	mov	r3, r0
 80036b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036b6:	7cfb      	ldrb	r3, [r7, #19]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d001      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80036bc:	7cfb      	ldrb	r3, [r7, #19]
 80036be:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d01c      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036cc:	4b19      	ldr	r3, [pc, #100]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036d2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036da:	4916      	ldr	r1, [pc, #88]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036ea:	d10c      	bne.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	3304      	adds	r3, #4
 80036f0:	2102      	movs	r1, #2
 80036f2:	4618      	mov	r0, r3
 80036f4:	f000 f820 	bl	8003738 <RCCEx_PLLSAI1_Config>
 80036f8:	4603      	mov	r3, r0
 80036fa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036fc:	7cfb      	ldrb	r3, [r7, #19]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003702:	7cfb      	ldrb	r3, [r7, #19]
 8003704:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00a      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003712:	4b08      	ldr	r3, [pc, #32]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003718:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003720:	4904      	ldr	r1, [pc, #16]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003722:	4313      	orrs	r3, r2
 8003724:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003728:	7cbb      	ldrb	r3, [r7, #18]
}
 800372a:	4618      	mov	r0, r3
 800372c:	3718      	adds	r7, #24
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	40021000 	.word	0x40021000

08003738 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003742:	2300      	movs	r3, #0
 8003744:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003746:	4b74      	ldr	r3, [pc, #464]	; (8003918 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	f003 0303 	and.w	r3, r3, #3
 800374e:	2b00      	cmp	r3, #0
 8003750:	d018      	beq.n	8003784 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003752:	4b71      	ldr	r3, [pc, #452]	; (8003918 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	f003 0203 	and.w	r2, r3, #3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	429a      	cmp	r2, r3
 8003760:	d10d      	bne.n	800377e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
       ||
 8003766:	2b00      	cmp	r3, #0
 8003768:	d009      	beq.n	800377e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800376a:	4b6b      	ldr	r3, [pc, #428]	; (8003918 <RCCEx_PLLSAI1_Config+0x1e0>)
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	091b      	lsrs	r3, r3, #4
 8003770:	f003 0307 	and.w	r3, r3, #7
 8003774:	1c5a      	adds	r2, r3, #1
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
       ||
 800377a:	429a      	cmp	r2, r3
 800377c:	d047      	beq.n	800380e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	73fb      	strb	r3, [r7, #15]
 8003782:	e044      	b.n	800380e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2b03      	cmp	r3, #3
 800378a:	d018      	beq.n	80037be <RCCEx_PLLSAI1_Config+0x86>
 800378c:	2b03      	cmp	r3, #3
 800378e:	d825      	bhi.n	80037dc <RCCEx_PLLSAI1_Config+0xa4>
 8003790:	2b01      	cmp	r3, #1
 8003792:	d002      	beq.n	800379a <RCCEx_PLLSAI1_Config+0x62>
 8003794:	2b02      	cmp	r3, #2
 8003796:	d009      	beq.n	80037ac <RCCEx_PLLSAI1_Config+0x74>
 8003798:	e020      	b.n	80037dc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800379a:	4b5f      	ldr	r3, [pc, #380]	; (8003918 <RCCEx_PLLSAI1_Config+0x1e0>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0302 	and.w	r3, r3, #2
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d11d      	bne.n	80037e2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037aa:	e01a      	b.n	80037e2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80037ac:	4b5a      	ldr	r3, [pc, #360]	; (8003918 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d116      	bne.n	80037e6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037bc:	e013      	b.n	80037e6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80037be:	4b56      	ldr	r3, [pc, #344]	; (8003918 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d10f      	bne.n	80037ea <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80037ca:	4b53      	ldr	r3, [pc, #332]	; (8003918 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d109      	bne.n	80037ea <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80037da:	e006      	b.n	80037ea <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	73fb      	strb	r3, [r7, #15]
      break;
 80037e0:	e004      	b.n	80037ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80037e2:	bf00      	nop
 80037e4:	e002      	b.n	80037ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80037e6:	bf00      	nop
 80037e8:	e000      	b.n	80037ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80037ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80037ec:	7bfb      	ldrb	r3, [r7, #15]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d10d      	bne.n	800380e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80037f2:	4b49      	ldr	r3, [pc, #292]	; (8003918 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6819      	ldr	r1, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	3b01      	subs	r3, #1
 8003804:	011b      	lsls	r3, r3, #4
 8003806:	430b      	orrs	r3, r1
 8003808:	4943      	ldr	r1, [pc, #268]	; (8003918 <RCCEx_PLLSAI1_Config+0x1e0>)
 800380a:	4313      	orrs	r3, r2
 800380c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800380e:	7bfb      	ldrb	r3, [r7, #15]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d17c      	bne.n	800390e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003814:	4b40      	ldr	r3, [pc, #256]	; (8003918 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a3f      	ldr	r2, [pc, #252]	; (8003918 <RCCEx_PLLSAI1_Config+0x1e0>)
 800381a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800381e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003820:	f7fd fa64 	bl	8000cec <HAL_GetTick>
 8003824:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003826:	e009      	b.n	800383c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003828:	f7fd fa60 	bl	8000cec <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	2b02      	cmp	r3, #2
 8003834:	d902      	bls.n	800383c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	73fb      	strb	r3, [r7, #15]
        break;
 800383a:	e005      	b.n	8003848 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800383c:	4b36      	ldr	r3, [pc, #216]	; (8003918 <RCCEx_PLLSAI1_Config+0x1e0>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d1ef      	bne.n	8003828 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003848:	7bfb      	ldrb	r3, [r7, #15]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d15f      	bne.n	800390e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d110      	bne.n	8003876 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003854:	4b30      	ldr	r3, [pc, #192]	; (8003918 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800385c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	6892      	ldr	r2, [r2, #8]
 8003864:	0211      	lsls	r1, r2, #8
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	68d2      	ldr	r2, [r2, #12]
 800386a:	06d2      	lsls	r2, r2, #27
 800386c:	430a      	orrs	r2, r1
 800386e:	492a      	ldr	r1, [pc, #168]	; (8003918 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003870:	4313      	orrs	r3, r2
 8003872:	610b      	str	r3, [r1, #16]
 8003874:	e027      	b.n	80038c6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d112      	bne.n	80038a2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800387c:	4b26      	ldr	r3, [pc, #152]	; (8003918 <RCCEx_PLLSAI1_Config+0x1e0>)
 800387e:	691b      	ldr	r3, [r3, #16]
 8003880:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003884:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	6892      	ldr	r2, [r2, #8]
 800388c:	0211      	lsls	r1, r2, #8
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	6912      	ldr	r2, [r2, #16]
 8003892:	0852      	lsrs	r2, r2, #1
 8003894:	3a01      	subs	r2, #1
 8003896:	0552      	lsls	r2, r2, #21
 8003898:	430a      	orrs	r2, r1
 800389a:	491f      	ldr	r1, [pc, #124]	; (8003918 <RCCEx_PLLSAI1_Config+0x1e0>)
 800389c:	4313      	orrs	r3, r2
 800389e:	610b      	str	r3, [r1, #16]
 80038a0:	e011      	b.n	80038c6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038a2:	4b1d      	ldr	r3, [pc, #116]	; (8003918 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80038aa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	6892      	ldr	r2, [r2, #8]
 80038b2:	0211      	lsls	r1, r2, #8
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	6952      	ldr	r2, [r2, #20]
 80038b8:	0852      	lsrs	r2, r2, #1
 80038ba:	3a01      	subs	r2, #1
 80038bc:	0652      	lsls	r2, r2, #25
 80038be:	430a      	orrs	r2, r1
 80038c0:	4915      	ldr	r1, [pc, #84]	; (8003918 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80038c6:	4b14      	ldr	r3, [pc, #80]	; (8003918 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a13      	ldr	r2, [pc, #76]	; (8003918 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80038d0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038d2:	f7fd fa0b 	bl	8000cec <HAL_GetTick>
 80038d6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80038d8:	e009      	b.n	80038ee <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038da:	f7fd fa07 	bl	8000cec <HAL_GetTick>
 80038de:	4602      	mov	r2, r0
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d902      	bls.n	80038ee <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80038e8:	2303      	movs	r3, #3
 80038ea:	73fb      	strb	r3, [r7, #15]
          break;
 80038ec:	e005      	b.n	80038fa <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80038ee:	4b0a      	ldr	r3, [pc, #40]	; (8003918 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d0ef      	beq.n	80038da <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80038fa:	7bfb      	ldrb	r3, [r7, #15]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d106      	bne.n	800390e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003900:	4b05      	ldr	r3, [pc, #20]	; (8003918 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003902:	691a      	ldr	r2, [r3, #16]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	4903      	ldr	r1, [pc, #12]	; (8003918 <RCCEx_PLLSAI1_Config+0x1e0>)
 800390a:	4313      	orrs	r3, r2
 800390c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800390e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003910:	4618      	mov	r0, r3
 8003912:	3710      	adds	r7, #16
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	40021000 	.word	0x40021000

0800391c <__libc_init_array>:
 800391c:	b570      	push	{r4, r5, r6, lr}
 800391e:	4d0d      	ldr	r5, [pc, #52]	; (8003954 <__libc_init_array+0x38>)
 8003920:	4c0d      	ldr	r4, [pc, #52]	; (8003958 <__libc_init_array+0x3c>)
 8003922:	1b64      	subs	r4, r4, r5
 8003924:	10a4      	asrs	r4, r4, #2
 8003926:	2600      	movs	r6, #0
 8003928:	42a6      	cmp	r6, r4
 800392a:	d109      	bne.n	8003940 <__libc_init_array+0x24>
 800392c:	4d0b      	ldr	r5, [pc, #44]	; (800395c <__libc_init_array+0x40>)
 800392e:	4c0c      	ldr	r4, [pc, #48]	; (8003960 <__libc_init_array+0x44>)
 8003930:	f000 f820 	bl	8003974 <_init>
 8003934:	1b64      	subs	r4, r4, r5
 8003936:	10a4      	asrs	r4, r4, #2
 8003938:	2600      	movs	r6, #0
 800393a:	42a6      	cmp	r6, r4
 800393c:	d105      	bne.n	800394a <__libc_init_array+0x2e>
 800393e:	bd70      	pop	{r4, r5, r6, pc}
 8003940:	f855 3b04 	ldr.w	r3, [r5], #4
 8003944:	4798      	blx	r3
 8003946:	3601      	adds	r6, #1
 8003948:	e7ee      	b.n	8003928 <__libc_init_array+0xc>
 800394a:	f855 3b04 	ldr.w	r3, [r5], #4
 800394e:	4798      	blx	r3
 8003950:	3601      	adds	r6, #1
 8003952:	e7f2      	b.n	800393a <__libc_init_array+0x1e>
 8003954:	080039cc 	.word	0x080039cc
 8003958:	080039cc 	.word	0x080039cc
 800395c:	080039cc 	.word	0x080039cc
 8003960:	080039d0 	.word	0x080039d0

08003964 <memset>:
 8003964:	4402      	add	r2, r0
 8003966:	4603      	mov	r3, r0
 8003968:	4293      	cmp	r3, r2
 800396a:	d100      	bne.n	800396e <memset+0xa>
 800396c:	4770      	bx	lr
 800396e:	f803 1b01 	strb.w	r1, [r3], #1
 8003972:	e7f9      	b.n	8003968 <memset+0x4>

08003974 <_init>:
 8003974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003976:	bf00      	nop
 8003978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800397a:	bc08      	pop	{r3}
 800397c:	469e      	mov	lr, r3
 800397e:	4770      	bx	lr

08003980 <_fini>:
 8003980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003982:	bf00      	nop
 8003984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003986:	bc08      	pop	{r3}
 8003988:	469e      	mov	lr, r3
 800398a:	4770      	bx	lr
