
M10A04_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fe8  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003178  08003178  00013178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031b8  080031b8  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  080031b8  080031b8  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080031b8  080031b8  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031b8  080031b8  000131b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031bc  080031bc  000131bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080031c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000014  080031d4  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  080031d4  000200cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009fc3  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017ac  00000000  00000000  0002a007  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af0  00000000  00000000  0002b7b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a18  00000000  00000000  0002c2a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f8b0  00000000  00000000  0002ccc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000be94  00000000  00000000  0004c570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c20f3  00000000  00000000  00058404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011a4f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d98  00000000  00000000  0011a548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003160 	.word	0x08003160

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	08003160 	.word	0x08003160

080001d0 <__aeabi_dmul>:
 80001d0:	b570      	push	{r4, r5, r6, lr}
 80001d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001de:	bf1d      	ittte	ne
 80001e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001e4:	ea94 0f0c 	teqne	r4, ip
 80001e8:	ea95 0f0c 	teqne	r5, ip
 80001ec:	f000 f8de 	bleq	80003ac <__aeabi_dmul+0x1dc>
 80001f0:	442c      	add	r4, r5
 80001f2:	ea81 0603 	eor.w	r6, r1, r3
 80001f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000202:	bf18      	it	ne
 8000204:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000208:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800020c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000210:	d038      	beq.n	8000284 <__aeabi_dmul+0xb4>
 8000212:	fba0 ce02 	umull	ip, lr, r0, r2
 8000216:	f04f 0500 	mov.w	r5, #0
 800021a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800021e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000222:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000226:	f04f 0600 	mov.w	r6, #0
 800022a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800022e:	f09c 0f00 	teq	ip, #0
 8000232:	bf18      	it	ne
 8000234:	f04e 0e01 	orrne.w	lr, lr, #1
 8000238:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800023c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000240:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000244:	d204      	bcs.n	8000250 <__aeabi_dmul+0x80>
 8000246:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800024a:	416d      	adcs	r5, r5
 800024c:	eb46 0606 	adc.w	r6, r6, r6
 8000250:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000254:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000258:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800025c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000260:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000264:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000268:	bf88      	it	hi
 800026a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800026e:	d81e      	bhi.n	80002ae <__aeabi_dmul+0xde>
 8000270:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000274:	bf08      	it	eq
 8000276:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800027a:	f150 0000 	adcs.w	r0, r0, #0
 800027e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000288:	ea46 0101 	orr.w	r1, r6, r1
 800028c:	ea40 0002 	orr.w	r0, r0, r2
 8000290:	ea81 0103 	eor.w	r1, r1, r3
 8000294:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000298:	bfc2      	ittt	gt
 800029a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800029e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002a2:	bd70      	popgt	{r4, r5, r6, pc}
 80002a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a8:	f04f 0e00 	mov.w	lr, #0
 80002ac:	3c01      	subs	r4, #1
 80002ae:	f300 80ab 	bgt.w	8000408 <__aeabi_dmul+0x238>
 80002b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002b6:	bfde      	ittt	le
 80002b8:	2000      	movle	r0, #0
 80002ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002be:	bd70      	pople	{r4, r5, r6, pc}
 80002c0:	f1c4 0400 	rsb	r4, r4, #0
 80002c4:	3c20      	subs	r4, #32
 80002c6:	da35      	bge.n	8000334 <__aeabi_dmul+0x164>
 80002c8:	340c      	adds	r4, #12
 80002ca:	dc1b      	bgt.n	8000304 <__aeabi_dmul+0x134>
 80002cc:	f104 0414 	add.w	r4, r4, #20
 80002d0:	f1c4 0520 	rsb	r5, r4, #32
 80002d4:	fa00 f305 	lsl.w	r3, r0, r5
 80002d8:	fa20 f004 	lsr.w	r0, r0, r4
 80002dc:	fa01 f205 	lsl.w	r2, r1, r5
 80002e0:	ea40 0002 	orr.w	r0, r0, r2
 80002e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f0:	fa21 f604 	lsr.w	r6, r1, r4
 80002f4:	eb42 0106 	adc.w	r1, r2, r6
 80002f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002fc:	bf08      	it	eq
 80002fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000302:	bd70      	pop	{r4, r5, r6, pc}
 8000304:	f1c4 040c 	rsb	r4, r4, #12
 8000308:	f1c4 0520 	rsb	r5, r4, #32
 800030c:	fa00 f304 	lsl.w	r3, r0, r4
 8000310:	fa20 f005 	lsr.w	r0, r0, r5
 8000314:	fa01 f204 	lsl.w	r2, r1, r4
 8000318:	ea40 0002 	orr.w	r0, r0, r2
 800031c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000320:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000324:	f141 0100 	adc.w	r1, r1, #0
 8000328:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800032c:	bf08      	it	eq
 800032e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f1c4 0520 	rsb	r5, r4, #32
 8000338:	fa00 f205 	lsl.w	r2, r0, r5
 800033c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000340:	fa20 f304 	lsr.w	r3, r0, r4
 8000344:	fa01 f205 	lsl.w	r2, r1, r5
 8000348:	ea43 0302 	orr.w	r3, r3, r2
 800034c:	fa21 f004 	lsr.w	r0, r1, r4
 8000350:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000354:	fa21 f204 	lsr.w	r2, r1, r4
 8000358:	ea20 0002 	bic.w	r0, r0, r2
 800035c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f094 0f00 	teq	r4, #0
 8000370:	d10f      	bne.n	8000392 <__aeabi_dmul+0x1c2>
 8000372:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000376:	0040      	lsls	r0, r0, #1
 8000378:	eb41 0101 	adc.w	r1, r1, r1
 800037c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000380:	bf08      	it	eq
 8000382:	3c01      	subeq	r4, #1
 8000384:	d0f7      	beq.n	8000376 <__aeabi_dmul+0x1a6>
 8000386:	ea41 0106 	orr.w	r1, r1, r6
 800038a:	f095 0f00 	teq	r5, #0
 800038e:	bf18      	it	ne
 8000390:	4770      	bxne	lr
 8000392:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000396:	0052      	lsls	r2, r2, #1
 8000398:	eb43 0303 	adc.w	r3, r3, r3
 800039c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a0:	bf08      	it	eq
 80003a2:	3d01      	subeq	r5, #1
 80003a4:	d0f7      	beq.n	8000396 <__aeabi_dmul+0x1c6>
 80003a6:	ea43 0306 	orr.w	r3, r3, r6
 80003aa:	4770      	bx	lr
 80003ac:	ea94 0f0c 	teq	r4, ip
 80003b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003b4:	bf18      	it	ne
 80003b6:	ea95 0f0c 	teqne	r5, ip
 80003ba:	d00c      	beq.n	80003d6 <__aeabi_dmul+0x206>
 80003bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c0:	bf18      	it	ne
 80003c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003c6:	d1d1      	bne.n	800036c <__aeabi_dmul+0x19c>
 80003c8:	ea81 0103 	eor.w	r1, r1, r3
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	f04f 0000 	mov.w	r0, #0
 80003d4:	bd70      	pop	{r4, r5, r6, pc}
 80003d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003da:	bf06      	itte	eq
 80003dc:	4610      	moveq	r0, r2
 80003de:	4619      	moveq	r1, r3
 80003e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003e4:	d019      	beq.n	800041a <__aeabi_dmul+0x24a>
 80003e6:	ea94 0f0c 	teq	r4, ip
 80003ea:	d102      	bne.n	80003f2 <__aeabi_dmul+0x222>
 80003ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f0:	d113      	bne.n	800041a <__aeabi_dmul+0x24a>
 80003f2:	ea95 0f0c 	teq	r5, ip
 80003f6:	d105      	bne.n	8000404 <__aeabi_dmul+0x234>
 80003f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003fc:	bf1c      	itt	ne
 80003fe:	4610      	movne	r0, r2
 8000400:	4619      	movne	r1, r3
 8000402:	d10a      	bne.n	800041a <__aeabi_dmul+0x24a>
 8000404:	ea81 0103 	eor.w	r1, r1, r3
 8000408:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800040c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000410:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000414:	f04f 0000 	mov.w	r0, #0
 8000418:	bd70      	pop	{r4, r5, r6, pc}
 800041a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800041e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000422:	bd70      	pop	{r4, r5, r6, pc}

08000424 <__aeabi_drsub>:
 8000424:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000428:	e002      	b.n	8000430 <__adddf3>
 800042a:	bf00      	nop

0800042c <__aeabi_dsub>:
 800042c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000430 <__adddf3>:
 8000430:	b530      	push	{r4, r5, lr}
 8000432:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000436:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800043a:	ea94 0f05 	teq	r4, r5
 800043e:	bf08      	it	eq
 8000440:	ea90 0f02 	teqeq	r0, r2
 8000444:	bf1f      	itttt	ne
 8000446:	ea54 0c00 	orrsne.w	ip, r4, r0
 800044a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800044e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000452:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000456:	f000 80e2 	beq.w	800061e <__adddf3+0x1ee>
 800045a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800045e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000462:	bfb8      	it	lt
 8000464:	426d      	neglt	r5, r5
 8000466:	dd0c      	ble.n	8000482 <__adddf3+0x52>
 8000468:	442c      	add	r4, r5
 800046a:	ea80 0202 	eor.w	r2, r0, r2
 800046e:	ea81 0303 	eor.w	r3, r1, r3
 8000472:	ea82 0000 	eor.w	r0, r2, r0
 8000476:	ea83 0101 	eor.w	r1, r3, r1
 800047a:	ea80 0202 	eor.w	r2, r0, r2
 800047e:	ea81 0303 	eor.w	r3, r1, r3
 8000482:	2d36      	cmp	r5, #54	; 0x36
 8000484:	bf88      	it	hi
 8000486:	bd30      	pophi	{r4, r5, pc}
 8000488:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800048c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000490:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000494:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000498:	d002      	beq.n	80004a0 <__adddf3+0x70>
 800049a:	4240      	negs	r0, r0
 800049c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004ac:	d002      	beq.n	80004b4 <__adddf3+0x84>
 80004ae:	4252      	negs	r2, r2
 80004b0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004b4:	ea94 0f05 	teq	r4, r5
 80004b8:	f000 80a7 	beq.w	800060a <__adddf3+0x1da>
 80004bc:	f1a4 0401 	sub.w	r4, r4, #1
 80004c0:	f1d5 0e20 	rsbs	lr, r5, #32
 80004c4:	db0d      	blt.n	80004e2 <__adddf3+0xb2>
 80004c6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004ca:	fa22 f205 	lsr.w	r2, r2, r5
 80004ce:	1880      	adds	r0, r0, r2
 80004d0:	f141 0100 	adc.w	r1, r1, #0
 80004d4:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d8:	1880      	adds	r0, r0, r2
 80004da:	fa43 f305 	asr.w	r3, r3, r5
 80004de:	4159      	adcs	r1, r3
 80004e0:	e00e      	b.n	8000500 <__adddf3+0xd0>
 80004e2:	f1a5 0520 	sub.w	r5, r5, #32
 80004e6:	f10e 0e20 	add.w	lr, lr, #32
 80004ea:	2a01      	cmp	r2, #1
 80004ec:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f0:	bf28      	it	cs
 80004f2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004f6:	fa43 f305 	asr.w	r3, r3, r5
 80004fa:	18c0      	adds	r0, r0, r3
 80004fc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	d507      	bpl.n	8000516 <__adddf3+0xe6>
 8000506:	f04f 0e00 	mov.w	lr, #0
 800050a:	f1dc 0c00 	rsbs	ip, ip, #0
 800050e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000512:	eb6e 0101 	sbc.w	r1, lr, r1
 8000516:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800051a:	d31b      	bcc.n	8000554 <__adddf3+0x124>
 800051c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000520:	d30c      	bcc.n	800053c <__adddf3+0x10c>
 8000522:	0849      	lsrs	r1, r1, #1
 8000524:	ea5f 0030 	movs.w	r0, r0, rrx
 8000528:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800052c:	f104 0401 	add.w	r4, r4, #1
 8000530:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000534:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000538:	f080 809a 	bcs.w	8000670 <__adddf3+0x240>
 800053c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000540:	bf08      	it	eq
 8000542:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000546:	f150 0000 	adcs.w	r0, r0, #0
 800054a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800054e:	ea41 0105 	orr.w	r1, r1, r5
 8000552:	bd30      	pop	{r4, r5, pc}
 8000554:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000558:	4140      	adcs	r0, r0
 800055a:	eb41 0101 	adc.w	r1, r1, r1
 800055e:	3c01      	subs	r4, #1
 8000560:	bf28      	it	cs
 8000562:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000566:	d2e9      	bcs.n	800053c <__adddf3+0x10c>
 8000568:	f091 0f00 	teq	r1, #0
 800056c:	bf04      	itt	eq
 800056e:	4601      	moveq	r1, r0
 8000570:	2000      	moveq	r0, #0
 8000572:	fab1 f381 	clz	r3, r1
 8000576:	bf08      	it	eq
 8000578:	3320      	addeq	r3, #32
 800057a:	f1a3 030b 	sub.w	r3, r3, #11
 800057e:	f1b3 0220 	subs.w	r2, r3, #32
 8000582:	da0c      	bge.n	800059e <__adddf3+0x16e>
 8000584:	320c      	adds	r2, #12
 8000586:	dd08      	ble.n	800059a <__adddf3+0x16a>
 8000588:	f102 0c14 	add.w	ip, r2, #20
 800058c:	f1c2 020c 	rsb	r2, r2, #12
 8000590:	fa01 f00c 	lsl.w	r0, r1, ip
 8000594:	fa21 f102 	lsr.w	r1, r1, r2
 8000598:	e00c      	b.n	80005b4 <__adddf3+0x184>
 800059a:	f102 0214 	add.w	r2, r2, #20
 800059e:	bfd8      	it	le
 80005a0:	f1c2 0c20 	rsble	ip, r2, #32
 80005a4:	fa01 f102 	lsl.w	r1, r1, r2
 80005a8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005ac:	bfdc      	itt	le
 80005ae:	ea41 010c 	orrle.w	r1, r1, ip
 80005b2:	4090      	lslle	r0, r2
 80005b4:	1ae4      	subs	r4, r4, r3
 80005b6:	bfa2      	ittt	ge
 80005b8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005bc:	4329      	orrge	r1, r5
 80005be:	bd30      	popge	{r4, r5, pc}
 80005c0:	ea6f 0404 	mvn.w	r4, r4
 80005c4:	3c1f      	subs	r4, #31
 80005c6:	da1c      	bge.n	8000602 <__adddf3+0x1d2>
 80005c8:	340c      	adds	r4, #12
 80005ca:	dc0e      	bgt.n	80005ea <__adddf3+0x1ba>
 80005cc:	f104 0414 	add.w	r4, r4, #20
 80005d0:	f1c4 0220 	rsb	r2, r4, #32
 80005d4:	fa20 f004 	lsr.w	r0, r0, r4
 80005d8:	fa01 f302 	lsl.w	r3, r1, r2
 80005dc:	ea40 0003 	orr.w	r0, r0, r3
 80005e0:	fa21 f304 	lsr.w	r3, r1, r4
 80005e4:	ea45 0103 	orr.w	r1, r5, r3
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	f1c4 040c 	rsb	r4, r4, #12
 80005ee:	f1c4 0220 	rsb	r2, r4, #32
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 f304 	lsl.w	r3, r1, r4
 80005fa:	ea40 0003 	orr.w	r0, r0, r3
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	fa21 f004 	lsr.w	r0, r1, r4
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	f094 0f00 	teq	r4, #0
 800060e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000612:	bf06      	itte	eq
 8000614:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000618:	3401      	addeq	r4, #1
 800061a:	3d01      	subne	r5, #1
 800061c:	e74e      	b.n	80004bc <__adddf3+0x8c>
 800061e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000622:	bf18      	it	ne
 8000624:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000628:	d029      	beq.n	800067e <__adddf3+0x24e>
 800062a:	ea94 0f05 	teq	r4, r5
 800062e:	bf08      	it	eq
 8000630:	ea90 0f02 	teqeq	r0, r2
 8000634:	d005      	beq.n	8000642 <__adddf3+0x212>
 8000636:	ea54 0c00 	orrs.w	ip, r4, r0
 800063a:	bf04      	itt	eq
 800063c:	4619      	moveq	r1, r3
 800063e:	4610      	moveq	r0, r2
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	ea91 0f03 	teq	r1, r3
 8000646:	bf1e      	ittt	ne
 8000648:	2100      	movne	r1, #0
 800064a:	2000      	movne	r0, #0
 800064c:	bd30      	popne	{r4, r5, pc}
 800064e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000652:	d105      	bne.n	8000660 <__adddf3+0x230>
 8000654:	0040      	lsls	r0, r0, #1
 8000656:	4149      	adcs	r1, r1
 8000658:	bf28      	it	cs
 800065a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800065e:	bd30      	pop	{r4, r5, pc}
 8000660:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000664:	bf3c      	itt	cc
 8000666:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800066a:	bd30      	popcc	{r4, r5, pc}
 800066c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000670:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000674:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000678:	f04f 0000 	mov.w	r0, #0
 800067c:	bd30      	pop	{r4, r5, pc}
 800067e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000682:	bf1a      	itte	ne
 8000684:	4619      	movne	r1, r3
 8000686:	4610      	movne	r0, r2
 8000688:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800068c:	bf1c      	itt	ne
 800068e:	460b      	movne	r3, r1
 8000690:	4602      	movne	r2, r0
 8000692:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000696:	bf06      	itte	eq
 8000698:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800069c:	ea91 0f03 	teqeq	r1, r3
 80006a0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006a4:	bd30      	pop	{r4, r5, pc}
 80006a6:	bf00      	nop

080006a8 <__aeabi_ui2d>:
 80006a8:	f090 0f00 	teq	r0, #0
 80006ac:	bf04      	itt	eq
 80006ae:	2100      	moveq	r1, #0
 80006b0:	4770      	bxeq	lr
 80006b2:	b530      	push	{r4, r5, lr}
 80006b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006bc:	f04f 0500 	mov.w	r5, #0
 80006c0:	f04f 0100 	mov.w	r1, #0
 80006c4:	e750      	b.n	8000568 <__adddf3+0x138>
 80006c6:	bf00      	nop

080006c8 <__aeabi_i2d>:
 80006c8:	f090 0f00 	teq	r0, #0
 80006cc:	bf04      	itt	eq
 80006ce:	2100      	moveq	r1, #0
 80006d0:	4770      	bxeq	lr
 80006d2:	b530      	push	{r4, r5, lr}
 80006d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006dc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e0:	bf48      	it	mi
 80006e2:	4240      	negmi	r0, r0
 80006e4:	f04f 0100 	mov.w	r1, #0
 80006e8:	e73e      	b.n	8000568 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_f2d>:
 80006ec:	0042      	lsls	r2, r0, #1
 80006ee:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006fa:	bf1f      	itttt	ne
 80006fc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000700:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000704:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000708:	4770      	bxne	lr
 800070a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800070e:	bf08      	it	eq
 8000710:	4770      	bxeq	lr
 8000712:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000716:	bf04      	itt	eq
 8000718:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800071c:	4770      	bxeq	lr
 800071e:	b530      	push	{r4, r5, lr}
 8000720:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000724:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000728:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800072c:	e71c      	b.n	8000568 <__adddf3+0x138>
 800072e:	bf00      	nop

08000730 <__aeabi_ul2d>:
 8000730:	ea50 0201 	orrs.w	r2, r0, r1
 8000734:	bf08      	it	eq
 8000736:	4770      	bxeq	lr
 8000738:	b530      	push	{r4, r5, lr}
 800073a:	f04f 0500 	mov.w	r5, #0
 800073e:	e00a      	b.n	8000756 <__aeabi_l2d+0x16>

08000740 <__aeabi_l2d>:
 8000740:	ea50 0201 	orrs.w	r2, r0, r1
 8000744:	bf08      	it	eq
 8000746:	4770      	bxeq	lr
 8000748:	b530      	push	{r4, r5, lr}
 800074a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800074e:	d502      	bpl.n	8000756 <__aeabi_l2d+0x16>
 8000750:	4240      	negs	r0, r0
 8000752:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000756:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800075a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000762:	f43f aed8 	beq.w	8000516 <__adddf3+0xe6>
 8000766:	f04f 0203 	mov.w	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800077e:	f1c2 0320 	rsb	r3, r2, #32
 8000782:	fa00 fc03 	lsl.w	ip, r0, r3
 8000786:	fa20 f002 	lsr.w	r0, r0, r2
 800078a:	fa01 fe03 	lsl.w	lr, r1, r3
 800078e:	ea40 000e 	orr.w	r0, r0, lr
 8000792:	fa21 f102 	lsr.w	r1, r1, r2
 8000796:	4414      	add	r4, r2
 8000798:	e6bd      	b.n	8000516 <__adddf3+0xe6>
 800079a:	bf00      	nop

0800079c <__aeabi_d2f>:
 800079c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007a0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007a4:	bf24      	itt	cs
 80007a6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007aa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007ae:	d90d      	bls.n	80007cc <__aeabi_d2f+0x30>
 80007b0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007b4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007b8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007bc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007c0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007c4:	bf08      	it	eq
 80007c6:	f020 0001 	biceq.w	r0, r0, #1
 80007ca:	4770      	bx	lr
 80007cc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007d0:	d121      	bne.n	8000816 <__aeabi_d2f+0x7a>
 80007d2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007d6:	bfbc      	itt	lt
 80007d8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007dc:	4770      	bxlt	lr
 80007de:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007e6:	f1c2 0218 	rsb	r2, r2, #24
 80007ea:	f1c2 0c20 	rsb	ip, r2, #32
 80007ee:	fa10 f30c 	lsls.w	r3, r0, ip
 80007f2:	fa20 f002 	lsr.w	r0, r0, r2
 80007f6:	bf18      	it	ne
 80007f8:	f040 0001 	orrne.w	r0, r0, #1
 80007fc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000800:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000804:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000808:	ea40 000c 	orr.w	r0, r0, ip
 800080c:	fa23 f302 	lsr.w	r3, r3, r2
 8000810:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000814:	e7cc      	b.n	80007b0 <__aeabi_d2f+0x14>
 8000816:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800081a:	d107      	bne.n	800082c <__aeabi_d2f+0x90>
 800081c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000820:	bf1e      	ittt	ne
 8000822:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000826:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800082a:	4770      	bxne	lr
 800082c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000830:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000834:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop

0800083c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000842:	4b09      	ldr	r3, [pc, #36]	; (8000868 <MX_GPIO_Init+0x2c>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000846:	4a08      	ldr	r2, [pc, #32]	; (8000868 <MX_GPIO_Init+0x2c>)
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800084e:	4b06      	ldr	r3, [pc, #24]	; (8000868 <MX_GPIO_Init+0x2c>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]

}
 800085a:	bf00      	nop
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	40021000 	.word	0x40021000
 800086c:	00000000 	.word	0x00000000

08000870 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000874:	f000 fb2b 	bl	8000ece <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000878:	f000 f8b2 	bl	80009e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800087c:	f7ff ffde 	bl	800083c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000880:	f000 f958 	bl	8000b34 <MX_TIM2_Init>
  MX_TIM15_Init();
 8000884:	f000 f9cc 	bl	8000c20 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000888:	2100      	movs	r1, #0
 800088a:	484d      	ldr	r0, [pc, #308]	; (80009c0 <main+0x150>)
 800088c:	f001 fd00 	bl	8002290 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8000890:	2100      	movs	r1, #0
 8000892:	484c      	ldr	r0, [pc, #304]	; (80009c4 <main+0x154>)
 8000894:	f001 fcfc 	bl	8002290 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  pwm1 = (pwm1 / 100) * TIM2->ARR;
 8000898:	4b4b      	ldr	r3, [pc, #300]	; (80009c8 <main+0x158>)
 800089a:	edd3 7a00 	vldr	s15, [r3]
 800089e:	eddf 6a4b 	vldr	s13, [pc, #300]	; 80009cc <main+0x15c>
 80008a2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80008a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008ac:	ee07 3a90 	vmov	s15, r3
 80008b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008b8:	4b43      	ldr	r3, [pc, #268]	; (80009c8 <main+0x158>)
 80008ba:	edc3 7a00 	vstr	s15, [r3]
  pwm2 = (pwm2 / 100) * TIM15->ARR;
 80008be:	4b44      	ldr	r3, [pc, #272]	; (80009d0 <main+0x160>)
 80008c0:	edd3 7a00 	vldr	s15, [r3]
 80008c4:	eddf 6a41 	vldr	s13, [pc, #260]	; 80009cc <main+0x15c>
 80008c8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80008cc:	4b41      	ldr	r3, [pc, #260]	; (80009d4 <main+0x164>)
 80008ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008d0:	ee07 3a90 	vmov	s15, r3
 80008d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008dc:	4b3c      	ldr	r3, [pc, #240]	; (80009d0 <main+0x160>)
 80008de:	edc3 7a00 	vstr	s15, [r3]
  while (1)
  {
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwm1);
 80008e2:	4b39      	ldr	r3, [pc, #228]	; (80009c8 <main+0x158>)
 80008e4:	edd3 7a00 	vldr	s15, [r3]
 80008e8:	4b35      	ldr	r3, [pc, #212]	; (80009c0 <main+0x150>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008f0:	ee17 2a90 	vmov	r2, s15
 80008f4:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, pwm2);
 80008f6:	4b36      	ldr	r3, [pc, #216]	; (80009d0 <main+0x160>)
 80008f8:	edd3 7a00 	vldr	s15, [r3]
 80008fc:	4b31      	ldr	r3, [pc, #196]	; (80009c4 <main+0x154>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000904:	ee17 2a90 	vmov	r2, s15
 8000908:	635a      	str	r2, [r3, #52]	; 0x34
	  pwm1++;
 800090a:	4b2f      	ldr	r3, [pc, #188]	; (80009c8 <main+0x158>)
 800090c:	edd3 7a00 	vldr	s15, [r3]
 8000910:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000914:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000918:	4b2b      	ldr	r3, [pc, #172]	; (80009c8 <main+0x158>)
 800091a:	edc3 7a00 	vstr	s15, [r3]
	  pwm2++;
 800091e:	4b2c      	ldr	r3, [pc, #176]	; (80009d0 <main+0x160>)
 8000920:	edd3 7a00 	vldr	s15, [r3]
 8000924:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000928:	ee77 7a87 	vadd.f32	s15, s15, s14
 800092c:	4b28      	ldr	r3, [pc, #160]	; (80009d0 <main+0x160>)
 800092e:	edc3 7a00 	vstr	s15, [r3]
	  if(pwm1 >= 400) pwm1 = TIM2->ARR * 0.3;
 8000932:	4b25      	ldr	r3, [pc, #148]	; (80009c8 <main+0x158>)
 8000934:	edd3 7a00 	vldr	s15, [r3]
 8000938:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80009d8 <main+0x168>
 800093c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000944:	db13      	blt.n	800096e <main+0xfe>
 8000946:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800094a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff feab 	bl	80006a8 <__aeabi_ui2d>
 8000952:	a317      	add	r3, pc, #92	; (adr r3, 80009b0 <main+0x140>)
 8000954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000958:	f7ff fc3a 	bl	80001d0 <__aeabi_dmul>
 800095c:	4602      	mov	r2, r0
 800095e:	460b      	mov	r3, r1
 8000960:	4610      	mov	r0, r2
 8000962:	4619      	mov	r1, r3
 8000964:	f7ff ff1a 	bl	800079c <__aeabi_d2f>
 8000968:	4603      	mov	r3, r0
 800096a:	4a17      	ldr	r2, [pc, #92]	; (80009c8 <main+0x158>)
 800096c:	6013      	str	r3, [r2, #0]
	  if(pwm2 >= 250) pwm2 = TIM15->ARR * 0.1;
 800096e:	4b18      	ldr	r3, [pc, #96]	; (80009d0 <main+0x160>)
 8000970:	edd3 7a00 	vldr	s15, [r3]
 8000974:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80009dc <main+0x16c>
 8000978:	eef4 7ac7 	vcmpe.f32	s15, s14
 800097c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000980:	db12      	blt.n	80009a8 <main+0x138>
 8000982:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <main+0x164>)
 8000984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000986:	4618      	mov	r0, r3
 8000988:	f7ff fe8e 	bl	80006a8 <__aeabi_ui2d>
 800098c:	a30a      	add	r3, pc, #40	; (adr r3, 80009b8 <main+0x148>)
 800098e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000992:	f7ff fc1d 	bl	80001d0 <__aeabi_dmul>
 8000996:	4602      	mov	r2, r0
 8000998:	460b      	mov	r3, r1
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	f7ff fefd 	bl	800079c <__aeabi_d2f>
 80009a2:	4603      	mov	r3, r0
 80009a4:	4a0a      	ldr	r2, [pc, #40]	; (80009d0 <main+0x160>)
 80009a6:	6013      	str	r3, [r2, #0]
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwm1);
 80009a8:	e79b      	b.n	80008e2 <main+0x72>
 80009aa:	bf00      	nop
 80009ac:	f3af 8000 	nop.w
 80009b0:	33333333 	.word	0x33333333
 80009b4:	3fd33333 	.word	0x3fd33333
 80009b8:	9999999a 	.word	0x9999999a
 80009bc:	3fb99999 	.word	0x3fb99999
 80009c0:	20000030 	.word	0x20000030
 80009c4:	2000007c 	.word	0x2000007c
 80009c8:	20000000 	.word	0x20000000
 80009cc:	42c80000 	.word	0x42c80000
 80009d0:	20000004 	.word	0x20000004
 80009d4:	40014000 	.word	0x40014000
 80009d8:	43c80000 	.word	0x43c80000
 80009dc:	437a0000 	.word	0x437a0000

080009e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b096      	sub	sp, #88	; 0x58
 80009e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009e6:	f107 0314 	add.w	r3, r7, #20
 80009ea:	2244      	movs	r2, #68	; 0x44
 80009ec:	2100      	movs	r1, #0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f002 fbae 	bl	8003150 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f4:	463b      	mov	r3, r7
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	605a      	str	r2, [r3, #4]
 80009fc:	609a      	str	r2, [r3, #8]
 80009fe:	60da      	str	r2, [r3, #12]
 8000a00:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a02:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a06:	f000 fd35 	bl	8001474 <HAL_PWREx_ControlVoltageScaling>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a10:	f000 f82b 	bl	8000a6a <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a14:	2302      	movs	r3, #2
 8000a16:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a1c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a1e:	2310      	movs	r3, #16
 8000a20:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a22:	2300      	movs	r3, #0
 8000a24:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a26:	f107 0314 	add.w	r3, r7, #20
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f000 fd78 	bl	8001520 <HAL_RCC_OscConfig>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8000a36:	f000 f818 	bl	8000a6a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a3a:	230f      	movs	r3, #15
 8000a3c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a42:	2300      	movs	r3, #0
 8000a44:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a46:	2300      	movs	r3, #0
 8000a48:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a4e:	463b      	mov	r3, r7
 8000a50:	2100      	movs	r1, #0
 8000a52:	4618      	mov	r0, r3
 8000a54:	f001 f978 	bl	8001d48 <HAL_RCC_ClockConfig>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000a5e:	f000 f804 	bl	8000a6a <Error_Handler>
  }
}
 8000a62:	bf00      	nop
 8000a64:	3758      	adds	r7, #88	; 0x58
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}

08000a6a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a6e:	b672      	cpsid	i
}
 8000a70:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a72:	e7fe      	b.n	8000a72 <Error_Handler+0x8>

08000a74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7a:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <HAL_MspInit+0x44>)
 8000a7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a7e:	4a0e      	ldr	r2, [pc, #56]	; (8000ab8 <HAL_MspInit+0x44>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	6613      	str	r3, [r2, #96]	; 0x60
 8000a86:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <HAL_MspInit+0x44>)
 8000a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a92:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <HAL_MspInit+0x44>)
 8000a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a96:	4a08      	ldr	r2, [pc, #32]	; (8000ab8 <HAL_MspInit+0x44>)
 8000a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a9c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a9e:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <HAL_MspInit+0x44>)
 8000aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa6:	603b      	str	r3, [r7, #0]
 8000aa8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	40021000 	.word	0x40021000

08000abc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <NMI_Handler+0x4>

08000ac2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac6:	e7fe      	b.n	8000ac6 <HardFault_Handler+0x4>

08000ac8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000acc:	e7fe      	b.n	8000acc <MemManage_Handler+0x4>

08000ace <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ad2:	e7fe      	b.n	8000ad2 <BusFault_Handler+0x4>

08000ad4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <UsageFault_Handler+0x4>

08000ada <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr

08000af6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr

08000b04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b08:	f000 fa36 	bl	8000f78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b0c:	bf00      	nop
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b14:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <SystemInit+0x20>)
 8000b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b1a:	4a05      	ldr	r2, [pc, #20]	; (8000b30 <SystemInit+0x20>)
 8000b1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim15;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08e      	sub	sp, #56	; 0x38
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
 8000b46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b48:	f107 031c 	add.w	r3, r7, #28
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b54:	463b      	mov	r3, r7
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	609a      	str	r2, [r3, #8]
 8000b5e:	60da      	str	r2, [r3, #12]
 8000b60:	611a      	str	r2, [r3, #16]
 8000b62:	615a      	str	r2, [r3, #20]
 8000b64:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b66:	4b2d      	ldr	r3, [pc, #180]	; (8000c1c <MX_TIM2_Init+0xe8>)
 8000b68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b6c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 8000b6e:	4b2b      	ldr	r3, [pc, #172]	; (8000c1c <MX_TIM2_Init+0xe8>)
 8000b70:	220f      	movs	r2, #15
 8000b72:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b74:	4b29      	ldr	r3, [pc, #164]	; (8000c1c <MX_TIM2_Init+0xe8>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500-1;
 8000b7a:	4b28      	ldr	r3, [pc, #160]	; (8000c1c <MX_TIM2_Init+0xe8>)
 8000b7c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000b80:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b82:	4b26      	ldr	r3, [pc, #152]	; (8000c1c <MX_TIM2_Init+0xe8>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b88:	4b24      	ldr	r3, [pc, #144]	; (8000c1c <MX_TIM2_Init+0xe8>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b8e:	4823      	ldr	r0, [pc, #140]	; (8000c1c <MX_TIM2_Init+0xe8>)
 8000b90:	f001 fac6 	bl	8002120 <HAL_TIM_Base_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000b9a:	f7ff ff66 	bl	8000a6a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ba2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ba4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ba8:	4619      	mov	r1, r3
 8000baa:	481c      	ldr	r0, [pc, #112]	; (8000c1c <MX_TIM2_Init+0xe8>)
 8000bac:	f001 fd62 	bl	8002674 <HAL_TIM_ConfigClockSource>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000bb6:	f7ff ff58 	bl	8000a6a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000bba:	4818      	ldr	r0, [pc, #96]	; (8000c1c <MX_TIM2_Init+0xe8>)
 8000bbc:	f001 fb07 	bl	80021ce <HAL_TIM_PWM_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000bc6:	f7ff ff50 	bl	8000a6a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bd2:	f107 031c 	add.w	r3, r7, #28
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4810      	ldr	r0, [pc, #64]	; (8000c1c <MX_TIM2_Init+0xe8>)
 8000bda:	f002 f9b7 	bl	8002f4c <HAL_TIMEx_MasterConfigSynchronization>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000be4:	f7ff ff41 	bl	8000a6a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000be8:	2360      	movs	r3, #96	; 0x60
 8000bea:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 250;
 8000bec:	23fa      	movs	r3, #250	; 0xfa
 8000bee:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bf8:	463b      	mov	r3, r7
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4807      	ldr	r0, [pc, #28]	; (8000c1c <MX_TIM2_Init+0xe8>)
 8000c00:	f001 fc24 	bl	800244c <HAL_TIM_PWM_ConfigChannel>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000c0a:	f7ff ff2e 	bl	8000a6a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c0e:	4803      	ldr	r0, [pc, #12]	; (8000c1c <MX_TIM2_Init+0xe8>)
 8000c10:	f000 f8da 	bl	8000dc8 <HAL_TIM_MspPostInit>

}
 8000c14:	bf00      	nop
 8000c16:	3738      	adds	r7, #56	; 0x38
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20000030 	.word	0x20000030

08000c20 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b09a      	sub	sp, #104	; 0x68
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c26:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]
 8000c30:	609a      	str	r2, [r3, #8]
 8000c32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c34:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c40:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
 8000c4e:	611a      	str	r2, [r3, #16]
 8000c50:	615a      	str	r2, [r3, #20]
 8000c52:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c54:	1d3b      	adds	r3, r7, #4
 8000c56:	222c      	movs	r2, #44	; 0x2c
 8000c58:	2100      	movs	r1, #0
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f002 fa78 	bl	8003150 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000c60:	4b3e      	ldr	r3, [pc, #248]	; (8000d5c <MX_TIM15_Init+0x13c>)
 8000c62:	4a3f      	ldr	r2, [pc, #252]	; (8000d60 <MX_TIM15_Init+0x140>)
 8000c64:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 16-1;
 8000c66:	4b3d      	ldr	r3, [pc, #244]	; (8000d5c <MX_TIM15_Init+0x13c>)
 8000c68:	220f      	movs	r2, #15
 8000c6a:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c6c:	4b3b      	ldr	r3, [pc, #236]	; (8000d5c <MX_TIM15_Init+0x13c>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 500-1;
 8000c72:	4b3a      	ldr	r3, [pc, #232]	; (8000d5c <MX_TIM15_Init+0x13c>)
 8000c74:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000c78:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c7a:	4b38      	ldr	r3, [pc, #224]	; (8000d5c <MX_TIM15_Init+0x13c>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000c80:	4b36      	ldr	r3, [pc, #216]	; (8000d5c <MX_TIM15_Init+0x13c>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c86:	4b35      	ldr	r3, [pc, #212]	; (8000d5c <MX_TIM15_Init+0x13c>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000c8c:	4833      	ldr	r0, [pc, #204]	; (8000d5c <MX_TIM15_Init+0x13c>)
 8000c8e:	f001 fa47 	bl	8002120 <HAL_TIM_Base_Init>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8000c98:	f7ff fee7 	bl	8000a6a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ca0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000ca2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	482c      	ldr	r0, [pc, #176]	; (8000d5c <MX_TIM15_Init+0x13c>)
 8000caa:	f001 fce3 	bl	8002674 <HAL_TIM_ConfigClockSource>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8000cb4:	f7ff fed9 	bl	8000a6a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000cb8:	4828      	ldr	r0, [pc, #160]	; (8000d5c <MX_TIM15_Init+0x13c>)
 8000cba:	f001 fa88 	bl	80021ce <HAL_TIM_PWM_Init>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8000cc4:	f7ff fed1 	bl	8000a6a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000cd0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4821      	ldr	r0, [pc, #132]	; (8000d5c <MX_TIM15_Init+0x13c>)
 8000cd8:	f002 f938 	bl	8002f4c <HAL_TIMEx_MasterConfigSynchronization>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8000ce2:	f7ff fec2 	bl	8000a6a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ce6:	2360      	movs	r3, #96	; 0x60
 8000ce8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 250;
 8000cea:	23fa      	movs	r3, #250	; 0xfa
 8000cec:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d06:	2200      	movs	r2, #0
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4814      	ldr	r0, [pc, #80]	; (8000d5c <MX_TIM15_Init+0x13c>)
 8000d0c:	f001 fb9e 	bl	800244c <HAL_TIM_PWM_ConfigChannel>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 8000d16:	f7ff fea8 	bl	8000a6a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d22:	2300      	movs	r3, #0
 8000d24:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d32:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d34:	2300      	movs	r3, #0
 8000d36:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000d38:	1d3b      	adds	r3, r7, #4
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4807      	ldr	r0, [pc, #28]	; (8000d5c <MX_TIM15_Init+0x13c>)
 8000d3e:	f002 f96b 	bl	8003018 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_TIM15_Init+0x12c>
  {
    Error_Handler();
 8000d48:	f7ff fe8f 	bl	8000a6a <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000d4c:	4803      	ldr	r0, [pc, #12]	; (8000d5c <MX_TIM15_Init+0x13c>)
 8000d4e:	f000 f83b 	bl	8000dc8 <HAL_TIM_MspPostInit>

}
 8000d52:	bf00      	nop
 8000d54:	3768      	adds	r7, #104	; 0x68
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	2000007c 	.word	0x2000007c
 8000d60:	40014000 	.word	0x40014000

08000d64 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d74:	d10c      	bne.n	8000d90 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d76:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <HAL_TIM_Base_MspInit+0x5c>)
 8000d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d7a:	4a11      	ldr	r2, [pc, #68]	; (8000dc0 <HAL_TIM_Base_MspInit+0x5c>)
 8000d7c:	f043 0301 	orr.w	r3, r3, #1
 8000d80:	6593      	str	r3, [r2, #88]	; 0x58
 8000d82:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <HAL_TIM_Base_MspInit+0x5c>)
 8000d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8000d8e:	e010      	b.n	8000db2 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM15)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a0b      	ldr	r2, [pc, #44]	; (8000dc4 <HAL_TIM_Base_MspInit+0x60>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d10b      	bne.n	8000db2 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000d9a:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <HAL_TIM_Base_MspInit+0x5c>)
 8000d9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d9e:	4a08      	ldr	r2, [pc, #32]	; (8000dc0 <HAL_TIM_Base_MspInit+0x5c>)
 8000da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000da4:	6613      	str	r3, [r2, #96]	; 0x60
 8000da6:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <HAL_TIM_Base_MspInit+0x5c>)
 8000da8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000daa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dae:	60bb      	str	r3, [r7, #8]
 8000db0:	68bb      	ldr	r3, [r7, #8]
}
 8000db2:	bf00      	nop
 8000db4:	3714      	adds	r7, #20
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	40014000 	.word	0x40014000

08000dc8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b08a      	sub	sp, #40	; 0x28
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000de8:	d11d      	bne.n	8000e26 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dea:	4b22      	ldr	r3, [pc, #136]	; (8000e74 <HAL_TIM_MspPostInit+0xac>)
 8000dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dee:	4a21      	ldr	r2, [pc, #132]	; (8000e74 <HAL_TIM_MspPostInit+0xac>)
 8000df0:	f043 0301 	orr.w	r3, r3, #1
 8000df4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000df6:	4b1f      	ldr	r3, [pc, #124]	; (8000e74 <HAL_TIM_MspPostInit+0xac>)
 8000df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	613b      	str	r3, [r7, #16]
 8000e00:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e02:	2301      	movs	r3, #1
 8000e04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e06:	2302      	movs	r3, #2
 8000e08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e12:	2301      	movs	r3, #1
 8000e14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e16:	f107 0314 	add.w	r3, r7, #20
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e20:	f000 f9b0 	bl	8001184 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8000e24:	e021      	b.n	8000e6a <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM15)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a13      	ldr	r2, [pc, #76]	; (8000e78 <HAL_TIM_MspPostInit+0xb0>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d11c      	bne.n	8000e6a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e30:	4b10      	ldr	r3, [pc, #64]	; (8000e74 <HAL_TIM_MspPostInit+0xac>)
 8000e32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e34:	4a0f      	ldr	r2, [pc, #60]	; (8000e74 <HAL_TIM_MspPostInit+0xac>)
 8000e36:	f043 0301 	orr.w	r3, r3, #1
 8000e3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e3c:	4b0d      	ldr	r3, [pc, #52]	; (8000e74 <HAL_TIM_MspPostInit+0xac>)
 8000e3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e40:	f003 0301 	and.w	r3, r3, #1
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e48:	2304      	movs	r3, #4
 8000e4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e54:	2300      	movs	r3, #0
 8000e56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8000e58:	230e      	movs	r3, #14
 8000e5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5c:	f107 0314 	add.w	r3, r7, #20
 8000e60:	4619      	mov	r1, r3
 8000e62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e66:	f000 f98d 	bl	8001184 <HAL_GPIO_Init>
}
 8000e6a:	bf00      	nop
 8000e6c:	3728      	adds	r7, #40	; 0x28
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40021000 	.word	0x40021000
 8000e78:	40014000 	.word	0x40014000

08000e7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000eb4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e80:	f7ff fe46 	bl	8000b10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e84:	480c      	ldr	r0, [pc, #48]	; (8000eb8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e86:	490d      	ldr	r1, [pc, #52]	; (8000ebc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e88:	4a0d      	ldr	r2, [pc, #52]	; (8000ec0 <LoopForever+0xe>)
  movs r3, #0
 8000e8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e8c:	e002      	b.n	8000e94 <LoopCopyDataInit>

08000e8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e92:	3304      	adds	r3, #4

08000e94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e98:	d3f9      	bcc.n	8000e8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e9a:	4a0a      	ldr	r2, [pc, #40]	; (8000ec4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e9c:	4c0a      	ldr	r4, [pc, #40]	; (8000ec8 <LoopForever+0x16>)
  movs r3, #0
 8000e9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ea0:	e001      	b.n	8000ea6 <LoopFillZerobss>

08000ea2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ea2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ea4:	3204      	adds	r2, #4

08000ea6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ea6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ea8:	d3fb      	bcc.n	8000ea2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eaa:	f002 f92d 	bl	8003108 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000eae:	f7ff fcdf 	bl	8000870 <main>

08000eb2 <LoopForever>:

LoopForever:
    b LoopForever
 8000eb2:	e7fe      	b.n	8000eb2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000eb4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000eb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ebc:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000ec0:	080031c0 	.word	0x080031c0
  ldr r2, =_sbss
 8000ec4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000ec8:	200000cc 	.word	0x200000cc

08000ecc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ecc:	e7fe      	b.n	8000ecc <ADC1_IRQHandler>

08000ece <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b082      	sub	sp, #8
 8000ed2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed8:	2003      	movs	r0, #3
 8000eda:	f000 f91f 	bl	800111c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ede:	2000      	movs	r0, #0
 8000ee0:	f000 f80e 	bl	8000f00 <HAL_InitTick>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d002      	beq.n	8000ef0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	71fb      	strb	r3, [r7, #7]
 8000eee:	e001      	b.n	8000ef4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ef0:	f7ff fdc0 	bl	8000a74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
	...

08000f00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f0c:	4b17      	ldr	r3, [pc, #92]	; (8000f6c <HAL_InitTick+0x6c>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d023      	beq.n	8000f5c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f14:	4b16      	ldr	r3, [pc, #88]	; (8000f70 <HAL_InitTick+0x70>)
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	4b14      	ldr	r3, [pc, #80]	; (8000f6c <HAL_InitTick+0x6c>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f000 f91d 	bl	800116a <HAL_SYSTICK_Config>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d10f      	bne.n	8000f56 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2b0f      	cmp	r3, #15
 8000f3a:	d809      	bhi.n	8000f50 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	6879      	ldr	r1, [r7, #4]
 8000f40:	f04f 30ff 	mov.w	r0, #4294967295
 8000f44:	f000 f8f5 	bl	8001132 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f48:	4a0a      	ldr	r2, [pc, #40]	; (8000f74 <HAL_InitTick+0x74>)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6013      	str	r3, [r2, #0]
 8000f4e:	e007      	b.n	8000f60 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f50:	2301      	movs	r3, #1
 8000f52:	73fb      	strb	r3, [r7, #15]
 8000f54:	e004      	b.n	8000f60 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	73fb      	strb	r3, [r7, #15]
 8000f5a:	e001      	b.n	8000f60 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000010 	.word	0x20000010
 8000f70:	20000008 	.word	0x20000008
 8000f74:	2000000c 	.word	0x2000000c

08000f78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f7c:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <HAL_IncTick+0x20>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	461a      	mov	r2, r3
 8000f82:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <HAL_IncTick+0x24>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4413      	add	r3, r2
 8000f88:	4a04      	ldr	r2, [pc, #16]	; (8000f9c <HAL_IncTick+0x24>)
 8000f8a:	6013      	str	r3, [r2, #0]
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	20000010 	.word	0x20000010
 8000f9c:	200000c8 	.word	0x200000c8

08000fa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa4:	4b03      	ldr	r3, [pc, #12]	; (8000fb4 <HAL_GetTick+0x14>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	200000c8 	.word	0x200000c8

08000fb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f003 0307 	and.w	r3, r3, #7
 8000fc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc8:	4b0c      	ldr	r3, [pc, #48]	; (8000ffc <__NVIC_SetPriorityGrouping+0x44>)
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fce:	68ba      	ldr	r2, [r7, #8]
 8000fd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fe0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fe4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fea:	4a04      	ldr	r2, [pc, #16]	; (8000ffc <__NVIC_SetPriorityGrouping+0x44>)
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	60d3      	str	r3, [r2, #12]
}
 8000ff0:	bf00      	nop
 8000ff2:	3714      	adds	r7, #20
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001004:	4b04      	ldr	r3, [pc, #16]	; (8001018 <__NVIC_GetPriorityGrouping+0x18>)
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	0a1b      	lsrs	r3, r3, #8
 800100a:	f003 0307 	and.w	r3, r3, #7
}
 800100e:	4618      	mov	r0, r3
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	6039      	str	r1, [r7, #0]
 8001026:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102c:	2b00      	cmp	r3, #0
 800102e:	db0a      	blt.n	8001046 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	b2da      	uxtb	r2, r3
 8001034:	490c      	ldr	r1, [pc, #48]	; (8001068 <__NVIC_SetPriority+0x4c>)
 8001036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103a:	0112      	lsls	r2, r2, #4
 800103c:	b2d2      	uxtb	r2, r2
 800103e:	440b      	add	r3, r1
 8001040:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001044:	e00a      	b.n	800105c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	b2da      	uxtb	r2, r3
 800104a:	4908      	ldr	r1, [pc, #32]	; (800106c <__NVIC_SetPriority+0x50>)
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	f003 030f 	and.w	r3, r3, #15
 8001052:	3b04      	subs	r3, #4
 8001054:	0112      	lsls	r2, r2, #4
 8001056:	b2d2      	uxtb	r2, r2
 8001058:	440b      	add	r3, r1
 800105a:	761a      	strb	r2, [r3, #24]
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	e000e100 	.word	0xe000e100
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001070:	b480      	push	{r7}
 8001072:	b089      	sub	sp, #36	; 0x24
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	f003 0307 	and.w	r3, r3, #7
 8001082:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	f1c3 0307 	rsb	r3, r3, #7
 800108a:	2b04      	cmp	r3, #4
 800108c:	bf28      	it	cs
 800108e:	2304      	movcs	r3, #4
 8001090:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	3304      	adds	r3, #4
 8001096:	2b06      	cmp	r3, #6
 8001098:	d902      	bls.n	80010a0 <NVIC_EncodePriority+0x30>
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	3b03      	subs	r3, #3
 800109e:	e000      	b.n	80010a2 <NVIC_EncodePriority+0x32>
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a4:	f04f 32ff 	mov.w	r2, #4294967295
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	43da      	mvns	r2, r3
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	401a      	ands	r2, r3
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010b8:	f04f 31ff 	mov.w	r1, #4294967295
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	fa01 f303 	lsl.w	r3, r1, r3
 80010c2:	43d9      	mvns	r1, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c8:	4313      	orrs	r3, r2
         );
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3724      	adds	r7, #36	; 0x24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
	...

080010d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	3b01      	subs	r3, #1
 80010e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010e8:	d301      	bcc.n	80010ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ea:	2301      	movs	r3, #1
 80010ec:	e00f      	b.n	800110e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ee:	4a0a      	ldr	r2, [pc, #40]	; (8001118 <SysTick_Config+0x40>)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	3b01      	subs	r3, #1
 80010f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010f6:	210f      	movs	r1, #15
 80010f8:	f04f 30ff 	mov.w	r0, #4294967295
 80010fc:	f7ff ff8e 	bl	800101c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001100:	4b05      	ldr	r3, [pc, #20]	; (8001118 <SysTick_Config+0x40>)
 8001102:	2200      	movs	r2, #0
 8001104:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001106:	4b04      	ldr	r3, [pc, #16]	; (8001118 <SysTick_Config+0x40>)
 8001108:	2207      	movs	r2, #7
 800110a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800110c:	2300      	movs	r3, #0
}
 800110e:	4618      	mov	r0, r3
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	e000e010 	.word	0xe000e010

0800111c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f7ff ff47 	bl	8000fb8 <__NVIC_SetPriorityGrouping>
}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b086      	sub	sp, #24
 8001136:	af00      	add	r7, sp, #0
 8001138:	4603      	mov	r3, r0
 800113a:	60b9      	str	r1, [r7, #8]
 800113c:	607a      	str	r2, [r7, #4]
 800113e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001144:	f7ff ff5c 	bl	8001000 <__NVIC_GetPriorityGrouping>
 8001148:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	68b9      	ldr	r1, [r7, #8]
 800114e:	6978      	ldr	r0, [r7, #20]
 8001150:	f7ff ff8e 	bl	8001070 <NVIC_EncodePriority>
 8001154:	4602      	mov	r2, r0
 8001156:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800115a:	4611      	mov	r1, r2
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff ff5d 	bl	800101c <__NVIC_SetPriority>
}
 8001162:	bf00      	nop
 8001164:	3718      	adds	r7, #24
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b082      	sub	sp, #8
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f7ff ffb0 	bl	80010d8 <SysTick_Config>
 8001178:	4603      	mov	r3, r0
}
 800117a:	4618      	mov	r0, r3
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
	...

08001184 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001184:	b480      	push	{r7}
 8001186:	b087      	sub	sp, #28
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800118e:	2300      	movs	r3, #0
 8001190:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001192:	e148      	b.n	8001426 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	2101      	movs	r1, #1
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	fa01 f303 	lsl.w	r3, r1, r3
 80011a0:	4013      	ands	r3, r2
 80011a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	f000 813a 	beq.w	8001420 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f003 0303 	and.w	r3, r3, #3
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d005      	beq.n	80011c4 <HAL_GPIO_Init+0x40>
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f003 0303 	and.w	r3, r3, #3
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d130      	bne.n	8001226 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	2203      	movs	r2, #3
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	4013      	ands	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	68da      	ldr	r2, [r3, #12]
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	693a      	ldr	r2, [r7, #16]
 80011f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011fa:	2201      	movs	r2, #1
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43db      	mvns	r3, r3
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	4013      	ands	r3, r2
 8001208:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	091b      	lsrs	r3, r3, #4
 8001210:	f003 0201 	and.w	r2, r3, #1
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	4313      	orrs	r3, r2
 800121e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f003 0303 	and.w	r3, r3, #3
 800122e:	2b03      	cmp	r3, #3
 8001230:	d017      	beq.n	8001262 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	68db      	ldr	r3, [r3, #12]
 8001236:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	2203      	movs	r2, #3
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	43db      	mvns	r3, r3
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	4013      	ands	r3, r2
 8001248:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	689a      	ldr	r2, [r3, #8]
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	4313      	orrs	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f003 0303 	and.w	r3, r3, #3
 800126a:	2b02      	cmp	r3, #2
 800126c:	d123      	bne.n	80012b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	08da      	lsrs	r2, r3, #3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	3208      	adds	r2, #8
 8001276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800127a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	220f      	movs	r2, #15
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	43db      	mvns	r3, r3
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	4013      	ands	r3, r2
 8001290:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	691a      	ldr	r2, [r3, #16]
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	f003 0307 	and.w	r3, r3, #7
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	08da      	lsrs	r2, r3, #3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3208      	adds	r2, #8
 80012b0:	6939      	ldr	r1, [r7, #16]
 80012b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	2203      	movs	r2, #3
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	43db      	mvns	r3, r3
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	4013      	ands	r3, r2
 80012cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f003 0203 	and.w	r2, r3, #3
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	f000 8094 	beq.w	8001420 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f8:	4b52      	ldr	r3, [pc, #328]	; (8001444 <HAL_GPIO_Init+0x2c0>)
 80012fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012fc:	4a51      	ldr	r2, [pc, #324]	; (8001444 <HAL_GPIO_Init+0x2c0>)
 80012fe:	f043 0301 	orr.w	r3, r3, #1
 8001302:	6613      	str	r3, [r2, #96]	; 0x60
 8001304:	4b4f      	ldr	r3, [pc, #316]	; (8001444 <HAL_GPIO_Init+0x2c0>)
 8001306:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001308:	f003 0301 	and.w	r3, r3, #1
 800130c:	60bb      	str	r3, [r7, #8]
 800130e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001310:	4a4d      	ldr	r2, [pc, #308]	; (8001448 <HAL_GPIO_Init+0x2c4>)
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	089b      	lsrs	r3, r3, #2
 8001316:	3302      	adds	r3, #2
 8001318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800131c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	f003 0303 	and.w	r3, r3, #3
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	220f      	movs	r2, #15
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	43db      	mvns	r3, r3
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	4013      	ands	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800133a:	d00d      	beq.n	8001358 <HAL_GPIO_Init+0x1d4>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4a43      	ldr	r2, [pc, #268]	; (800144c <HAL_GPIO_Init+0x2c8>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d007      	beq.n	8001354 <HAL_GPIO_Init+0x1d0>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4a42      	ldr	r2, [pc, #264]	; (8001450 <HAL_GPIO_Init+0x2cc>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d101      	bne.n	8001350 <HAL_GPIO_Init+0x1cc>
 800134c:	2302      	movs	r3, #2
 800134e:	e004      	b.n	800135a <HAL_GPIO_Init+0x1d6>
 8001350:	2307      	movs	r3, #7
 8001352:	e002      	b.n	800135a <HAL_GPIO_Init+0x1d6>
 8001354:	2301      	movs	r3, #1
 8001356:	e000      	b.n	800135a <HAL_GPIO_Init+0x1d6>
 8001358:	2300      	movs	r3, #0
 800135a:	697a      	ldr	r2, [r7, #20]
 800135c:	f002 0203 	and.w	r2, r2, #3
 8001360:	0092      	lsls	r2, r2, #2
 8001362:	4093      	lsls	r3, r2
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	4313      	orrs	r3, r2
 8001368:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800136a:	4937      	ldr	r1, [pc, #220]	; (8001448 <HAL_GPIO_Init+0x2c4>)
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	089b      	lsrs	r3, r3, #2
 8001370:	3302      	adds	r3, #2
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001378:	4b36      	ldr	r3, [pc, #216]	; (8001454 <HAL_GPIO_Init+0x2d0>)
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	43db      	mvns	r3, r3
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	4013      	ands	r3, r2
 8001386:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d003      	beq.n	800139c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	4313      	orrs	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800139c:	4a2d      	ldr	r2, [pc, #180]	; (8001454 <HAL_GPIO_Init+0x2d0>)
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013a2:	4b2c      	ldr	r3, [pc, #176]	; (8001454 <HAL_GPIO_Init+0x2d0>)
 80013a4:	68db      	ldr	r3, [r3, #12]
 80013a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	43db      	mvns	r3, r3
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	4013      	ands	r3, r2
 80013b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d003      	beq.n	80013c6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013c6:	4a23      	ldr	r2, [pc, #140]	; (8001454 <HAL_GPIO_Init+0x2d0>)
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80013cc:	4b21      	ldr	r3, [pc, #132]	; (8001454 <HAL_GPIO_Init+0x2d0>)
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	43db      	mvns	r3, r3
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	4013      	ands	r3, r2
 80013da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d003      	beq.n	80013f0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013f0:	4a18      	ldr	r2, [pc, #96]	; (8001454 <HAL_GPIO_Init+0x2d0>)
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80013f6:	4b17      	ldr	r3, [pc, #92]	; (8001454 <HAL_GPIO_Init+0x2d0>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	43db      	mvns	r3, r3
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	4013      	ands	r3, r2
 8001404:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d003      	beq.n	800141a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	4313      	orrs	r3, r2
 8001418:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800141a:	4a0e      	ldr	r2, [pc, #56]	; (8001454 <HAL_GPIO_Init+0x2d0>)
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	3301      	adds	r3, #1
 8001424:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	fa22 f303 	lsr.w	r3, r2, r3
 8001430:	2b00      	cmp	r3, #0
 8001432:	f47f aeaf 	bne.w	8001194 <HAL_GPIO_Init+0x10>
  }
}
 8001436:	bf00      	nop
 8001438:	bf00      	nop
 800143a:	371c      	adds	r7, #28
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	40021000 	.word	0x40021000
 8001448:	40010000 	.word	0x40010000
 800144c:	48000400 	.word	0x48000400
 8001450:	48000800 	.word	0x48000800
 8001454:	40010400 	.word	0x40010400

08001458 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800145c:	4b04      	ldr	r3, [pc, #16]	; (8001470 <HAL_PWREx_GetVoltageRange+0x18>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001464:	4618      	mov	r0, r3
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	40007000 	.word	0x40007000

08001474 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001482:	d130      	bne.n	80014e6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001484:	4b23      	ldr	r3, [pc, #140]	; (8001514 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800148c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001490:	d038      	beq.n	8001504 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001492:	4b20      	ldr	r3, [pc, #128]	; (8001514 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800149a:	4a1e      	ldr	r2, [pc, #120]	; (8001514 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800149c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014a0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014a2:	4b1d      	ldr	r3, [pc, #116]	; (8001518 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2232      	movs	r2, #50	; 0x32
 80014a8:	fb02 f303 	mul.w	r3, r2, r3
 80014ac:	4a1b      	ldr	r2, [pc, #108]	; (800151c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80014ae:	fba2 2303 	umull	r2, r3, r2, r3
 80014b2:	0c9b      	lsrs	r3, r3, #18
 80014b4:	3301      	adds	r3, #1
 80014b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014b8:	e002      	b.n	80014c0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	3b01      	subs	r3, #1
 80014be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014c0:	4b14      	ldr	r3, [pc, #80]	; (8001514 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014c2:	695b      	ldr	r3, [r3, #20]
 80014c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014cc:	d102      	bne.n	80014d4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d1f2      	bne.n	80014ba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014d4:	4b0f      	ldr	r3, [pc, #60]	; (8001514 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014d6:	695b      	ldr	r3, [r3, #20]
 80014d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014e0:	d110      	bne.n	8001504 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e00f      	b.n	8001506 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80014e6:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014f2:	d007      	beq.n	8001504 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80014f4:	4b07      	ldr	r3, [pc, #28]	; (8001514 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014fc:	4a05      	ldr	r2, [pc, #20]	; (8001514 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001502:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3714      	adds	r7, #20
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	40007000 	.word	0x40007000
 8001518:	20000008 	.word	0x20000008
 800151c:	431bde83 	.word	0x431bde83

08001520 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b088      	sub	sp, #32
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d102      	bne.n	8001534 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	f000 bc02 	b.w	8001d38 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001534:	4b96      	ldr	r3, [pc, #600]	; (8001790 <HAL_RCC_OscConfig+0x270>)
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f003 030c 	and.w	r3, r3, #12
 800153c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800153e:	4b94      	ldr	r3, [pc, #592]	; (8001790 <HAL_RCC_OscConfig+0x270>)
 8001540:	68db      	ldr	r3, [r3, #12]
 8001542:	f003 0303 	and.w	r3, r3, #3
 8001546:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0310 	and.w	r3, r3, #16
 8001550:	2b00      	cmp	r3, #0
 8001552:	f000 80e4 	beq.w	800171e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d007      	beq.n	800156c <HAL_RCC_OscConfig+0x4c>
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	2b0c      	cmp	r3, #12
 8001560:	f040 808b 	bne.w	800167a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	2b01      	cmp	r3, #1
 8001568:	f040 8087 	bne.w	800167a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800156c:	4b88      	ldr	r3, [pc, #544]	; (8001790 <HAL_RCC_OscConfig+0x270>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0302 	and.w	r3, r3, #2
 8001574:	2b00      	cmp	r3, #0
 8001576:	d005      	beq.n	8001584 <HAL_RCC_OscConfig+0x64>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d101      	bne.n	8001584 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e3d9      	b.n	8001d38 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6a1a      	ldr	r2, [r3, #32]
 8001588:	4b81      	ldr	r3, [pc, #516]	; (8001790 <HAL_RCC_OscConfig+0x270>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0308 	and.w	r3, r3, #8
 8001590:	2b00      	cmp	r3, #0
 8001592:	d004      	beq.n	800159e <HAL_RCC_OscConfig+0x7e>
 8001594:	4b7e      	ldr	r3, [pc, #504]	; (8001790 <HAL_RCC_OscConfig+0x270>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800159c:	e005      	b.n	80015aa <HAL_RCC_OscConfig+0x8a>
 800159e:	4b7c      	ldr	r3, [pc, #496]	; (8001790 <HAL_RCC_OscConfig+0x270>)
 80015a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015a4:	091b      	lsrs	r3, r3, #4
 80015a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d223      	bcs.n	80015f6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6a1b      	ldr	r3, [r3, #32]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f000 fd54 	bl	8002060 <RCC_SetFlashLatencyFromMSIRange>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e3ba      	b.n	8001d38 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015c2:	4b73      	ldr	r3, [pc, #460]	; (8001790 <HAL_RCC_OscConfig+0x270>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a72      	ldr	r2, [pc, #456]	; (8001790 <HAL_RCC_OscConfig+0x270>)
 80015c8:	f043 0308 	orr.w	r3, r3, #8
 80015cc:	6013      	str	r3, [r2, #0]
 80015ce:	4b70      	ldr	r3, [pc, #448]	; (8001790 <HAL_RCC_OscConfig+0x270>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a1b      	ldr	r3, [r3, #32]
 80015da:	496d      	ldr	r1, [pc, #436]	; (8001790 <HAL_RCC_OscConfig+0x270>)
 80015dc:	4313      	orrs	r3, r2
 80015de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015e0:	4b6b      	ldr	r3, [pc, #428]	; (8001790 <HAL_RCC_OscConfig+0x270>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	69db      	ldr	r3, [r3, #28]
 80015ec:	021b      	lsls	r3, r3, #8
 80015ee:	4968      	ldr	r1, [pc, #416]	; (8001790 <HAL_RCC_OscConfig+0x270>)
 80015f0:	4313      	orrs	r3, r2
 80015f2:	604b      	str	r3, [r1, #4]
 80015f4:	e025      	b.n	8001642 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015f6:	4b66      	ldr	r3, [pc, #408]	; (8001790 <HAL_RCC_OscConfig+0x270>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a65      	ldr	r2, [pc, #404]	; (8001790 <HAL_RCC_OscConfig+0x270>)
 80015fc:	f043 0308 	orr.w	r3, r3, #8
 8001600:	6013      	str	r3, [r2, #0]
 8001602:	4b63      	ldr	r3, [pc, #396]	; (8001790 <HAL_RCC_OscConfig+0x270>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6a1b      	ldr	r3, [r3, #32]
 800160e:	4960      	ldr	r1, [pc, #384]	; (8001790 <HAL_RCC_OscConfig+0x270>)
 8001610:	4313      	orrs	r3, r2
 8001612:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001614:	4b5e      	ldr	r3, [pc, #376]	; (8001790 <HAL_RCC_OscConfig+0x270>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	69db      	ldr	r3, [r3, #28]
 8001620:	021b      	lsls	r3, r3, #8
 8001622:	495b      	ldr	r1, [pc, #364]	; (8001790 <HAL_RCC_OscConfig+0x270>)
 8001624:	4313      	orrs	r3, r2
 8001626:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d109      	bne.n	8001642 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a1b      	ldr	r3, [r3, #32]
 8001632:	4618      	mov	r0, r3
 8001634:	f000 fd14 	bl	8002060 <RCC_SetFlashLatencyFromMSIRange>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e37a      	b.n	8001d38 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001642:	f000 fc81 	bl	8001f48 <HAL_RCC_GetSysClockFreq>
 8001646:	4602      	mov	r2, r0
 8001648:	4b51      	ldr	r3, [pc, #324]	; (8001790 <HAL_RCC_OscConfig+0x270>)
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	091b      	lsrs	r3, r3, #4
 800164e:	f003 030f 	and.w	r3, r3, #15
 8001652:	4950      	ldr	r1, [pc, #320]	; (8001794 <HAL_RCC_OscConfig+0x274>)
 8001654:	5ccb      	ldrb	r3, [r1, r3]
 8001656:	f003 031f 	and.w	r3, r3, #31
 800165a:	fa22 f303 	lsr.w	r3, r2, r3
 800165e:	4a4e      	ldr	r2, [pc, #312]	; (8001798 <HAL_RCC_OscConfig+0x278>)
 8001660:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001662:	4b4e      	ldr	r3, [pc, #312]	; (800179c <HAL_RCC_OscConfig+0x27c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff fc4a 	bl	8000f00 <HAL_InitTick>
 800166c:	4603      	mov	r3, r0
 800166e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001670:	7bfb      	ldrb	r3, [r7, #15]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d052      	beq.n	800171c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001676:	7bfb      	ldrb	r3, [r7, #15]
 8001678:	e35e      	b.n	8001d38 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	699b      	ldr	r3, [r3, #24]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d032      	beq.n	80016e8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001682:	4b43      	ldr	r3, [pc, #268]	; (8001790 <HAL_RCC_OscConfig+0x270>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a42      	ldr	r2, [pc, #264]	; (8001790 <HAL_RCC_OscConfig+0x270>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800168e:	f7ff fc87 	bl	8000fa0 <HAL_GetTick>
 8001692:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001694:	e008      	b.n	80016a8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001696:	f7ff fc83 	bl	8000fa0 <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e347      	b.n	8001d38 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016a8:	4b39      	ldr	r3, [pc, #228]	; (8001790 <HAL_RCC_OscConfig+0x270>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d0f0      	beq.n	8001696 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016b4:	4b36      	ldr	r3, [pc, #216]	; (8001790 <HAL_RCC_OscConfig+0x270>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a35      	ldr	r2, [pc, #212]	; (8001790 <HAL_RCC_OscConfig+0x270>)
 80016ba:	f043 0308 	orr.w	r3, r3, #8
 80016be:	6013      	str	r3, [r2, #0]
 80016c0:	4b33      	ldr	r3, [pc, #204]	; (8001790 <HAL_RCC_OscConfig+0x270>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6a1b      	ldr	r3, [r3, #32]
 80016cc:	4930      	ldr	r1, [pc, #192]	; (8001790 <HAL_RCC_OscConfig+0x270>)
 80016ce:	4313      	orrs	r3, r2
 80016d0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016d2:	4b2f      	ldr	r3, [pc, #188]	; (8001790 <HAL_RCC_OscConfig+0x270>)
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	021b      	lsls	r3, r3, #8
 80016e0:	492b      	ldr	r1, [pc, #172]	; (8001790 <HAL_RCC_OscConfig+0x270>)
 80016e2:	4313      	orrs	r3, r2
 80016e4:	604b      	str	r3, [r1, #4]
 80016e6:	e01a      	b.n	800171e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80016e8:	4b29      	ldr	r3, [pc, #164]	; (8001790 <HAL_RCC_OscConfig+0x270>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a28      	ldr	r2, [pc, #160]	; (8001790 <HAL_RCC_OscConfig+0x270>)
 80016ee:	f023 0301 	bic.w	r3, r3, #1
 80016f2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016f4:	f7ff fc54 	bl	8000fa0 <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016fa:	e008      	b.n	800170e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016fc:	f7ff fc50 	bl	8000fa0 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b02      	cmp	r3, #2
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e314      	b.n	8001d38 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800170e:	4b20      	ldr	r3, [pc, #128]	; (8001790 <HAL_RCC_OscConfig+0x270>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d1f0      	bne.n	80016fc <HAL_RCC_OscConfig+0x1dc>
 800171a:	e000      	b.n	800171e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800171c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	2b00      	cmp	r3, #0
 8001728:	d073      	beq.n	8001812 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	2b08      	cmp	r3, #8
 800172e:	d005      	beq.n	800173c <HAL_RCC_OscConfig+0x21c>
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	2b0c      	cmp	r3, #12
 8001734:	d10e      	bne.n	8001754 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	2b03      	cmp	r3, #3
 800173a:	d10b      	bne.n	8001754 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800173c:	4b14      	ldr	r3, [pc, #80]	; (8001790 <HAL_RCC_OscConfig+0x270>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d063      	beq.n	8001810 <HAL_RCC_OscConfig+0x2f0>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d15f      	bne.n	8001810 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e2f1      	b.n	8001d38 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800175c:	d106      	bne.n	800176c <HAL_RCC_OscConfig+0x24c>
 800175e:	4b0c      	ldr	r3, [pc, #48]	; (8001790 <HAL_RCC_OscConfig+0x270>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a0b      	ldr	r2, [pc, #44]	; (8001790 <HAL_RCC_OscConfig+0x270>)
 8001764:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001768:	6013      	str	r3, [r2, #0]
 800176a:	e025      	b.n	80017b8 <HAL_RCC_OscConfig+0x298>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001774:	d114      	bne.n	80017a0 <HAL_RCC_OscConfig+0x280>
 8001776:	4b06      	ldr	r3, [pc, #24]	; (8001790 <HAL_RCC_OscConfig+0x270>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a05      	ldr	r2, [pc, #20]	; (8001790 <HAL_RCC_OscConfig+0x270>)
 800177c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001780:	6013      	str	r3, [r2, #0]
 8001782:	4b03      	ldr	r3, [pc, #12]	; (8001790 <HAL_RCC_OscConfig+0x270>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a02      	ldr	r2, [pc, #8]	; (8001790 <HAL_RCC_OscConfig+0x270>)
 8001788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800178c:	6013      	str	r3, [r2, #0]
 800178e:	e013      	b.n	80017b8 <HAL_RCC_OscConfig+0x298>
 8001790:	40021000 	.word	0x40021000
 8001794:	08003178 	.word	0x08003178
 8001798:	20000008 	.word	0x20000008
 800179c:	2000000c 	.word	0x2000000c
 80017a0:	4ba0      	ldr	r3, [pc, #640]	; (8001a24 <HAL_RCC_OscConfig+0x504>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a9f      	ldr	r2, [pc, #636]	; (8001a24 <HAL_RCC_OscConfig+0x504>)
 80017a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017aa:	6013      	str	r3, [r2, #0]
 80017ac:	4b9d      	ldr	r3, [pc, #628]	; (8001a24 <HAL_RCC_OscConfig+0x504>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a9c      	ldr	r2, [pc, #624]	; (8001a24 <HAL_RCC_OscConfig+0x504>)
 80017b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d013      	beq.n	80017e8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c0:	f7ff fbee 	bl	8000fa0 <HAL_GetTick>
 80017c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017c8:	f7ff fbea 	bl	8000fa0 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b64      	cmp	r3, #100	; 0x64
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e2ae      	b.n	8001d38 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017da:	4b92      	ldr	r3, [pc, #584]	; (8001a24 <HAL_RCC_OscConfig+0x504>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d0f0      	beq.n	80017c8 <HAL_RCC_OscConfig+0x2a8>
 80017e6:	e014      	b.n	8001812 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e8:	f7ff fbda 	bl	8000fa0 <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017f0:	f7ff fbd6 	bl	8000fa0 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b64      	cmp	r3, #100	; 0x64
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e29a      	b.n	8001d38 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001802:	4b88      	ldr	r3, [pc, #544]	; (8001a24 <HAL_RCC_OscConfig+0x504>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1f0      	bne.n	80017f0 <HAL_RCC_OscConfig+0x2d0>
 800180e:	e000      	b.n	8001812 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001810:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d060      	beq.n	80018e0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	2b04      	cmp	r3, #4
 8001822:	d005      	beq.n	8001830 <HAL_RCC_OscConfig+0x310>
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	2b0c      	cmp	r3, #12
 8001828:	d119      	bne.n	800185e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	2b02      	cmp	r3, #2
 800182e:	d116      	bne.n	800185e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001830:	4b7c      	ldr	r3, [pc, #496]	; (8001a24 <HAL_RCC_OscConfig+0x504>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001838:	2b00      	cmp	r3, #0
 800183a:	d005      	beq.n	8001848 <HAL_RCC_OscConfig+0x328>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d101      	bne.n	8001848 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e277      	b.n	8001d38 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001848:	4b76      	ldr	r3, [pc, #472]	; (8001a24 <HAL_RCC_OscConfig+0x504>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	691b      	ldr	r3, [r3, #16]
 8001854:	061b      	lsls	r3, r3, #24
 8001856:	4973      	ldr	r1, [pc, #460]	; (8001a24 <HAL_RCC_OscConfig+0x504>)
 8001858:	4313      	orrs	r3, r2
 800185a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800185c:	e040      	b.n	80018e0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d023      	beq.n	80018ae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001866:	4b6f      	ldr	r3, [pc, #444]	; (8001a24 <HAL_RCC_OscConfig+0x504>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a6e      	ldr	r2, [pc, #440]	; (8001a24 <HAL_RCC_OscConfig+0x504>)
 800186c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001870:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001872:	f7ff fb95 	bl	8000fa0 <HAL_GetTick>
 8001876:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001878:	e008      	b.n	800188c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800187a:	f7ff fb91 	bl	8000fa0 <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	2b02      	cmp	r3, #2
 8001886:	d901      	bls.n	800188c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e255      	b.n	8001d38 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800188c:	4b65      	ldr	r3, [pc, #404]	; (8001a24 <HAL_RCC_OscConfig+0x504>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001894:	2b00      	cmp	r3, #0
 8001896:	d0f0      	beq.n	800187a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001898:	4b62      	ldr	r3, [pc, #392]	; (8001a24 <HAL_RCC_OscConfig+0x504>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	691b      	ldr	r3, [r3, #16]
 80018a4:	061b      	lsls	r3, r3, #24
 80018a6:	495f      	ldr	r1, [pc, #380]	; (8001a24 <HAL_RCC_OscConfig+0x504>)
 80018a8:	4313      	orrs	r3, r2
 80018aa:	604b      	str	r3, [r1, #4]
 80018ac:	e018      	b.n	80018e0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018ae:	4b5d      	ldr	r3, [pc, #372]	; (8001a24 <HAL_RCC_OscConfig+0x504>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a5c      	ldr	r2, [pc, #368]	; (8001a24 <HAL_RCC_OscConfig+0x504>)
 80018b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ba:	f7ff fb71 	bl	8000fa0 <HAL_GetTick>
 80018be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018c0:	e008      	b.n	80018d4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018c2:	f7ff fb6d 	bl	8000fa0 <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e231      	b.n	8001d38 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018d4:	4b53      	ldr	r3, [pc, #332]	; (8001a24 <HAL_RCC_OscConfig+0x504>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d1f0      	bne.n	80018c2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0308 	and.w	r3, r3, #8
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d03c      	beq.n	8001966 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	695b      	ldr	r3, [r3, #20]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d01c      	beq.n	800192e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018f4:	4b4b      	ldr	r3, [pc, #300]	; (8001a24 <HAL_RCC_OscConfig+0x504>)
 80018f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018fa:	4a4a      	ldr	r2, [pc, #296]	; (8001a24 <HAL_RCC_OscConfig+0x504>)
 80018fc:	f043 0301 	orr.w	r3, r3, #1
 8001900:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001904:	f7ff fb4c 	bl	8000fa0 <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800190c:	f7ff fb48 	bl	8000fa0 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e20c      	b.n	8001d38 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800191e:	4b41      	ldr	r3, [pc, #260]	; (8001a24 <HAL_RCC_OscConfig+0x504>)
 8001920:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001924:	f003 0302 	and.w	r3, r3, #2
 8001928:	2b00      	cmp	r3, #0
 800192a:	d0ef      	beq.n	800190c <HAL_RCC_OscConfig+0x3ec>
 800192c:	e01b      	b.n	8001966 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800192e:	4b3d      	ldr	r3, [pc, #244]	; (8001a24 <HAL_RCC_OscConfig+0x504>)
 8001930:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001934:	4a3b      	ldr	r2, [pc, #236]	; (8001a24 <HAL_RCC_OscConfig+0x504>)
 8001936:	f023 0301 	bic.w	r3, r3, #1
 800193a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800193e:	f7ff fb2f 	bl	8000fa0 <HAL_GetTick>
 8001942:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001944:	e008      	b.n	8001958 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001946:	f7ff fb2b 	bl	8000fa0 <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d901      	bls.n	8001958 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e1ef      	b.n	8001d38 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001958:	4b32      	ldr	r3, [pc, #200]	; (8001a24 <HAL_RCC_OscConfig+0x504>)
 800195a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1ef      	bne.n	8001946 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0304 	and.w	r3, r3, #4
 800196e:	2b00      	cmp	r3, #0
 8001970:	f000 80a6 	beq.w	8001ac0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001974:	2300      	movs	r3, #0
 8001976:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001978:	4b2a      	ldr	r3, [pc, #168]	; (8001a24 <HAL_RCC_OscConfig+0x504>)
 800197a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800197c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d10d      	bne.n	80019a0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001984:	4b27      	ldr	r3, [pc, #156]	; (8001a24 <HAL_RCC_OscConfig+0x504>)
 8001986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001988:	4a26      	ldr	r2, [pc, #152]	; (8001a24 <HAL_RCC_OscConfig+0x504>)
 800198a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800198e:	6593      	str	r3, [r2, #88]	; 0x58
 8001990:	4b24      	ldr	r3, [pc, #144]	; (8001a24 <HAL_RCC_OscConfig+0x504>)
 8001992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001994:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001998:	60bb      	str	r3, [r7, #8]
 800199a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800199c:	2301      	movs	r3, #1
 800199e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019a0:	4b21      	ldr	r3, [pc, #132]	; (8001a28 <HAL_RCC_OscConfig+0x508>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d118      	bne.n	80019de <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019ac:	4b1e      	ldr	r3, [pc, #120]	; (8001a28 <HAL_RCC_OscConfig+0x508>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a1d      	ldr	r2, [pc, #116]	; (8001a28 <HAL_RCC_OscConfig+0x508>)
 80019b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019b8:	f7ff faf2 	bl	8000fa0 <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019be:	e008      	b.n	80019d2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019c0:	f7ff faee 	bl	8000fa0 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e1b2      	b.n	8001d38 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019d2:	4b15      	ldr	r3, [pc, #84]	; (8001a28 <HAL_RCC_OscConfig+0x508>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d0f0      	beq.n	80019c0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d108      	bne.n	80019f8 <HAL_RCC_OscConfig+0x4d8>
 80019e6:	4b0f      	ldr	r3, [pc, #60]	; (8001a24 <HAL_RCC_OscConfig+0x504>)
 80019e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ec:	4a0d      	ldr	r2, [pc, #52]	; (8001a24 <HAL_RCC_OscConfig+0x504>)
 80019ee:	f043 0301 	orr.w	r3, r3, #1
 80019f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019f6:	e029      	b.n	8001a4c <HAL_RCC_OscConfig+0x52c>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	2b05      	cmp	r3, #5
 80019fe:	d115      	bne.n	8001a2c <HAL_RCC_OscConfig+0x50c>
 8001a00:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <HAL_RCC_OscConfig+0x504>)
 8001a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a06:	4a07      	ldr	r2, [pc, #28]	; (8001a24 <HAL_RCC_OscConfig+0x504>)
 8001a08:	f043 0304 	orr.w	r3, r3, #4
 8001a0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a10:	4b04      	ldr	r3, [pc, #16]	; (8001a24 <HAL_RCC_OscConfig+0x504>)
 8001a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a16:	4a03      	ldr	r2, [pc, #12]	; (8001a24 <HAL_RCC_OscConfig+0x504>)
 8001a18:	f043 0301 	orr.w	r3, r3, #1
 8001a1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a20:	e014      	b.n	8001a4c <HAL_RCC_OscConfig+0x52c>
 8001a22:	bf00      	nop
 8001a24:	40021000 	.word	0x40021000
 8001a28:	40007000 	.word	0x40007000
 8001a2c:	4b9a      	ldr	r3, [pc, #616]	; (8001c98 <HAL_RCC_OscConfig+0x778>)
 8001a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a32:	4a99      	ldr	r2, [pc, #612]	; (8001c98 <HAL_RCC_OscConfig+0x778>)
 8001a34:	f023 0301 	bic.w	r3, r3, #1
 8001a38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a3c:	4b96      	ldr	r3, [pc, #600]	; (8001c98 <HAL_RCC_OscConfig+0x778>)
 8001a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a42:	4a95      	ldr	r2, [pc, #596]	; (8001c98 <HAL_RCC_OscConfig+0x778>)
 8001a44:	f023 0304 	bic.w	r3, r3, #4
 8001a48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d016      	beq.n	8001a82 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a54:	f7ff faa4 	bl	8000fa0 <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a5a:	e00a      	b.n	8001a72 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a5c:	f7ff faa0 	bl	8000fa0 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e162      	b.n	8001d38 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a72:	4b89      	ldr	r3, [pc, #548]	; (8001c98 <HAL_RCC_OscConfig+0x778>)
 8001a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a78:	f003 0302 	and.w	r3, r3, #2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d0ed      	beq.n	8001a5c <HAL_RCC_OscConfig+0x53c>
 8001a80:	e015      	b.n	8001aae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a82:	f7ff fa8d 	bl	8000fa0 <HAL_GetTick>
 8001a86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a88:	e00a      	b.n	8001aa0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a8a:	f7ff fa89 	bl	8000fa0 <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d901      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e14b      	b.n	8001d38 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001aa0:	4b7d      	ldr	r3, [pc, #500]	; (8001c98 <HAL_RCC_OscConfig+0x778>)
 8001aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d1ed      	bne.n	8001a8a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001aae:	7ffb      	ldrb	r3, [r7, #31]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d105      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ab4:	4b78      	ldr	r3, [pc, #480]	; (8001c98 <HAL_RCC_OscConfig+0x778>)
 8001ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab8:	4a77      	ldr	r2, [pc, #476]	; (8001c98 <HAL_RCC_OscConfig+0x778>)
 8001aba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001abe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0320 	and.w	r3, r3, #32
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d03c      	beq.n	8001b46 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d01c      	beq.n	8001b0e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ad4:	4b70      	ldr	r3, [pc, #448]	; (8001c98 <HAL_RCC_OscConfig+0x778>)
 8001ad6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ada:	4a6f      	ldr	r2, [pc, #444]	; (8001c98 <HAL_RCC_OscConfig+0x778>)
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ae4:	f7ff fa5c 	bl	8000fa0 <HAL_GetTick>
 8001ae8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001aea:	e008      	b.n	8001afe <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001aec:	f7ff fa58 	bl	8000fa0 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e11c      	b.n	8001d38 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001afe:	4b66      	ldr	r3, [pc, #408]	; (8001c98 <HAL_RCC_OscConfig+0x778>)
 8001b00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b04:	f003 0302 	and.w	r3, r3, #2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d0ef      	beq.n	8001aec <HAL_RCC_OscConfig+0x5cc>
 8001b0c:	e01b      	b.n	8001b46 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b0e:	4b62      	ldr	r3, [pc, #392]	; (8001c98 <HAL_RCC_OscConfig+0x778>)
 8001b10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b14:	4a60      	ldr	r2, [pc, #384]	; (8001c98 <HAL_RCC_OscConfig+0x778>)
 8001b16:	f023 0301 	bic.w	r3, r3, #1
 8001b1a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b1e:	f7ff fa3f 	bl	8000fa0 <HAL_GetTick>
 8001b22:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b24:	e008      	b.n	8001b38 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b26:	f7ff fa3b 	bl	8000fa0 <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d901      	bls.n	8001b38 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e0ff      	b.n	8001d38 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b38:	4b57      	ldr	r3, [pc, #348]	; (8001c98 <HAL_RCC_OscConfig+0x778>)
 8001b3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1ef      	bne.n	8001b26 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	f000 80f3 	beq.w	8001d36 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	f040 80c9 	bne.w	8001cec <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b5a:	4b4f      	ldr	r3, [pc, #316]	; (8001c98 <HAL_RCC_OscConfig+0x778>)
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	f003 0203 	and.w	r2, r3, #3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d12c      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b78:	3b01      	subs	r3, #1
 8001b7a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d123      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b8a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d11b      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b9a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d113      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001baa:	085b      	lsrs	r3, r3, #1
 8001bac:	3b01      	subs	r3, #1
 8001bae:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d109      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbe:	085b      	lsrs	r3, r3, #1
 8001bc0:	3b01      	subs	r3, #1
 8001bc2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d06b      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	2b0c      	cmp	r3, #12
 8001bcc:	d062      	beq.n	8001c94 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001bce:	4b32      	ldr	r3, [pc, #200]	; (8001c98 <HAL_RCC_OscConfig+0x778>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e0ac      	b.n	8001d38 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001bde:	4b2e      	ldr	r3, [pc, #184]	; (8001c98 <HAL_RCC_OscConfig+0x778>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a2d      	ldr	r2, [pc, #180]	; (8001c98 <HAL_RCC_OscConfig+0x778>)
 8001be4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001be8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001bea:	f7ff f9d9 	bl	8000fa0 <HAL_GetTick>
 8001bee:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bf0:	e008      	b.n	8001c04 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bf2:	f7ff f9d5 	bl	8000fa0 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e099      	b.n	8001d38 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c04:	4b24      	ldr	r3, [pc, #144]	; (8001c98 <HAL_RCC_OscConfig+0x778>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d1f0      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c10:	4b21      	ldr	r3, [pc, #132]	; (8001c98 <HAL_RCC_OscConfig+0x778>)
 8001c12:	68da      	ldr	r2, [r3, #12]
 8001c14:	4b21      	ldr	r3, [pc, #132]	; (8001c9c <HAL_RCC_OscConfig+0x77c>)
 8001c16:	4013      	ands	r3, r2
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c20:	3a01      	subs	r2, #1
 8001c22:	0112      	lsls	r2, r2, #4
 8001c24:	4311      	orrs	r1, r2
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c2a:	0212      	lsls	r2, r2, #8
 8001c2c:	4311      	orrs	r1, r2
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c32:	0852      	lsrs	r2, r2, #1
 8001c34:	3a01      	subs	r2, #1
 8001c36:	0552      	lsls	r2, r2, #21
 8001c38:	4311      	orrs	r1, r2
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c3e:	0852      	lsrs	r2, r2, #1
 8001c40:	3a01      	subs	r2, #1
 8001c42:	0652      	lsls	r2, r2, #25
 8001c44:	4311      	orrs	r1, r2
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c4a:	06d2      	lsls	r2, r2, #27
 8001c4c:	430a      	orrs	r2, r1
 8001c4e:	4912      	ldr	r1, [pc, #72]	; (8001c98 <HAL_RCC_OscConfig+0x778>)
 8001c50:	4313      	orrs	r3, r2
 8001c52:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c54:	4b10      	ldr	r3, [pc, #64]	; (8001c98 <HAL_RCC_OscConfig+0x778>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a0f      	ldr	r2, [pc, #60]	; (8001c98 <HAL_RCC_OscConfig+0x778>)
 8001c5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c5e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c60:	4b0d      	ldr	r3, [pc, #52]	; (8001c98 <HAL_RCC_OscConfig+0x778>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	4a0c      	ldr	r2, [pc, #48]	; (8001c98 <HAL_RCC_OscConfig+0x778>)
 8001c66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c6a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c6c:	f7ff f998 	bl	8000fa0 <HAL_GetTick>
 8001c70:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c72:	e008      	b.n	8001c86 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c74:	f7ff f994 	bl	8000fa0 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e058      	b.n	8001d38 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c86:	4b04      	ldr	r3, [pc, #16]	; (8001c98 <HAL_RCC_OscConfig+0x778>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d0f0      	beq.n	8001c74 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c92:	e050      	b.n	8001d36 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e04f      	b.n	8001d38 <HAL_RCC_OscConfig+0x818>
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ca0:	4b27      	ldr	r3, [pc, #156]	; (8001d40 <HAL_RCC_OscConfig+0x820>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d144      	bne.n	8001d36 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001cac:	4b24      	ldr	r3, [pc, #144]	; (8001d40 <HAL_RCC_OscConfig+0x820>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a23      	ldr	r2, [pc, #140]	; (8001d40 <HAL_RCC_OscConfig+0x820>)
 8001cb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cb6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cb8:	4b21      	ldr	r3, [pc, #132]	; (8001d40 <HAL_RCC_OscConfig+0x820>)
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	4a20      	ldr	r2, [pc, #128]	; (8001d40 <HAL_RCC_OscConfig+0x820>)
 8001cbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cc2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001cc4:	f7ff f96c 	bl	8000fa0 <HAL_GetTick>
 8001cc8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cca:	e008      	b.n	8001cde <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ccc:	f7ff f968 	bl	8000fa0 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e02c      	b.n	8001d38 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cde:	4b18      	ldr	r3, [pc, #96]	; (8001d40 <HAL_RCC_OscConfig+0x820>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d0f0      	beq.n	8001ccc <HAL_RCC_OscConfig+0x7ac>
 8001cea:	e024      	b.n	8001d36 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	2b0c      	cmp	r3, #12
 8001cf0:	d01f      	beq.n	8001d32 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cf2:	4b13      	ldr	r3, [pc, #76]	; (8001d40 <HAL_RCC_OscConfig+0x820>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a12      	ldr	r2, [pc, #72]	; (8001d40 <HAL_RCC_OscConfig+0x820>)
 8001cf8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cfe:	f7ff f94f 	bl	8000fa0 <HAL_GetTick>
 8001d02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d04:	e008      	b.n	8001d18 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d06:	f7ff f94b 	bl	8000fa0 <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e00f      	b.n	8001d38 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d18:	4b09      	ldr	r3, [pc, #36]	; (8001d40 <HAL_RCC_OscConfig+0x820>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d1f0      	bne.n	8001d06 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001d24:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <HAL_RCC_OscConfig+0x820>)
 8001d26:	68da      	ldr	r2, [r3, #12]
 8001d28:	4905      	ldr	r1, [pc, #20]	; (8001d40 <HAL_RCC_OscConfig+0x820>)
 8001d2a:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <HAL_RCC_OscConfig+0x824>)
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	60cb      	str	r3, [r1, #12]
 8001d30:	e001      	b.n	8001d36 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e000      	b.n	8001d38 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001d36:	2300      	movs	r3, #0
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3720      	adds	r7, #32
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	40021000 	.word	0x40021000
 8001d44:	feeefffc 	.word	0xfeeefffc

08001d48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d101      	bne.n	8001d5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e0e7      	b.n	8001f2c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d5c:	4b75      	ldr	r3, [pc, #468]	; (8001f34 <HAL_RCC_ClockConfig+0x1ec>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0307 	and.w	r3, r3, #7
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d910      	bls.n	8001d8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d6a:	4b72      	ldr	r3, [pc, #456]	; (8001f34 <HAL_RCC_ClockConfig+0x1ec>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f023 0207 	bic.w	r2, r3, #7
 8001d72:	4970      	ldr	r1, [pc, #448]	; (8001f34 <HAL_RCC_ClockConfig+0x1ec>)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d7a:	4b6e      	ldr	r3, [pc, #440]	; (8001f34 <HAL_RCC_ClockConfig+0x1ec>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0307 	and.w	r3, r3, #7
 8001d82:	683a      	ldr	r2, [r7, #0]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d001      	beq.n	8001d8c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e0cf      	b.n	8001f2c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0302 	and.w	r3, r3, #2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d010      	beq.n	8001dba <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	4b66      	ldr	r3, [pc, #408]	; (8001f38 <HAL_RCC_ClockConfig+0x1f0>)
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d908      	bls.n	8001dba <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001da8:	4b63      	ldr	r3, [pc, #396]	; (8001f38 <HAL_RCC_ClockConfig+0x1f0>)
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	4960      	ldr	r1, [pc, #384]	; (8001f38 <HAL_RCC_ClockConfig+0x1f0>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d04c      	beq.n	8001e60 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	2b03      	cmp	r3, #3
 8001dcc:	d107      	bne.n	8001dde <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dce:	4b5a      	ldr	r3, [pc, #360]	; (8001f38 <HAL_RCC_ClockConfig+0x1f0>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d121      	bne.n	8001e1e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e0a6      	b.n	8001f2c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d107      	bne.n	8001df6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001de6:	4b54      	ldr	r3, [pc, #336]	; (8001f38 <HAL_RCC_ClockConfig+0x1f0>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d115      	bne.n	8001e1e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e09a      	b.n	8001f2c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d107      	bne.n	8001e0e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dfe:	4b4e      	ldr	r3, [pc, #312]	; (8001f38 <HAL_RCC_ClockConfig+0x1f0>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d109      	bne.n	8001e1e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e08e      	b.n	8001f2c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e0e:	4b4a      	ldr	r3, [pc, #296]	; (8001f38 <HAL_RCC_ClockConfig+0x1f0>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e086      	b.n	8001f2c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e1e:	4b46      	ldr	r3, [pc, #280]	; (8001f38 <HAL_RCC_ClockConfig+0x1f0>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f023 0203 	bic.w	r2, r3, #3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	4943      	ldr	r1, [pc, #268]	; (8001f38 <HAL_RCC_ClockConfig+0x1f0>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e30:	f7ff f8b6 	bl	8000fa0 <HAL_GetTick>
 8001e34:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e36:	e00a      	b.n	8001e4e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e38:	f7ff f8b2 	bl	8000fa0 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e06e      	b.n	8001f2c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e4e:	4b3a      	ldr	r3, [pc, #232]	; (8001f38 <HAL_RCC_ClockConfig+0x1f0>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f003 020c 	and.w	r2, r3, #12
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d1eb      	bne.n	8001e38 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d010      	beq.n	8001e8e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689a      	ldr	r2, [r3, #8]
 8001e70:	4b31      	ldr	r3, [pc, #196]	; (8001f38 <HAL_RCC_ClockConfig+0x1f0>)
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d208      	bcs.n	8001e8e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e7c:	4b2e      	ldr	r3, [pc, #184]	; (8001f38 <HAL_RCC_ClockConfig+0x1f0>)
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	492b      	ldr	r1, [pc, #172]	; (8001f38 <HAL_RCC_ClockConfig+0x1f0>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e8e:	4b29      	ldr	r3, [pc, #164]	; (8001f34 <HAL_RCC_ClockConfig+0x1ec>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d210      	bcs.n	8001ebe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e9c:	4b25      	ldr	r3, [pc, #148]	; (8001f34 <HAL_RCC_ClockConfig+0x1ec>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f023 0207 	bic.w	r2, r3, #7
 8001ea4:	4923      	ldr	r1, [pc, #140]	; (8001f34 <HAL_RCC_ClockConfig+0x1ec>)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eac:	4b21      	ldr	r3, [pc, #132]	; (8001f34 <HAL_RCC_ClockConfig+0x1ec>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0307 	and.w	r3, r3, #7
 8001eb4:	683a      	ldr	r2, [r7, #0]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d001      	beq.n	8001ebe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e036      	b.n	8001f2c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0304 	and.w	r3, r3, #4
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d008      	beq.n	8001edc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eca:	4b1b      	ldr	r3, [pc, #108]	; (8001f38 <HAL_RCC_ClockConfig+0x1f0>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	4918      	ldr	r1, [pc, #96]	; (8001f38 <HAL_RCC_ClockConfig+0x1f0>)
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0308 	and.w	r3, r3, #8
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d009      	beq.n	8001efc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ee8:	4b13      	ldr	r3, [pc, #76]	; (8001f38 <HAL_RCC_ClockConfig+0x1f0>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	00db      	lsls	r3, r3, #3
 8001ef6:	4910      	ldr	r1, [pc, #64]	; (8001f38 <HAL_RCC_ClockConfig+0x1f0>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001efc:	f000 f824 	bl	8001f48 <HAL_RCC_GetSysClockFreq>
 8001f00:	4602      	mov	r2, r0
 8001f02:	4b0d      	ldr	r3, [pc, #52]	; (8001f38 <HAL_RCC_ClockConfig+0x1f0>)
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	091b      	lsrs	r3, r3, #4
 8001f08:	f003 030f 	and.w	r3, r3, #15
 8001f0c:	490b      	ldr	r1, [pc, #44]	; (8001f3c <HAL_RCC_ClockConfig+0x1f4>)
 8001f0e:	5ccb      	ldrb	r3, [r1, r3]
 8001f10:	f003 031f 	and.w	r3, r3, #31
 8001f14:	fa22 f303 	lsr.w	r3, r2, r3
 8001f18:	4a09      	ldr	r2, [pc, #36]	; (8001f40 <HAL_RCC_ClockConfig+0x1f8>)
 8001f1a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f1c:	4b09      	ldr	r3, [pc, #36]	; (8001f44 <HAL_RCC_ClockConfig+0x1fc>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7fe ffed 	bl	8000f00 <HAL_InitTick>
 8001f26:	4603      	mov	r3, r0
 8001f28:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f2a:	7afb      	ldrb	r3, [r7, #11]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3710      	adds	r7, #16
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40022000 	.word	0x40022000
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	08003178 	.word	0x08003178
 8001f40:	20000008 	.word	0x20000008
 8001f44:	2000000c 	.word	0x2000000c

08001f48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b089      	sub	sp, #36	; 0x24
 8001f4c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	61fb      	str	r3, [r7, #28]
 8001f52:	2300      	movs	r3, #0
 8001f54:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f56:	4b3e      	ldr	r3, [pc, #248]	; (8002050 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f003 030c 	and.w	r3, r3, #12
 8001f5e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f60:	4b3b      	ldr	r3, [pc, #236]	; (8002050 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	f003 0303 	and.w	r3, r3, #3
 8001f68:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d005      	beq.n	8001f7c <HAL_RCC_GetSysClockFreq+0x34>
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	2b0c      	cmp	r3, #12
 8001f74:	d121      	bne.n	8001fba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d11e      	bne.n	8001fba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f7c:	4b34      	ldr	r3, [pc, #208]	; (8002050 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0308 	and.w	r3, r3, #8
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d107      	bne.n	8001f98 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f88:	4b31      	ldr	r3, [pc, #196]	; (8002050 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f8e:	0a1b      	lsrs	r3, r3, #8
 8001f90:	f003 030f 	and.w	r3, r3, #15
 8001f94:	61fb      	str	r3, [r7, #28]
 8001f96:	e005      	b.n	8001fa4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f98:	4b2d      	ldr	r3, [pc, #180]	; (8002050 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	091b      	lsrs	r3, r3, #4
 8001f9e:	f003 030f 	and.w	r3, r3, #15
 8001fa2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001fa4:	4a2b      	ldr	r2, [pc, #172]	; (8002054 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d10d      	bne.n	8001fd0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fb8:	e00a      	b.n	8001fd0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	2b04      	cmp	r3, #4
 8001fbe:	d102      	bne.n	8001fc6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001fc0:	4b25      	ldr	r3, [pc, #148]	; (8002058 <HAL_RCC_GetSysClockFreq+0x110>)
 8001fc2:	61bb      	str	r3, [r7, #24]
 8001fc4:	e004      	b.n	8001fd0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	2b08      	cmp	r3, #8
 8001fca:	d101      	bne.n	8001fd0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001fcc:	4b23      	ldr	r3, [pc, #140]	; (800205c <HAL_RCC_GetSysClockFreq+0x114>)
 8001fce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	2b0c      	cmp	r3, #12
 8001fd4:	d134      	bne.n	8002040 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fd6:	4b1e      	ldr	r3, [pc, #120]	; (8002050 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	f003 0303 	and.w	r3, r3, #3
 8001fde:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d003      	beq.n	8001fee <HAL_RCC_GetSysClockFreq+0xa6>
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	2b03      	cmp	r3, #3
 8001fea:	d003      	beq.n	8001ff4 <HAL_RCC_GetSysClockFreq+0xac>
 8001fec:	e005      	b.n	8001ffa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001fee:	4b1a      	ldr	r3, [pc, #104]	; (8002058 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ff0:	617b      	str	r3, [r7, #20]
      break;
 8001ff2:	e005      	b.n	8002000 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001ff4:	4b19      	ldr	r3, [pc, #100]	; (800205c <HAL_RCC_GetSysClockFreq+0x114>)
 8001ff6:	617b      	str	r3, [r7, #20]
      break;
 8001ff8:	e002      	b.n	8002000 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	617b      	str	r3, [r7, #20]
      break;
 8001ffe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002000:	4b13      	ldr	r3, [pc, #76]	; (8002050 <HAL_RCC_GetSysClockFreq+0x108>)
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	091b      	lsrs	r3, r3, #4
 8002006:	f003 0307 	and.w	r3, r3, #7
 800200a:	3301      	adds	r3, #1
 800200c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800200e:	4b10      	ldr	r3, [pc, #64]	; (8002050 <HAL_RCC_GetSysClockFreq+0x108>)
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	0a1b      	lsrs	r3, r3, #8
 8002014:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002018:	697a      	ldr	r2, [r7, #20]
 800201a:	fb03 f202 	mul.w	r2, r3, r2
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	fbb2 f3f3 	udiv	r3, r2, r3
 8002024:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002026:	4b0a      	ldr	r3, [pc, #40]	; (8002050 <HAL_RCC_GetSysClockFreq+0x108>)
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	0e5b      	lsrs	r3, r3, #25
 800202c:	f003 0303 	and.w	r3, r3, #3
 8002030:	3301      	adds	r3, #1
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002036:	697a      	ldr	r2, [r7, #20]
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	fbb2 f3f3 	udiv	r3, r2, r3
 800203e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002040:	69bb      	ldr	r3, [r7, #24]
}
 8002042:	4618      	mov	r0, r3
 8002044:	3724      	adds	r7, #36	; 0x24
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	40021000 	.word	0x40021000
 8002054:	08003188 	.word	0x08003188
 8002058:	00f42400 	.word	0x00f42400
 800205c:	007a1200 	.word	0x007a1200

08002060 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002068:	2300      	movs	r3, #0
 800206a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800206c:	4b2a      	ldr	r3, [pc, #168]	; (8002118 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800206e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002070:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d003      	beq.n	8002080 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002078:	f7ff f9ee 	bl	8001458 <HAL_PWREx_GetVoltageRange>
 800207c:	6178      	str	r0, [r7, #20]
 800207e:	e014      	b.n	80020aa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002080:	4b25      	ldr	r3, [pc, #148]	; (8002118 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002084:	4a24      	ldr	r2, [pc, #144]	; (8002118 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002086:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800208a:	6593      	str	r3, [r2, #88]	; 0x58
 800208c:	4b22      	ldr	r3, [pc, #136]	; (8002118 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800208e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002090:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002094:	60fb      	str	r3, [r7, #12]
 8002096:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002098:	f7ff f9de 	bl	8001458 <HAL_PWREx_GetVoltageRange>
 800209c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800209e:	4b1e      	ldr	r3, [pc, #120]	; (8002118 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a2:	4a1d      	ldr	r2, [pc, #116]	; (8002118 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020a8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020b0:	d10b      	bne.n	80020ca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2b80      	cmp	r3, #128	; 0x80
 80020b6:	d919      	bls.n	80020ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2ba0      	cmp	r3, #160	; 0xa0
 80020bc:	d902      	bls.n	80020c4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020be:	2302      	movs	r3, #2
 80020c0:	613b      	str	r3, [r7, #16]
 80020c2:	e013      	b.n	80020ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020c4:	2301      	movs	r3, #1
 80020c6:	613b      	str	r3, [r7, #16]
 80020c8:	e010      	b.n	80020ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2b80      	cmp	r3, #128	; 0x80
 80020ce:	d902      	bls.n	80020d6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80020d0:	2303      	movs	r3, #3
 80020d2:	613b      	str	r3, [r7, #16]
 80020d4:	e00a      	b.n	80020ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2b80      	cmp	r3, #128	; 0x80
 80020da:	d102      	bne.n	80020e2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020dc:	2302      	movs	r3, #2
 80020de:	613b      	str	r3, [r7, #16]
 80020e0:	e004      	b.n	80020ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2b70      	cmp	r3, #112	; 0x70
 80020e6:	d101      	bne.n	80020ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020e8:	2301      	movs	r3, #1
 80020ea:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80020ec:	4b0b      	ldr	r3, [pc, #44]	; (800211c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f023 0207 	bic.w	r2, r3, #7
 80020f4:	4909      	ldr	r1, [pc, #36]	; (800211c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80020fc:	4b07      	ldr	r3, [pc, #28]	; (800211c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0307 	and.w	r3, r3, #7
 8002104:	693a      	ldr	r2, [r7, #16]
 8002106:	429a      	cmp	r2, r3
 8002108:	d001      	beq.n	800210e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e000      	b.n	8002110 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800210e:	2300      	movs	r3, #0
}
 8002110:	4618      	mov	r0, r3
 8002112:	3718      	adds	r7, #24
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	40021000 	.word	0x40021000
 800211c:	40022000 	.word	0x40022000

08002120 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d101      	bne.n	8002132 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e049      	b.n	80021c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b00      	cmp	r3, #0
 800213c:	d106      	bne.n	800214c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f7fe fe0c 	bl	8000d64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2202      	movs	r2, #2
 8002150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	3304      	adds	r3, #4
 800215c:	4619      	mov	r1, r3
 800215e:	4610      	mov	r0, r2
 8002160:	f000 fb52 	bl	8002808 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2201      	movs	r2, #1
 80021b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b082      	sub	sp, #8
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d101      	bne.n	80021e0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e049      	b.n	8002274 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d106      	bne.n	80021fa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f000 f841 	bl	800227c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2202      	movs	r2, #2
 80021fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	3304      	adds	r3, #4
 800220a:	4619      	mov	r1, r3
 800220c:	4610      	mov	r0, r2
 800220e:	f000 fafb 	bl	8002808 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2201      	movs	r2, #1
 8002216:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2201      	movs	r2, #1
 800221e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2201      	movs	r2, #1
 8002226:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2201      	movs	r2, #1
 800222e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2201      	movs	r2, #1
 8002236:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2201      	movs	r2, #1
 800223e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2201      	movs	r2, #1
 8002246:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2201      	movs	r2, #1
 800224e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2201      	movs	r2, #1
 8002256:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2201      	movs	r2, #1
 800225e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2201      	movs	r2, #1
 8002266:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2201      	movs	r2, #1
 800226e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	3708      	adds	r7, #8
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d109      	bne.n	80022b4 <HAL_TIM_PWM_Start+0x24>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	bf14      	ite	ne
 80022ac:	2301      	movne	r3, #1
 80022ae:	2300      	moveq	r3, #0
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	e03c      	b.n	800232e <HAL_TIM_PWM_Start+0x9e>
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	2b04      	cmp	r3, #4
 80022b8:	d109      	bne.n	80022ce <HAL_TIM_PWM_Start+0x3e>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	bf14      	ite	ne
 80022c6:	2301      	movne	r3, #1
 80022c8:	2300      	moveq	r3, #0
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	e02f      	b.n	800232e <HAL_TIM_PWM_Start+0x9e>
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	2b08      	cmp	r3, #8
 80022d2:	d109      	bne.n	80022e8 <HAL_TIM_PWM_Start+0x58>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	2b01      	cmp	r3, #1
 80022de:	bf14      	ite	ne
 80022e0:	2301      	movne	r3, #1
 80022e2:	2300      	moveq	r3, #0
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	e022      	b.n	800232e <HAL_TIM_PWM_Start+0x9e>
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	2b0c      	cmp	r3, #12
 80022ec:	d109      	bne.n	8002302 <HAL_TIM_PWM_Start+0x72>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	bf14      	ite	ne
 80022fa:	2301      	movne	r3, #1
 80022fc:	2300      	moveq	r3, #0
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	e015      	b.n	800232e <HAL_TIM_PWM_Start+0x9e>
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	2b10      	cmp	r3, #16
 8002306:	d109      	bne.n	800231c <HAL_TIM_PWM_Start+0x8c>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800230e:	b2db      	uxtb	r3, r3
 8002310:	2b01      	cmp	r3, #1
 8002312:	bf14      	ite	ne
 8002314:	2301      	movne	r3, #1
 8002316:	2300      	moveq	r3, #0
 8002318:	b2db      	uxtb	r3, r3
 800231a:	e008      	b.n	800232e <HAL_TIM_PWM_Start+0x9e>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002322:	b2db      	uxtb	r3, r3
 8002324:	2b01      	cmp	r3, #1
 8002326:	bf14      	ite	ne
 8002328:	2301      	movne	r3, #1
 800232a:	2300      	moveq	r3, #0
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e07e      	b.n	8002434 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d104      	bne.n	8002346 <HAL_TIM_PWM_Start+0xb6>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2202      	movs	r2, #2
 8002340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002344:	e023      	b.n	800238e <HAL_TIM_PWM_Start+0xfe>
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	2b04      	cmp	r3, #4
 800234a:	d104      	bne.n	8002356 <HAL_TIM_PWM_Start+0xc6>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2202      	movs	r2, #2
 8002350:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002354:	e01b      	b.n	800238e <HAL_TIM_PWM_Start+0xfe>
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	2b08      	cmp	r3, #8
 800235a:	d104      	bne.n	8002366 <HAL_TIM_PWM_Start+0xd6>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2202      	movs	r2, #2
 8002360:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002364:	e013      	b.n	800238e <HAL_TIM_PWM_Start+0xfe>
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	2b0c      	cmp	r3, #12
 800236a:	d104      	bne.n	8002376 <HAL_TIM_PWM_Start+0xe6>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2202      	movs	r2, #2
 8002370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002374:	e00b      	b.n	800238e <HAL_TIM_PWM_Start+0xfe>
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	2b10      	cmp	r3, #16
 800237a:	d104      	bne.n	8002386 <HAL_TIM_PWM_Start+0xf6>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2202      	movs	r2, #2
 8002380:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002384:	e003      	b.n	800238e <HAL_TIM_PWM_Start+0xfe>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2202      	movs	r2, #2
 800238a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2201      	movs	r2, #1
 8002394:	6839      	ldr	r1, [r7, #0]
 8002396:	4618      	mov	r0, r3
 8002398:	f000 fdb2 	bl	8002f00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a26      	ldr	r2, [pc, #152]	; (800243c <HAL_TIM_PWM_Start+0x1ac>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d009      	beq.n	80023ba <HAL_TIM_PWM_Start+0x12a>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a25      	ldr	r2, [pc, #148]	; (8002440 <HAL_TIM_PWM_Start+0x1b0>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d004      	beq.n	80023ba <HAL_TIM_PWM_Start+0x12a>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a23      	ldr	r2, [pc, #140]	; (8002444 <HAL_TIM_PWM_Start+0x1b4>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d101      	bne.n	80023be <HAL_TIM_PWM_Start+0x12e>
 80023ba:	2301      	movs	r3, #1
 80023bc:	e000      	b.n	80023c0 <HAL_TIM_PWM_Start+0x130>
 80023be:	2300      	movs	r3, #0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d007      	beq.n	80023d4 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023d2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a18      	ldr	r2, [pc, #96]	; (800243c <HAL_TIM_PWM_Start+0x1ac>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d009      	beq.n	80023f2 <HAL_TIM_PWM_Start+0x162>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023e6:	d004      	beq.n	80023f2 <HAL_TIM_PWM_Start+0x162>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a14      	ldr	r2, [pc, #80]	; (8002440 <HAL_TIM_PWM_Start+0x1b0>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d115      	bne.n	800241e <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	689a      	ldr	r2, [r3, #8]
 80023f8:	4b13      	ldr	r3, [pc, #76]	; (8002448 <HAL_TIM_PWM_Start+0x1b8>)
 80023fa:	4013      	ands	r3, r2
 80023fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2b06      	cmp	r3, #6
 8002402:	d015      	beq.n	8002430 <HAL_TIM_PWM_Start+0x1a0>
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800240a:	d011      	beq.n	8002430 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f042 0201 	orr.w	r2, r2, #1
 800241a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800241c:	e008      	b.n	8002430 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f042 0201 	orr.w	r2, r2, #1
 800242c:	601a      	str	r2, [r3, #0]
 800242e:	e000      	b.n	8002432 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002430:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	3710      	adds	r7, #16
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40012c00 	.word	0x40012c00
 8002440:	40014000 	.word	0x40014000
 8002444:	40014400 	.word	0x40014400
 8002448:	00010007 	.word	0x00010007

0800244c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002458:	2300      	movs	r3, #0
 800245a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002462:	2b01      	cmp	r3, #1
 8002464:	d101      	bne.n	800246a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002466:	2302      	movs	r3, #2
 8002468:	e0ff      	b.n	800266a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2201      	movs	r2, #1
 800246e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2b14      	cmp	r3, #20
 8002476:	f200 80f0 	bhi.w	800265a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800247a:	a201      	add	r2, pc, #4	; (adr r2, 8002480 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800247c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002480:	080024d5 	.word	0x080024d5
 8002484:	0800265b 	.word	0x0800265b
 8002488:	0800265b 	.word	0x0800265b
 800248c:	0800265b 	.word	0x0800265b
 8002490:	08002515 	.word	0x08002515
 8002494:	0800265b 	.word	0x0800265b
 8002498:	0800265b 	.word	0x0800265b
 800249c:	0800265b 	.word	0x0800265b
 80024a0:	08002557 	.word	0x08002557
 80024a4:	0800265b 	.word	0x0800265b
 80024a8:	0800265b 	.word	0x0800265b
 80024ac:	0800265b 	.word	0x0800265b
 80024b0:	08002597 	.word	0x08002597
 80024b4:	0800265b 	.word	0x0800265b
 80024b8:	0800265b 	.word	0x0800265b
 80024bc:	0800265b 	.word	0x0800265b
 80024c0:	080025d9 	.word	0x080025d9
 80024c4:	0800265b 	.word	0x0800265b
 80024c8:	0800265b 	.word	0x0800265b
 80024cc:	0800265b 	.word	0x0800265b
 80024d0:	08002619 	.word	0x08002619
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68b9      	ldr	r1, [r7, #8]
 80024da:	4618      	mov	r0, r3
 80024dc:	f000 f9f8 	bl	80028d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	699a      	ldr	r2, [r3, #24]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f042 0208 	orr.w	r2, r2, #8
 80024ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	699a      	ldr	r2, [r3, #24]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f022 0204 	bic.w	r2, r2, #4
 80024fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	6999      	ldr	r1, [r3, #24]
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	691a      	ldr	r2, [r3, #16]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	430a      	orrs	r2, r1
 8002510:	619a      	str	r2, [r3, #24]
      break;
 8002512:	e0a5      	b.n	8002660 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68b9      	ldr	r1, [r7, #8]
 800251a:	4618      	mov	r0, r3
 800251c:	f000 fa54 	bl	80029c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	699a      	ldr	r2, [r3, #24]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800252e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	699a      	ldr	r2, [r3, #24]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800253e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	6999      	ldr	r1, [r3, #24]
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	021a      	lsls	r2, r3, #8
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	430a      	orrs	r2, r1
 8002552:	619a      	str	r2, [r3, #24]
      break;
 8002554:	e084      	b.n	8002660 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	68b9      	ldr	r1, [r7, #8]
 800255c:	4618      	mov	r0, r3
 800255e:	f000 faad 	bl	8002abc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	69da      	ldr	r2, [r3, #28]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f042 0208 	orr.w	r2, r2, #8
 8002570:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	69da      	ldr	r2, [r3, #28]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f022 0204 	bic.w	r2, r2, #4
 8002580:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	69d9      	ldr	r1, [r3, #28]
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	691a      	ldr	r2, [r3, #16]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	430a      	orrs	r2, r1
 8002592:	61da      	str	r2, [r3, #28]
      break;
 8002594:	e064      	b.n	8002660 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68b9      	ldr	r1, [r7, #8]
 800259c:	4618      	mov	r0, r3
 800259e:	f000 fb05 	bl	8002bac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	69da      	ldr	r2, [r3, #28]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	69da      	ldr	r2, [r3, #28]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	69d9      	ldr	r1, [r3, #28]
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	021a      	lsls	r2, r3, #8
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	430a      	orrs	r2, r1
 80025d4:	61da      	str	r2, [r3, #28]
      break;
 80025d6:	e043      	b.n	8002660 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	68b9      	ldr	r1, [r7, #8]
 80025de:	4618      	mov	r0, r3
 80025e0:	f000 fb42 	bl	8002c68 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f042 0208 	orr.w	r2, r2, #8
 80025f2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f022 0204 	bic.w	r2, r2, #4
 8002602:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	691a      	ldr	r2, [r3, #16]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	430a      	orrs	r2, r1
 8002614:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002616:	e023      	b.n	8002660 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	68b9      	ldr	r1, [r7, #8]
 800261e:	4618      	mov	r0, r3
 8002620:	f000 fb7a 	bl	8002d18 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002632:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002642:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	021a      	lsls	r2, r3, #8
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	430a      	orrs	r2, r1
 8002656:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002658:	e002      	b.n	8002660 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	75fb      	strb	r3, [r7, #23]
      break;
 800265e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002668:	7dfb      	ldrb	r3, [r7, #23]
}
 800266a:	4618      	mov	r0, r3
 800266c:	3718      	adds	r7, #24
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop

08002674 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800267e:	2300      	movs	r3, #0
 8002680:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002688:	2b01      	cmp	r3, #1
 800268a:	d101      	bne.n	8002690 <HAL_TIM_ConfigClockSource+0x1c>
 800268c:	2302      	movs	r3, #2
 800268e:	e0b6      	b.n	80027fe <HAL_TIM_ConfigClockSource+0x18a>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2202      	movs	r2, #2
 800269c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80026b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68ba      	ldr	r2, [r7, #8]
 80026c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026cc:	d03e      	beq.n	800274c <HAL_TIM_ConfigClockSource+0xd8>
 80026ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026d2:	f200 8087 	bhi.w	80027e4 <HAL_TIM_ConfigClockSource+0x170>
 80026d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026da:	f000 8086 	beq.w	80027ea <HAL_TIM_ConfigClockSource+0x176>
 80026de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026e2:	d87f      	bhi.n	80027e4 <HAL_TIM_ConfigClockSource+0x170>
 80026e4:	2b70      	cmp	r3, #112	; 0x70
 80026e6:	d01a      	beq.n	800271e <HAL_TIM_ConfigClockSource+0xaa>
 80026e8:	2b70      	cmp	r3, #112	; 0x70
 80026ea:	d87b      	bhi.n	80027e4 <HAL_TIM_ConfigClockSource+0x170>
 80026ec:	2b60      	cmp	r3, #96	; 0x60
 80026ee:	d050      	beq.n	8002792 <HAL_TIM_ConfigClockSource+0x11e>
 80026f0:	2b60      	cmp	r3, #96	; 0x60
 80026f2:	d877      	bhi.n	80027e4 <HAL_TIM_ConfigClockSource+0x170>
 80026f4:	2b50      	cmp	r3, #80	; 0x50
 80026f6:	d03c      	beq.n	8002772 <HAL_TIM_ConfigClockSource+0xfe>
 80026f8:	2b50      	cmp	r3, #80	; 0x50
 80026fa:	d873      	bhi.n	80027e4 <HAL_TIM_ConfigClockSource+0x170>
 80026fc:	2b40      	cmp	r3, #64	; 0x40
 80026fe:	d058      	beq.n	80027b2 <HAL_TIM_ConfigClockSource+0x13e>
 8002700:	2b40      	cmp	r3, #64	; 0x40
 8002702:	d86f      	bhi.n	80027e4 <HAL_TIM_ConfigClockSource+0x170>
 8002704:	2b30      	cmp	r3, #48	; 0x30
 8002706:	d064      	beq.n	80027d2 <HAL_TIM_ConfigClockSource+0x15e>
 8002708:	2b30      	cmp	r3, #48	; 0x30
 800270a:	d86b      	bhi.n	80027e4 <HAL_TIM_ConfigClockSource+0x170>
 800270c:	2b20      	cmp	r3, #32
 800270e:	d060      	beq.n	80027d2 <HAL_TIM_ConfigClockSource+0x15e>
 8002710:	2b20      	cmp	r3, #32
 8002712:	d867      	bhi.n	80027e4 <HAL_TIM_ConfigClockSource+0x170>
 8002714:	2b00      	cmp	r3, #0
 8002716:	d05c      	beq.n	80027d2 <HAL_TIM_ConfigClockSource+0x15e>
 8002718:	2b10      	cmp	r3, #16
 800271a:	d05a      	beq.n	80027d2 <HAL_TIM_ConfigClockSource+0x15e>
 800271c:	e062      	b.n	80027e4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6818      	ldr	r0, [r3, #0]
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	6899      	ldr	r1, [r3, #8]
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685a      	ldr	r2, [r3, #4]
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	f000 fbc7 	bl	8002ec0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002740:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68ba      	ldr	r2, [r7, #8]
 8002748:	609a      	str	r2, [r3, #8]
      break;
 800274a:	e04f      	b.n	80027ec <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6818      	ldr	r0, [r3, #0]
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	6899      	ldr	r1, [r3, #8]
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685a      	ldr	r2, [r3, #4]
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	f000 fbb0 	bl	8002ec0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	689a      	ldr	r2, [r3, #8]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800276e:	609a      	str	r2, [r3, #8]
      break;
 8002770:	e03c      	b.n	80027ec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6818      	ldr	r0, [r3, #0]
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	6859      	ldr	r1, [r3, #4]
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	461a      	mov	r2, r3
 8002780:	f000 fb24 	bl	8002dcc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2150      	movs	r1, #80	; 0x50
 800278a:	4618      	mov	r0, r3
 800278c:	f000 fb7d 	bl	8002e8a <TIM_ITRx_SetConfig>
      break;
 8002790:	e02c      	b.n	80027ec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6818      	ldr	r0, [r3, #0]
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	6859      	ldr	r1, [r3, #4]
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	461a      	mov	r2, r3
 80027a0:	f000 fb43 	bl	8002e2a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2160      	movs	r1, #96	; 0x60
 80027aa:	4618      	mov	r0, r3
 80027ac:	f000 fb6d 	bl	8002e8a <TIM_ITRx_SetConfig>
      break;
 80027b0:	e01c      	b.n	80027ec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6818      	ldr	r0, [r3, #0]
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	6859      	ldr	r1, [r3, #4]
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	461a      	mov	r2, r3
 80027c0:	f000 fb04 	bl	8002dcc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2140      	movs	r1, #64	; 0x40
 80027ca:	4618      	mov	r0, r3
 80027cc:	f000 fb5d 	bl	8002e8a <TIM_ITRx_SetConfig>
      break;
 80027d0:	e00c      	b.n	80027ec <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4619      	mov	r1, r3
 80027dc:	4610      	mov	r0, r2
 80027de:	f000 fb54 	bl	8002e8a <TIM_ITRx_SetConfig>
      break;
 80027e2:	e003      	b.n	80027ec <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	73fb      	strb	r3, [r7, #15]
      break;
 80027e8:	e000      	b.n	80027ec <HAL_TIM_ConfigClockSource+0x178>
      break;
 80027ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80027fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
	...

08002808 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a2a      	ldr	r2, [pc, #168]	; (80028c4 <TIM_Base_SetConfig+0xbc>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d003      	beq.n	8002828 <TIM_Base_SetConfig+0x20>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002826:	d108      	bne.n	800283a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800282e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	4313      	orrs	r3, r2
 8002838:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a21      	ldr	r2, [pc, #132]	; (80028c4 <TIM_Base_SetConfig+0xbc>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d00b      	beq.n	800285a <TIM_Base_SetConfig+0x52>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002848:	d007      	beq.n	800285a <TIM_Base_SetConfig+0x52>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a1e      	ldr	r2, [pc, #120]	; (80028c8 <TIM_Base_SetConfig+0xc0>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d003      	beq.n	800285a <TIM_Base_SetConfig+0x52>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a1d      	ldr	r2, [pc, #116]	; (80028cc <TIM_Base_SetConfig+0xc4>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d108      	bne.n	800286c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002860:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	4313      	orrs	r3, r2
 800286a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	4313      	orrs	r3, r2
 8002878:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a0c      	ldr	r2, [pc, #48]	; (80028c4 <TIM_Base_SetConfig+0xbc>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d007      	beq.n	80028a8 <TIM_Base_SetConfig+0xa0>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4a0b      	ldr	r2, [pc, #44]	; (80028c8 <TIM_Base_SetConfig+0xc0>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d003      	beq.n	80028a8 <TIM_Base_SetConfig+0xa0>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4a0a      	ldr	r2, [pc, #40]	; (80028cc <TIM_Base_SetConfig+0xc4>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d103      	bne.n	80028b0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	691a      	ldr	r2, [r3, #16]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	615a      	str	r2, [r3, #20]
}
 80028b6:	bf00      	nop
 80028b8:	3714      	adds	r7, #20
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	40012c00 	.word	0x40012c00
 80028c8:	40014000 	.word	0x40014000
 80028cc:	40014400 	.word	0x40014400

080028d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b087      	sub	sp, #28
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a1b      	ldr	r3, [r3, #32]
 80028de:	f023 0201 	bic.w	r2, r3, #1
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a1b      	ldr	r3, [r3, #32]
 80028ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002902:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f023 0303 	bic.w	r3, r3, #3
 800290a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	4313      	orrs	r3, r2
 8002914:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	f023 0302 	bic.w	r3, r3, #2
 800291c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	4313      	orrs	r3, r2
 8002926:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4a24      	ldr	r2, [pc, #144]	; (80029bc <TIM_OC1_SetConfig+0xec>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d007      	beq.n	8002940 <TIM_OC1_SetConfig+0x70>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4a23      	ldr	r2, [pc, #140]	; (80029c0 <TIM_OC1_SetConfig+0xf0>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d003      	beq.n	8002940 <TIM_OC1_SetConfig+0x70>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a22      	ldr	r2, [pc, #136]	; (80029c4 <TIM_OC1_SetConfig+0xf4>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d10c      	bne.n	800295a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	f023 0308 	bic.w	r3, r3, #8
 8002946:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	697a      	ldr	r2, [r7, #20]
 800294e:	4313      	orrs	r3, r2
 8002950:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	f023 0304 	bic.w	r3, r3, #4
 8002958:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a17      	ldr	r2, [pc, #92]	; (80029bc <TIM_OC1_SetConfig+0xec>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d007      	beq.n	8002972 <TIM_OC1_SetConfig+0xa2>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a16      	ldr	r2, [pc, #88]	; (80029c0 <TIM_OC1_SetConfig+0xf0>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d003      	beq.n	8002972 <TIM_OC1_SetConfig+0xa2>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a15      	ldr	r2, [pc, #84]	; (80029c4 <TIM_OC1_SetConfig+0xf4>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d111      	bne.n	8002996 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002978:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002980:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	4313      	orrs	r3, r2
 800298a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	4313      	orrs	r3, r2
 8002994:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685a      	ldr	r2, [r3, #4]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	697a      	ldr	r2, [r7, #20]
 80029ae:	621a      	str	r2, [r3, #32]
}
 80029b0:	bf00      	nop
 80029b2:	371c      	adds	r7, #28
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr
 80029bc:	40012c00 	.word	0x40012c00
 80029c0:	40014000 	.word	0x40014000
 80029c4:	40014400 	.word	0x40014400

080029c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b087      	sub	sp, #28
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	f023 0210 	bic.w	r2, r3, #16
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a1b      	ldr	r3, [r3, #32]
 80029e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	021b      	lsls	r3, r3, #8
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	f023 0320 	bic.w	r3, r3, #32
 8002a16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	011b      	lsls	r3, r3, #4
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a22      	ldr	r2, [pc, #136]	; (8002ab0 <TIM_OC2_SetConfig+0xe8>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d10d      	bne.n	8002a48 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	011b      	lsls	r3, r3, #4
 8002a3a:	697a      	ldr	r2, [r7, #20]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a46:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4a19      	ldr	r2, [pc, #100]	; (8002ab0 <TIM_OC2_SetConfig+0xe8>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d007      	beq.n	8002a60 <TIM_OC2_SetConfig+0x98>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a18      	ldr	r2, [pc, #96]	; (8002ab4 <TIM_OC2_SetConfig+0xec>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d003      	beq.n	8002a60 <TIM_OC2_SetConfig+0x98>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4a17      	ldr	r2, [pc, #92]	; (8002ab8 <TIM_OC2_SetConfig+0xf0>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d113      	bne.n	8002a88 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	695b      	ldr	r3, [r3, #20]
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	693a      	ldr	r2, [r7, #16]
 8002a8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685a      	ldr	r2, [r3, #4]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	697a      	ldr	r2, [r7, #20]
 8002aa0:	621a      	str	r2, [r3, #32]
}
 8002aa2:	bf00      	nop
 8002aa4:	371c      	adds	r7, #28
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	40012c00 	.word	0x40012c00
 8002ab4:	40014000 	.word	0x40014000
 8002ab8:	40014400 	.word	0x40014400

08002abc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b087      	sub	sp, #28
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a1b      	ldr	r3, [r3, #32]
 8002aca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a1b      	ldr	r3, [r3, #32]
 8002ad6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	69db      	ldr	r3, [r3, #28]
 8002ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f023 0303 	bic.w	r3, r3, #3
 8002af6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	021b      	lsls	r3, r3, #8
 8002b10:	697a      	ldr	r2, [r7, #20]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a21      	ldr	r2, [pc, #132]	; (8002ba0 <TIM_OC3_SetConfig+0xe4>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d10d      	bne.n	8002b3a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	021b      	lsls	r3, r3, #8
 8002b2c:	697a      	ldr	r2, [r7, #20]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a18      	ldr	r2, [pc, #96]	; (8002ba0 <TIM_OC3_SetConfig+0xe4>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d007      	beq.n	8002b52 <TIM_OC3_SetConfig+0x96>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a17      	ldr	r2, [pc, #92]	; (8002ba4 <TIM_OC3_SetConfig+0xe8>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d003      	beq.n	8002b52 <TIM_OC3_SetConfig+0x96>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a16      	ldr	r2, [pc, #88]	; (8002ba8 <TIM_OC3_SetConfig+0xec>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d113      	bne.n	8002b7a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	011b      	lsls	r3, r3, #4
 8002b68:	693a      	ldr	r2, [r7, #16]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	699b      	ldr	r3, [r3, #24]
 8002b72:	011b      	lsls	r3, r3, #4
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	693a      	ldr	r2, [r7, #16]
 8002b7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685a      	ldr	r2, [r3, #4]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	697a      	ldr	r2, [r7, #20]
 8002b92:	621a      	str	r2, [r3, #32]
}
 8002b94:	bf00      	nop
 8002b96:	371c      	adds	r7, #28
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr
 8002ba0:	40012c00 	.word	0x40012c00
 8002ba4:	40014000 	.word	0x40014000
 8002ba8:	40014400 	.word	0x40014400

08002bac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b087      	sub	sp, #28
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	69db      	ldr	r3, [r3, #28]
 8002bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002be6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	021b      	lsls	r3, r3, #8
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002bfa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	031b      	lsls	r3, r3, #12
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a14      	ldr	r2, [pc, #80]	; (8002c5c <TIM_OC4_SetConfig+0xb0>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d007      	beq.n	8002c20 <TIM_OC4_SetConfig+0x74>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4a13      	ldr	r2, [pc, #76]	; (8002c60 <TIM_OC4_SetConfig+0xb4>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d003      	beq.n	8002c20 <TIM_OC4_SetConfig+0x74>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a12      	ldr	r2, [pc, #72]	; (8002c64 <TIM_OC4_SetConfig+0xb8>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d109      	bne.n	8002c34 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	695b      	ldr	r3, [r3, #20]
 8002c2c:	019b      	lsls	r3, r3, #6
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	697a      	ldr	r2, [r7, #20]
 8002c38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	68fa      	ldr	r2, [r7, #12]
 8002c3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685a      	ldr	r2, [r3, #4]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	621a      	str	r2, [r3, #32]
}
 8002c4e:	bf00      	nop
 8002c50:	371c      	adds	r7, #28
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	40012c00 	.word	0x40012c00
 8002c60:	40014000 	.word	0x40014000
 8002c64:	40014400 	.word	0x40014400

08002c68 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b087      	sub	sp, #28
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a1b      	ldr	r3, [r3, #32]
 8002c76:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a1b      	ldr	r3, [r3, #32]
 8002c82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68fa      	ldr	r2, [r7, #12]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002cac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	041b      	lsls	r3, r3, #16
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a13      	ldr	r2, [pc, #76]	; (8002d0c <TIM_OC5_SetConfig+0xa4>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d007      	beq.n	8002cd2 <TIM_OC5_SetConfig+0x6a>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a12      	ldr	r2, [pc, #72]	; (8002d10 <TIM_OC5_SetConfig+0xa8>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d003      	beq.n	8002cd2 <TIM_OC5_SetConfig+0x6a>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a11      	ldr	r2, [pc, #68]	; (8002d14 <TIM_OC5_SetConfig+0xac>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d109      	bne.n	8002ce6 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cd8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	021b      	lsls	r3, r3, #8
 8002ce0:	697a      	ldr	r2, [r7, #20]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	697a      	ldr	r2, [r7, #20]
 8002cea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685a      	ldr	r2, [r3, #4]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	621a      	str	r2, [r3, #32]
}
 8002d00:	bf00      	nop
 8002d02:	371c      	adds	r7, #28
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr
 8002d0c:	40012c00 	.word	0x40012c00
 8002d10:	40014000 	.word	0x40014000
 8002d14:	40014400 	.word	0x40014400

08002d18 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b087      	sub	sp, #28
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	021b      	lsls	r3, r3, #8
 8002d52:	68fa      	ldr	r2, [r7, #12]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002d5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	051b      	lsls	r3, r3, #20
 8002d66:	693a      	ldr	r2, [r7, #16]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a14      	ldr	r2, [pc, #80]	; (8002dc0 <TIM_OC6_SetConfig+0xa8>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d007      	beq.n	8002d84 <TIM_OC6_SetConfig+0x6c>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4a13      	ldr	r2, [pc, #76]	; (8002dc4 <TIM_OC6_SetConfig+0xac>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d003      	beq.n	8002d84 <TIM_OC6_SetConfig+0x6c>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a12      	ldr	r2, [pc, #72]	; (8002dc8 <TIM_OC6_SetConfig+0xb0>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d109      	bne.n	8002d98 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d8a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	695b      	ldr	r3, [r3, #20]
 8002d90:	029b      	lsls	r3, r3, #10
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	697a      	ldr	r2, [r7, #20]
 8002d9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685a      	ldr	r2, [r3, #4]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	621a      	str	r2, [r3, #32]
}
 8002db2:	bf00      	nop
 8002db4:	371c      	adds	r7, #28
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	40012c00 	.word	0x40012c00
 8002dc4:	40014000 	.word	0x40014000
 8002dc8:	40014400 	.word	0x40014400

08002dcc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b087      	sub	sp, #28
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6a1b      	ldr	r3, [r3, #32]
 8002ddc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	f023 0201 	bic.w	r2, r3, #1
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002df6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	011b      	lsls	r3, r3, #4
 8002dfc:	693a      	ldr	r2, [r7, #16]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	f023 030a 	bic.w	r3, r3, #10
 8002e08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e0a:	697a      	ldr	r2, [r7, #20]
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	693a      	ldr	r2, [r7, #16]
 8002e16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	697a      	ldr	r2, [r7, #20]
 8002e1c:	621a      	str	r2, [r3, #32]
}
 8002e1e:	bf00      	nop
 8002e20:	371c      	adds	r7, #28
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr

08002e2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	b087      	sub	sp, #28
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	60f8      	str	r0, [r7, #12]
 8002e32:	60b9      	str	r1, [r7, #8]
 8002e34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6a1b      	ldr	r3, [r3, #32]
 8002e3a:	f023 0210 	bic.w	r2, r3, #16
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
 8002e4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	031b      	lsls	r3, r3, #12
 8002e5a:	697a      	ldr	r2, [r7, #20]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	011b      	lsls	r3, r3, #4
 8002e6c:	693a      	ldr	r2, [r7, #16]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	697a      	ldr	r2, [r7, #20]
 8002e76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	693a      	ldr	r2, [r7, #16]
 8002e7c:	621a      	str	r2, [r3, #32]
}
 8002e7e:	bf00      	nop
 8002e80:	371c      	adds	r7, #28
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr

08002e8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	b085      	sub	sp, #20
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
 8002e92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ea0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ea2:	683a      	ldr	r2, [r7, #0]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	f043 0307 	orr.w	r3, r3, #7
 8002eac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	68fa      	ldr	r2, [r7, #12]
 8002eb2:	609a      	str	r2, [r3, #8]
}
 8002eb4:	bf00      	nop
 8002eb6:	3714      	adds	r7, #20
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b087      	sub	sp, #28
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
 8002ecc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002eda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	021a      	lsls	r2, r3, #8
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	697a      	ldr	r2, [r7, #20]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	697a      	ldr	r2, [r7, #20]
 8002ef2:	609a      	str	r2, [r3, #8]
}
 8002ef4:	bf00      	nop
 8002ef6:	371c      	adds	r7, #28
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b087      	sub	sp, #28
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	f003 031f 	and.w	r3, r3, #31
 8002f12:	2201      	movs	r2, #1
 8002f14:	fa02 f303 	lsl.w	r3, r2, r3
 8002f18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6a1a      	ldr	r2, [r3, #32]
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	43db      	mvns	r3, r3
 8002f22:	401a      	ands	r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6a1a      	ldr	r2, [r3, #32]
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	f003 031f 	and.w	r3, r3, #31
 8002f32:	6879      	ldr	r1, [r7, #4]
 8002f34:	fa01 f303 	lsl.w	r3, r1, r3
 8002f38:	431a      	orrs	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	621a      	str	r2, [r3, #32]
}
 8002f3e:	bf00      	nop
 8002f40:	371c      	adds	r7, #28
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
	...

08002f4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b085      	sub	sp, #20
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d101      	bne.n	8002f64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f60:	2302      	movs	r3, #2
 8002f62:	e04f      	b.n	8003004 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2202      	movs	r2, #2
 8002f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a21      	ldr	r2, [pc, #132]	; (8003010 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d108      	bne.n	8002fa0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002f94:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fa6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68fa      	ldr	r2, [r7, #12]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a14      	ldr	r2, [pc, #80]	; (8003010 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d009      	beq.n	8002fd8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fcc:	d004      	beq.n	8002fd8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a10      	ldr	r2, [pc, #64]	; (8003014 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d10c      	bne.n	8002ff2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fde:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	68ba      	ldr	r2, [r7, #8]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68ba      	ldr	r2, [r7, #8]
 8002ff0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	3714      	adds	r7, #20
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr
 8003010:	40012c00 	.word	0x40012c00
 8003014:	40014000 	.word	0x40014000

08003018 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003018:	b480      	push	{r7}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003022:	2300      	movs	r3, #0
 8003024:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800302c:	2b01      	cmp	r3, #1
 800302e:	d101      	bne.n	8003034 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003030:	2302      	movs	r3, #2
 8003032:	e060      	b.n	80030f6 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	4313      	orrs	r3, r2
 8003048:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	4313      	orrs	r3, r2
 8003056:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	4313      	orrs	r3, r2
 8003064:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4313      	orrs	r3, r2
 8003072:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	4313      	orrs	r3, r2
 8003080:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	695b      	ldr	r3, [r3, #20]
 800308c:	4313      	orrs	r3, r2
 800308e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309a:	4313      	orrs	r3, r2
 800309c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	041b      	lsls	r3, r3, #16
 80030aa:	4313      	orrs	r3, r2
 80030ac:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a14      	ldr	r2, [pc, #80]	; (8003104 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d115      	bne.n	80030e4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c2:	051b      	lsls	r3, r3, #20
 80030c4:	4313      	orrs	r3, r2
 80030c6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	69db      	ldr	r3, [r3, #28]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	6a1b      	ldr	r3, [r3, #32]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68fa      	ldr	r2, [r7, #12]
 80030ea:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3714      	adds	r7, #20
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	40012c00 	.word	0x40012c00

08003108 <__libc_init_array>:
 8003108:	b570      	push	{r4, r5, r6, lr}
 800310a:	4d0d      	ldr	r5, [pc, #52]	; (8003140 <__libc_init_array+0x38>)
 800310c:	4c0d      	ldr	r4, [pc, #52]	; (8003144 <__libc_init_array+0x3c>)
 800310e:	1b64      	subs	r4, r4, r5
 8003110:	10a4      	asrs	r4, r4, #2
 8003112:	2600      	movs	r6, #0
 8003114:	42a6      	cmp	r6, r4
 8003116:	d109      	bne.n	800312c <__libc_init_array+0x24>
 8003118:	4d0b      	ldr	r5, [pc, #44]	; (8003148 <__libc_init_array+0x40>)
 800311a:	4c0c      	ldr	r4, [pc, #48]	; (800314c <__libc_init_array+0x44>)
 800311c:	f000 f820 	bl	8003160 <_init>
 8003120:	1b64      	subs	r4, r4, r5
 8003122:	10a4      	asrs	r4, r4, #2
 8003124:	2600      	movs	r6, #0
 8003126:	42a6      	cmp	r6, r4
 8003128:	d105      	bne.n	8003136 <__libc_init_array+0x2e>
 800312a:	bd70      	pop	{r4, r5, r6, pc}
 800312c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003130:	4798      	blx	r3
 8003132:	3601      	adds	r6, #1
 8003134:	e7ee      	b.n	8003114 <__libc_init_array+0xc>
 8003136:	f855 3b04 	ldr.w	r3, [r5], #4
 800313a:	4798      	blx	r3
 800313c:	3601      	adds	r6, #1
 800313e:	e7f2      	b.n	8003126 <__libc_init_array+0x1e>
 8003140:	080031b8 	.word	0x080031b8
 8003144:	080031b8 	.word	0x080031b8
 8003148:	080031b8 	.word	0x080031b8
 800314c:	080031bc 	.word	0x080031bc

08003150 <memset>:
 8003150:	4402      	add	r2, r0
 8003152:	4603      	mov	r3, r0
 8003154:	4293      	cmp	r3, r2
 8003156:	d100      	bne.n	800315a <memset+0xa>
 8003158:	4770      	bx	lr
 800315a:	f803 1b01 	strb.w	r1, [r3], #1
 800315e:	e7f9      	b.n	8003154 <memset+0x4>

08003160 <_init>:
 8003160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003162:	bf00      	nop
 8003164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003166:	bc08      	pop	{r3}
 8003168:	469e      	mov	lr, r3
 800316a:	4770      	bx	lr

0800316c <_fini>:
 800316c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800316e:	bf00      	nop
 8003170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003172:	bc08      	pop	{r3}
 8003174:	469e      	mov	lr, r3
 8003176:	4770      	bx	lr
