
M10A03_IC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002680  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800280c  0800280c  0001280c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800284c  0800284c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800284c  0800284c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800284c  0800284c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800284c  0800284c  0001284c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002850  08002850  00012850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002854  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  2000000c  08002860  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000088  08002860  00020088  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a6b9  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018d4  00000000  00000000  0002a6f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af0  00000000  00000000  0002bfd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a18  00000000  00000000  0002cac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f8b0  00000000  00000000  0002d4d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bda9  00000000  00000000  0004cd88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c20c9  00000000  00000000  00058b31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011abfa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c88  00000000  00000000  0011ac4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080027f4 	.word	0x080027f4

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	080027f4 	.word	0x080027f4

080001cc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80001cc:	b480      	push	{r7}
 80001ce:	b083      	sub	sp, #12
 80001d0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001d2:	4b09      	ldr	r3, [pc, #36]	; (80001f8 <MX_GPIO_Init+0x2c>)
 80001d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001d6:	4a08      	ldr	r2, [pc, #32]	; (80001f8 <MX_GPIO_Init+0x2c>)
 80001d8:	f043 0301 	orr.w	r3, r3, #1
 80001dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80001de:	4b06      	ldr	r3, [pc, #24]	; (80001f8 <MX_GPIO_Init+0x2c>)
 80001e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001e2:	f003 0301 	and.w	r3, r3, #1
 80001e6:	607b      	str	r3, [r7, #4]
 80001e8:	687b      	ldr	r3, [r7, #4]

}
 80001ea:	bf00      	nop
 80001ec:	370c      	adds	r7, #12
 80001ee:	46bd      	mov	sp, r7
 80001f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f4:	4770      	bx	lr
 80001f6:	bf00      	nop
 80001f8:	40021000 	.word	0x40021000

080001fc <HAL_TIM_IC_CaptureCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	4a1d      	ldr	r2, [pc, #116]	; (800027c <HAL_TIM_IC_CaptureCallback+0x80>)
 8000208:	4293      	cmp	r3, r2
 800020a:	d132      	bne.n	8000272 <HAL_TIM_IC_CaptureCallback+0x76>
		if (flag == 2) {
 800020c:	4b1c      	ldr	r3, [pc, #112]	; (8000280 <HAL_TIM_IC_CaptureCallback+0x84>)
 800020e:	781b      	ldrb	r3, [r3, #0]
 8000210:	2b02      	cmp	r3, #2
 8000212:	d10c      	bne.n	800022e <HAL_TIM_IC_CaptureCallback+0x32>
			f = 2000000 / (data[1] - data[0]);
 8000214:	4b1b      	ldr	r3, [pc, #108]	; (8000284 <HAL_TIM_IC_CaptureCallback+0x88>)
 8000216:	685a      	ldr	r2, [r3, #4]
 8000218:	4b1a      	ldr	r3, [pc, #104]	; (8000284 <HAL_TIM_IC_CaptureCallback+0x88>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	1ad3      	subs	r3, r2, r3
 800021e:	4a1a      	ldr	r2, [pc, #104]	; (8000288 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000220:	fbb2 f3f3 	udiv	r3, r2, r3
 8000224:	4a19      	ldr	r2, [pc, #100]	; (800028c <HAL_TIM_IC_CaptureCallback+0x90>)
 8000226:	6013      	str	r3, [r2, #0]
			flag = 0;
 8000228:	4b15      	ldr	r3, [pc, #84]	; (8000280 <HAL_TIM_IC_CaptureCallback+0x84>)
 800022a:	2200      	movs	r2, #0
 800022c:	701a      	strb	r2, [r3, #0]
		}
		if (flag == 1) {
 800022e:	4b14      	ldr	r3, [pc, #80]	; (8000280 <HAL_TIM_IC_CaptureCallback+0x84>)
 8000230:	781b      	ldrb	r3, [r3, #0]
 8000232:	2b01      	cmp	r3, #1
 8000234:	d10c      	bne.n	8000250 <HAL_TIM_IC_CaptureCallback+0x54>
			data[1] = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 8000236:	2100      	movs	r1, #0
 8000238:	4810      	ldr	r0, [pc, #64]	; (800027c <HAL_TIM_IC_CaptureCallback+0x80>)
 800023a:	f001 ff8f 	bl	800215c <HAL_TIM_ReadCapturedValue>
 800023e:	4603      	mov	r3, r0
 8000240:	4a10      	ldr	r2, [pc, #64]	; (8000284 <HAL_TIM_IC_CaptureCallback+0x88>)
 8000242:	6053      	str	r3, [r2, #4]
			flag++;
 8000244:	4b0e      	ldr	r3, [pc, #56]	; (8000280 <HAL_TIM_IC_CaptureCallback+0x84>)
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	3301      	adds	r3, #1
 800024a:	b2da      	uxtb	r2, r3
 800024c:	4b0c      	ldr	r3, [pc, #48]	; (8000280 <HAL_TIM_IC_CaptureCallback+0x84>)
 800024e:	701a      	strb	r2, [r3, #0]
		}
		if (flag == 0) {
 8000250:	4b0b      	ldr	r3, [pc, #44]	; (8000280 <HAL_TIM_IC_CaptureCallback+0x84>)
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	2b00      	cmp	r3, #0
 8000256:	d10c      	bne.n	8000272 <HAL_TIM_IC_CaptureCallback+0x76>
			data[0] = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 8000258:	2100      	movs	r1, #0
 800025a:	4808      	ldr	r0, [pc, #32]	; (800027c <HAL_TIM_IC_CaptureCallback+0x80>)
 800025c:	f001 ff7e 	bl	800215c <HAL_TIM_ReadCapturedValue>
 8000260:	4603      	mov	r3, r0
 8000262:	4a08      	ldr	r2, [pc, #32]	; (8000284 <HAL_TIM_IC_CaptureCallback+0x88>)
 8000264:	6013      	str	r3, [r2, #0]
			flag++;
 8000266:	4b06      	ldr	r3, [pc, #24]	; (8000280 <HAL_TIM_IC_CaptureCallback+0x84>)
 8000268:	781b      	ldrb	r3, [r3, #0]
 800026a:	3301      	adds	r3, #1
 800026c:	b2da      	uxtb	r2, r3
 800026e:	4b04      	ldr	r3, [pc, #16]	; (8000280 <HAL_TIM_IC_CaptureCallback+0x84>)
 8000270:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000272:	bf00      	nop
 8000274:	3708      	adds	r7, #8
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
 800027a:	bf00      	nop
 800027c:	20000038 	.word	0x20000038
 8000280:	20000034 	.word	0x20000034
 8000284:	2000002c 	.word	0x2000002c
 8000288:	001e8480 	.word	0x001e8480
 800028c:	20000028 	.word	0x20000028

08000290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000294:	f000 f9a3 	bl	80005de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000298:	f000 f80c 	bl	80002b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800029c:	f7ff ff96 	bl	80001cc <MX_GPIO_Init>
  MX_TIM2_Init();
 80002a0:	f000 f8bc 	bl	800041c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80002a4:	2100      	movs	r1, #0
 80002a6:	4802      	ldr	r0, [pc, #8]	; (80002b0 <main+0x20>)
 80002a8:	f001 fba6 	bl	80019f8 <HAL_TIM_IC_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002ac:	e7fe      	b.n	80002ac <main+0x1c>
 80002ae:	bf00      	nop
 80002b0:	20000038 	.word	0x20000038

080002b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b096      	sub	sp, #88	; 0x58
 80002b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ba:	f107 0314 	add.w	r3, r7, #20
 80002be:	2244      	movs	r2, #68	; 0x44
 80002c0:	2100      	movs	r1, #0
 80002c2:	4618      	mov	r0, r3
 80002c4:	f002 fa8e 	bl	80027e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002c8:	463b      	mov	r3, r7
 80002ca:	2200      	movs	r2, #0
 80002cc:	601a      	str	r2, [r3, #0]
 80002ce:	605a      	str	r2, [r3, #4]
 80002d0:	609a      	str	r2, [r3, #8]
 80002d2:	60da      	str	r2, [r3, #12]
 80002d4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002d6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80002da:	f000 fc7f 	bl	8000bdc <HAL_PWREx_ControlVoltageScaling>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d001      	beq.n	80002e8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80002e4:	f000 f82b 	bl	800033e <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002e8:	2302      	movs	r3, #2
 80002ea:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002f0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002f2:	2310      	movs	r3, #16
 80002f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002f6:	2300      	movs	r3, #0
 80002f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002fa:	f107 0314 	add.w	r3, r7, #20
 80002fe:	4618      	mov	r0, r3
 8000300:	f000 fcc2 	bl	8000c88 <HAL_RCC_OscConfig>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <SystemClock_Config+0x5a>
  {
    Error_Handler();
 800030a:	f000 f818 	bl	800033e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800030e:	230f      	movs	r3, #15
 8000310:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000312:	2301      	movs	r3, #1
 8000314:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000316:	2300      	movs	r3, #0
 8000318:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800031a:	2300      	movs	r3, #0
 800031c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800031e:	2300      	movs	r3, #0
 8000320:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000322:	463b      	mov	r3, r7
 8000324:	2100      	movs	r1, #0
 8000326:	4618      	mov	r0, r3
 8000328:	f001 f8c2 	bl	80014b0 <HAL_RCC_ClockConfig>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000332:	f000 f804 	bl	800033e <Error_Handler>
  }
}
 8000336:	bf00      	nop
 8000338:	3758      	adds	r7, #88	; 0x58
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}

0800033e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800033e:	b480      	push	{r7}
 8000340:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000342:	b672      	cpsid	i
}
 8000344:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000346:	e7fe      	b.n	8000346 <Error_Handler+0x8>

08000348 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000348:	b480      	push	{r7}
 800034a:	b083      	sub	sp, #12
 800034c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800034e:	4b0f      	ldr	r3, [pc, #60]	; (800038c <HAL_MspInit+0x44>)
 8000350:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000352:	4a0e      	ldr	r2, [pc, #56]	; (800038c <HAL_MspInit+0x44>)
 8000354:	f043 0301 	orr.w	r3, r3, #1
 8000358:	6613      	str	r3, [r2, #96]	; 0x60
 800035a:	4b0c      	ldr	r3, [pc, #48]	; (800038c <HAL_MspInit+0x44>)
 800035c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800035e:	f003 0301 	and.w	r3, r3, #1
 8000362:	607b      	str	r3, [r7, #4]
 8000364:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000366:	4b09      	ldr	r3, [pc, #36]	; (800038c <HAL_MspInit+0x44>)
 8000368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800036a:	4a08      	ldr	r2, [pc, #32]	; (800038c <HAL_MspInit+0x44>)
 800036c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000370:	6593      	str	r3, [r2, #88]	; 0x58
 8000372:	4b06      	ldr	r3, [pc, #24]	; (800038c <HAL_MspInit+0x44>)
 8000374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800037a:	603b      	str	r3, [r7, #0]
 800037c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800037e:	bf00      	nop
 8000380:	370c      	adds	r7, #12
 8000382:	46bd      	mov	sp, r7
 8000384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000388:	4770      	bx	lr
 800038a:	bf00      	nop
 800038c:	40021000 	.word	0x40021000

08000390 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000394:	e7fe      	b.n	8000394 <NMI_Handler+0x4>

08000396 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000396:	b480      	push	{r7}
 8000398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800039a:	e7fe      	b.n	800039a <HardFault_Handler+0x4>

0800039c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003a0:	e7fe      	b.n	80003a0 <MemManage_Handler+0x4>

080003a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003a2:	b480      	push	{r7}
 80003a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003a6:	e7fe      	b.n	80003a6 <BusFault_Handler+0x4>

080003a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003a8:	b480      	push	{r7}
 80003aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003ac:	e7fe      	b.n	80003ac <UsageFault_Handler+0x4>

080003ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003ae:	b480      	push	{r7}
 80003b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003b2:	bf00      	nop
 80003b4:	46bd      	mov	sp, r7
 80003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ba:	4770      	bx	lr

080003bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003c0:	bf00      	nop
 80003c2:	46bd      	mov	sp, r7
 80003c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c8:	4770      	bx	lr

080003ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003ca:	b480      	push	{r7}
 80003cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003ce:	bf00      	nop
 80003d0:	46bd      	mov	sp, r7
 80003d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d6:	4770      	bx	lr

080003d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003dc:	f000 f954 	bl	8000688 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003e0:	bf00      	nop
 80003e2:	bd80      	pop	{r7, pc}

080003e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80003e8:	4802      	ldr	r0, [pc, #8]	; (80003f4 <TIM2_IRQHandler+0x10>)
 80003ea:	f001 fc33 	bl	8001c54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80003ee:	bf00      	nop
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	20000038 	.word	0x20000038

080003f8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80003fc:	4b06      	ldr	r3, [pc, #24]	; (8000418 <SystemInit+0x20>)
 80003fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000402:	4a05      	ldr	r2, [pc, #20]	; (8000418 <SystemInit+0x20>)
 8000404:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000408:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800040c:	bf00      	nop
 800040e:	46bd      	mov	sp, r7
 8000410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000414:	4770      	bx	lr
 8000416:	bf00      	nop
 8000418:	e000ed00 	.word	0xe000ed00

0800041c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b08c      	sub	sp, #48	; 0x30
 8000420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000422:	f107 0320 	add.w	r3, r7, #32
 8000426:	2200      	movs	r2, #0
 8000428:	601a      	str	r2, [r3, #0]
 800042a:	605a      	str	r2, [r3, #4]
 800042c:	609a      	str	r2, [r3, #8]
 800042e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000430:	f107 0314 	add.w	r3, r7, #20
 8000434:	2200      	movs	r2, #0
 8000436:	601a      	str	r2, [r3, #0]
 8000438:	605a      	str	r2, [r3, #4]
 800043a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800043c:	1d3b      	adds	r3, r7, #4
 800043e:	2200      	movs	r2, #0
 8000440:	601a      	str	r2, [r3, #0]
 8000442:	605a      	str	r2, [r3, #4]
 8000444:	609a      	str	r2, [r3, #8]
 8000446:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000448:	4b2b      	ldr	r3, [pc, #172]	; (80004f8 <MX_TIM2_Init+0xdc>)
 800044a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800044e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 8000450:	4b29      	ldr	r3, [pc, #164]	; (80004f8 <MX_TIM2_Init+0xdc>)
 8000452:	2207      	movs	r2, #7
 8000454:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000456:	4b28      	ldr	r3, [pc, #160]	; (80004f8 <MX_TIM2_Init+0xdc>)
 8000458:	2200      	movs	r2, #0
 800045a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65536-1;
 800045c:	4b26      	ldr	r3, [pc, #152]	; (80004f8 <MX_TIM2_Init+0xdc>)
 800045e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000462:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000464:	4b24      	ldr	r3, [pc, #144]	; (80004f8 <MX_TIM2_Init+0xdc>)
 8000466:	2200      	movs	r2, #0
 8000468:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800046a:	4b23      	ldr	r3, [pc, #140]	; (80004f8 <MX_TIM2_Init+0xdc>)
 800046c:	2200      	movs	r2, #0
 800046e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000470:	4821      	ldr	r0, [pc, #132]	; (80004f8 <MX_TIM2_Init+0xdc>)
 8000472:	f001 fa09 	bl	8001888 <HAL_TIM_Base_Init>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d001      	beq.n	8000480 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 800047c:	f7ff ff5f 	bl	800033e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000480:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000484:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000486:	f107 0320 	add.w	r3, r7, #32
 800048a:	4619      	mov	r1, r3
 800048c:	481a      	ldr	r0, [pc, #104]	; (80004f8 <MX_TIM2_Init+0xdc>)
 800048e:	f001 fd9c 	bl	8001fca <HAL_TIM_ConfigClockSource>
 8000492:	4603      	mov	r3, r0
 8000494:	2b00      	cmp	r3, #0
 8000496:	d001      	beq.n	800049c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000498:	f7ff ff51 	bl	800033e <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800049c:	4816      	ldr	r0, [pc, #88]	; (80004f8 <MX_TIM2_Init+0xdc>)
 800049e:	f001 fa4a 	bl	8001936 <HAL_TIM_IC_Init>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d001      	beq.n	80004ac <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80004a8:	f7ff ff49 	bl	800033e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004ac:	2300      	movs	r3, #0
 80004ae:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004b0:	2300      	movs	r3, #0
 80004b2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004b4:	f107 0314 	add.w	r3, r7, #20
 80004b8:	4619      	mov	r1, r3
 80004ba:	480f      	ldr	r0, [pc, #60]	; (80004f8 <MX_TIM2_Init+0xdc>)
 80004bc:	f002 f8ea 	bl	8002694 <HAL_TIMEx_MasterConfigSynchronization>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d001      	beq.n	80004ca <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 80004c6:	f7ff ff3a 	bl	800033e <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80004ca:	2300      	movs	r3, #0
 80004cc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80004ce:	2301      	movs	r3, #1
 80004d0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80004d2:	2300      	movs	r3, #0
 80004d4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80004d6:	2300      	movs	r3, #0
 80004d8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80004da:	1d3b      	adds	r3, r7, #4
 80004dc:	2200      	movs	r2, #0
 80004de:	4619      	mov	r1, r3
 80004e0:	4805      	ldr	r0, [pc, #20]	; (80004f8 <MX_TIM2_Init+0xdc>)
 80004e2:	f001 fcd6 	bl	8001e92 <HAL_TIM_IC_ConfigChannel>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d001      	beq.n	80004f0 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 80004ec:	f7ff ff27 	bl	800033e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80004f0:	bf00      	nop
 80004f2:	3730      	adds	r7, #48	; 0x30
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	20000038 	.word	0x20000038

080004fc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b08a      	sub	sp, #40	; 0x28
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000504:	f107 0314 	add.w	r3, r7, #20
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
 800050c:	605a      	str	r2, [r3, #4]
 800050e:	609a      	str	r2, [r3, #8]
 8000510:	60da      	str	r2, [r3, #12]
 8000512:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800051c:	d130      	bne.n	8000580 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800051e:	4b1a      	ldr	r3, [pc, #104]	; (8000588 <HAL_TIM_Base_MspInit+0x8c>)
 8000520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000522:	4a19      	ldr	r2, [pc, #100]	; (8000588 <HAL_TIM_Base_MspInit+0x8c>)
 8000524:	f043 0301 	orr.w	r3, r3, #1
 8000528:	6593      	str	r3, [r2, #88]	; 0x58
 800052a:	4b17      	ldr	r3, [pc, #92]	; (8000588 <HAL_TIM_Base_MspInit+0x8c>)
 800052c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800052e:	f003 0301 	and.w	r3, r3, #1
 8000532:	613b      	str	r3, [r7, #16]
 8000534:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000536:	4b14      	ldr	r3, [pc, #80]	; (8000588 <HAL_TIM_Base_MspInit+0x8c>)
 8000538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053a:	4a13      	ldr	r2, [pc, #76]	; (8000588 <HAL_TIM_Base_MspInit+0x8c>)
 800053c:	f043 0301 	orr.w	r3, r3, #1
 8000540:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000542:	4b11      	ldr	r3, [pc, #68]	; (8000588 <HAL_TIM_Base_MspInit+0x8c>)
 8000544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000546:	f003 0301 	and.w	r3, r3, #1
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800054e:	2301      	movs	r3, #1
 8000550:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000552:	2302      	movs	r3, #2
 8000554:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000556:	2300      	movs	r3, #0
 8000558:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800055a:	2300      	movs	r3, #0
 800055c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800055e:	2301      	movs	r3, #1
 8000560:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000562:	f107 0314 	add.w	r3, r7, #20
 8000566:	4619      	mov	r1, r3
 8000568:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800056c:	f000 f9be 	bl	80008ec <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000570:	2200      	movs	r2, #0
 8000572:	2100      	movs	r1, #0
 8000574:	201c      	movs	r0, #28
 8000576:	f000 f982 	bl	800087e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800057a:	201c      	movs	r0, #28
 800057c:	f000 f99b 	bl	80008b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000580:	bf00      	nop
 8000582:	3728      	adds	r7, #40	; 0x28
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	40021000 	.word	0x40021000

0800058c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800058c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005c4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000590:	f7ff ff32 	bl	80003f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000594:	480c      	ldr	r0, [pc, #48]	; (80005c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000596:	490d      	ldr	r1, [pc, #52]	; (80005cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000598:	4a0d      	ldr	r2, [pc, #52]	; (80005d0 <LoopForever+0xe>)
  movs r3, #0
 800059a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800059c:	e002      	b.n	80005a4 <LoopCopyDataInit>

0800059e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800059e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005a2:	3304      	adds	r3, #4

080005a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005a8:	d3f9      	bcc.n	800059e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005aa:	4a0a      	ldr	r2, [pc, #40]	; (80005d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005ac:	4c0a      	ldr	r4, [pc, #40]	; (80005d8 <LoopForever+0x16>)
  movs r3, #0
 80005ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005b0:	e001      	b.n	80005b6 <LoopFillZerobss>

080005b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005b4:	3204      	adds	r2, #4

080005b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005b8:	d3fb      	bcc.n	80005b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005ba:	f002 f8ef 	bl	800279c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005be:	f7ff fe67 	bl	8000290 <main>

080005c2 <LoopForever>:

LoopForever:
    b LoopForever
 80005c2:	e7fe      	b.n	80005c2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80005c4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80005c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005cc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005d0:	08002854 	.word	0x08002854
  ldr r2, =_sbss
 80005d4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005d8:	20000088 	.word	0x20000088

080005dc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005dc:	e7fe      	b.n	80005dc <ADC1_IRQHandler>

080005de <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005de:	b580      	push	{r7, lr}
 80005e0:	b082      	sub	sp, #8
 80005e2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005e4:	2300      	movs	r3, #0
 80005e6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005e8:	2003      	movs	r0, #3
 80005ea:	f000 f93d 	bl	8000868 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005ee:	2000      	movs	r0, #0
 80005f0:	f000 f80e 	bl	8000610 <HAL_InitTick>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d002      	beq.n	8000600 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80005fa:	2301      	movs	r3, #1
 80005fc:	71fb      	strb	r3, [r7, #7]
 80005fe:	e001      	b.n	8000604 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000600:	f7ff fea2 	bl	8000348 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000604:	79fb      	ldrb	r3, [r7, #7]
}
 8000606:	4618      	mov	r0, r3
 8000608:	3708      	adds	r7, #8
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
	...

08000610 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000618:	2300      	movs	r3, #0
 800061a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800061c:	4b17      	ldr	r3, [pc, #92]	; (800067c <HAL_InitTick+0x6c>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d023      	beq.n	800066c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000624:	4b16      	ldr	r3, [pc, #88]	; (8000680 <HAL_InitTick+0x70>)
 8000626:	681a      	ldr	r2, [r3, #0]
 8000628:	4b14      	ldr	r3, [pc, #80]	; (800067c <HAL_InitTick+0x6c>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	4619      	mov	r1, r3
 800062e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000632:	fbb3 f3f1 	udiv	r3, r3, r1
 8000636:	fbb2 f3f3 	udiv	r3, r2, r3
 800063a:	4618      	mov	r0, r3
 800063c:	f000 f949 	bl	80008d2 <HAL_SYSTICK_Config>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d10f      	bne.n	8000666 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	2b0f      	cmp	r3, #15
 800064a:	d809      	bhi.n	8000660 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800064c:	2200      	movs	r2, #0
 800064e:	6879      	ldr	r1, [r7, #4]
 8000650:	f04f 30ff 	mov.w	r0, #4294967295
 8000654:	f000 f913 	bl	800087e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000658:	4a0a      	ldr	r2, [pc, #40]	; (8000684 <HAL_InitTick+0x74>)
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	6013      	str	r3, [r2, #0]
 800065e:	e007      	b.n	8000670 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000660:	2301      	movs	r3, #1
 8000662:	73fb      	strb	r3, [r7, #15]
 8000664:	e004      	b.n	8000670 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000666:	2301      	movs	r3, #1
 8000668:	73fb      	strb	r3, [r7, #15]
 800066a:	e001      	b.n	8000670 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800066c:	2301      	movs	r3, #1
 800066e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000670:	7bfb      	ldrb	r3, [r7, #15]
}
 8000672:	4618      	mov	r0, r3
 8000674:	3710      	adds	r7, #16
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	20000008 	.word	0x20000008
 8000680:	20000000 	.word	0x20000000
 8000684:	20000004 	.word	0x20000004

08000688 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800068c:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <HAL_IncTick+0x20>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	461a      	mov	r2, r3
 8000692:	4b06      	ldr	r3, [pc, #24]	; (80006ac <HAL_IncTick+0x24>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	4413      	add	r3, r2
 8000698:	4a04      	ldr	r2, [pc, #16]	; (80006ac <HAL_IncTick+0x24>)
 800069a:	6013      	str	r3, [r2, #0]
}
 800069c:	bf00      	nop
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	20000008 	.word	0x20000008
 80006ac:	20000084 	.word	0x20000084

080006b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  return uwTick;
 80006b4:	4b03      	ldr	r3, [pc, #12]	; (80006c4 <HAL_GetTick+0x14>)
 80006b6:	681b      	ldr	r3, [r3, #0]
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	20000084 	.word	0x20000084

080006c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b085      	sub	sp, #20
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	f003 0307 	and.w	r3, r3, #7
 80006d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006d8:	4b0c      	ldr	r3, [pc, #48]	; (800070c <__NVIC_SetPriorityGrouping+0x44>)
 80006da:	68db      	ldr	r3, [r3, #12]
 80006dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006de:	68ba      	ldr	r2, [r7, #8]
 80006e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006e4:	4013      	ands	r3, r2
 80006e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006fa:	4a04      	ldr	r2, [pc, #16]	; (800070c <__NVIC_SetPriorityGrouping+0x44>)
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	60d3      	str	r3, [r2, #12]
}
 8000700:	bf00      	nop
 8000702:	3714      	adds	r7, #20
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr
 800070c:	e000ed00 	.word	0xe000ed00

08000710 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000714:	4b04      	ldr	r3, [pc, #16]	; (8000728 <__NVIC_GetPriorityGrouping+0x18>)
 8000716:	68db      	ldr	r3, [r3, #12]
 8000718:	0a1b      	lsrs	r3, r3, #8
 800071a:	f003 0307 	and.w	r3, r3, #7
}
 800071e:	4618      	mov	r0, r3
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr
 8000728:	e000ed00 	.word	0xe000ed00

0800072c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800073a:	2b00      	cmp	r3, #0
 800073c:	db0b      	blt.n	8000756 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	f003 021f 	and.w	r2, r3, #31
 8000744:	4907      	ldr	r1, [pc, #28]	; (8000764 <__NVIC_EnableIRQ+0x38>)
 8000746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074a:	095b      	lsrs	r3, r3, #5
 800074c:	2001      	movs	r0, #1
 800074e:	fa00 f202 	lsl.w	r2, r0, r2
 8000752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000756:	bf00      	nop
 8000758:	370c      	adds	r7, #12
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	e000e100 	.word	0xe000e100

08000768 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	6039      	str	r1, [r7, #0]
 8000772:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000778:	2b00      	cmp	r3, #0
 800077a:	db0a      	blt.n	8000792 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	b2da      	uxtb	r2, r3
 8000780:	490c      	ldr	r1, [pc, #48]	; (80007b4 <__NVIC_SetPriority+0x4c>)
 8000782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000786:	0112      	lsls	r2, r2, #4
 8000788:	b2d2      	uxtb	r2, r2
 800078a:	440b      	add	r3, r1
 800078c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000790:	e00a      	b.n	80007a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	b2da      	uxtb	r2, r3
 8000796:	4908      	ldr	r1, [pc, #32]	; (80007b8 <__NVIC_SetPriority+0x50>)
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	f003 030f 	and.w	r3, r3, #15
 800079e:	3b04      	subs	r3, #4
 80007a0:	0112      	lsls	r2, r2, #4
 80007a2:	b2d2      	uxtb	r2, r2
 80007a4:	440b      	add	r3, r1
 80007a6:	761a      	strb	r2, [r3, #24]
}
 80007a8:	bf00      	nop
 80007aa:	370c      	adds	r7, #12
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	e000e100 	.word	0xe000e100
 80007b8:	e000ed00 	.word	0xe000ed00

080007bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007bc:	b480      	push	{r7}
 80007be:	b089      	sub	sp, #36	; 0x24
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	60f8      	str	r0, [r7, #12]
 80007c4:	60b9      	str	r1, [r7, #8]
 80007c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	f003 0307 	and.w	r3, r3, #7
 80007ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007d0:	69fb      	ldr	r3, [r7, #28]
 80007d2:	f1c3 0307 	rsb	r3, r3, #7
 80007d6:	2b04      	cmp	r3, #4
 80007d8:	bf28      	it	cs
 80007da:	2304      	movcs	r3, #4
 80007dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	3304      	adds	r3, #4
 80007e2:	2b06      	cmp	r3, #6
 80007e4:	d902      	bls.n	80007ec <NVIC_EncodePriority+0x30>
 80007e6:	69fb      	ldr	r3, [r7, #28]
 80007e8:	3b03      	subs	r3, #3
 80007ea:	e000      	b.n	80007ee <NVIC_EncodePriority+0x32>
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f0:	f04f 32ff 	mov.w	r2, #4294967295
 80007f4:	69bb      	ldr	r3, [r7, #24]
 80007f6:	fa02 f303 	lsl.w	r3, r2, r3
 80007fa:	43da      	mvns	r2, r3
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	401a      	ands	r2, r3
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000804:	f04f 31ff 	mov.w	r1, #4294967295
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	fa01 f303 	lsl.w	r3, r1, r3
 800080e:	43d9      	mvns	r1, r3
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000814:	4313      	orrs	r3, r2
         );
}
 8000816:	4618      	mov	r0, r3
 8000818:	3724      	adds	r7, #36	; 0x24
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
	...

08000824 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	3b01      	subs	r3, #1
 8000830:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000834:	d301      	bcc.n	800083a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000836:	2301      	movs	r3, #1
 8000838:	e00f      	b.n	800085a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800083a:	4a0a      	ldr	r2, [pc, #40]	; (8000864 <SysTick_Config+0x40>)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	3b01      	subs	r3, #1
 8000840:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000842:	210f      	movs	r1, #15
 8000844:	f04f 30ff 	mov.w	r0, #4294967295
 8000848:	f7ff ff8e 	bl	8000768 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800084c:	4b05      	ldr	r3, [pc, #20]	; (8000864 <SysTick_Config+0x40>)
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000852:	4b04      	ldr	r3, [pc, #16]	; (8000864 <SysTick_Config+0x40>)
 8000854:	2207      	movs	r2, #7
 8000856:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000858:	2300      	movs	r3, #0
}
 800085a:	4618      	mov	r0, r3
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	e000e010 	.word	0xe000e010

08000868 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000870:	6878      	ldr	r0, [r7, #4]
 8000872:	f7ff ff29 	bl	80006c8 <__NVIC_SetPriorityGrouping>
}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800087e:	b580      	push	{r7, lr}
 8000880:	b086      	sub	sp, #24
 8000882:	af00      	add	r7, sp, #0
 8000884:	4603      	mov	r3, r0
 8000886:	60b9      	str	r1, [r7, #8]
 8000888:	607a      	str	r2, [r7, #4]
 800088a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800088c:	2300      	movs	r3, #0
 800088e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000890:	f7ff ff3e 	bl	8000710 <__NVIC_GetPriorityGrouping>
 8000894:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000896:	687a      	ldr	r2, [r7, #4]
 8000898:	68b9      	ldr	r1, [r7, #8]
 800089a:	6978      	ldr	r0, [r7, #20]
 800089c:	f7ff ff8e 	bl	80007bc <NVIC_EncodePriority>
 80008a0:	4602      	mov	r2, r0
 80008a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008a6:	4611      	mov	r1, r2
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff ff5d 	bl	8000768 <__NVIC_SetPriority>
}
 80008ae:	bf00      	nop
 80008b0:	3718      	adds	r7, #24
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008b6:	b580      	push	{r7, lr}
 80008b8:	b082      	sub	sp, #8
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	4603      	mov	r3, r0
 80008be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff ff31 	bl	800072c <__NVIC_EnableIRQ>
}
 80008ca:	bf00      	nop
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	b082      	sub	sp, #8
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008da:	6878      	ldr	r0, [r7, #4]
 80008dc:	f7ff ffa2 	bl	8000824 <SysTick_Config>
 80008e0:	4603      	mov	r3, r0
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
	...

080008ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b087      	sub	sp, #28
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008f6:	2300      	movs	r3, #0
 80008f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008fa:	e148      	b.n	8000b8e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	681a      	ldr	r2, [r3, #0]
 8000900:	2101      	movs	r1, #1
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	fa01 f303 	lsl.w	r3, r1, r3
 8000908:	4013      	ands	r3, r2
 800090a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	2b00      	cmp	r3, #0
 8000910:	f000 813a 	beq.w	8000b88 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	f003 0303 	and.w	r3, r3, #3
 800091c:	2b01      	cmp	r3, #1
 800091e:	d005      	beq.n	800092c <HAL_GPIO_Init+0x40>
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	f003 0303 	and.w	r3, r3, #3
 8000928:	2b02      	cmp	r3, #2
 800092a:	d130      	bne.n	800098e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	689b      	ldr	r3, [r3, #8]
 8000930:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	005b      	lsls	r3, r3, #1
 8000936:	2203      	movs	r2, #3
 8000938:	fa02 f303 	lsl.w	r3, r2, r3
 800093c:	43db      	mvns	r3, r3
 800093e:	693a      	ldr	r2, [r7, #16]
 8000940:	4013      	ands	r3, r2
 8000942:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	68da      	ldr	r2, [r3, #12]
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	005b      	lsls	r3, r3, #1
 800094c:	fa02 f303 	lsl.w	r3, r2, r3
 8000950:	693a      	ldr	r2, [r7, #16]
 8000952:	4313      	orrs	r3, r2
 8000954:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	693a      	ldr	r2, [r7, #16]
 800095a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000962:	2201      	movs	r2, #1
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	fa02 f303 	lsl.w	r3, r2, r3
 800096a:	43db      	mvns	r3, r3
 800096c:	693a      	ldr	r2, [r7, #16]
 800096e:	4013      	ands	r3, r2
 8000970:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	091b      	lsrs	r3, r3, #4
 8000978:	f003 0201 	and.w	r2, r3, #1
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	fa02 f303 	lsl.w	r3, r2, r3
 8000982:	693a      	ldr	r2, [r7, #16]
 8000984:	4313      	orrs	r3, r2
 8000986:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	693a      	ldr	r2, [r7, #16]
 800098c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	685b      	ldr	r3, [r3, #4]
 8000992:	f003 0303 	and.w	r3, r3, #3
 8000996:	2b03      	cmp	r3, #3
 8000998:	d017      	beq.n	80009ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	68db      	ldr	r3, [r3, #12]
 800099e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	005b      	lsls	r3, r3, #1
 80009a4:	2203      	movs	r2, #3
 80009a6:	fa02 f303 	lsl.w	r3, r2, r3
 80009aa:	43db      	mvns	r3, r3
 80009ac:	693a      	ldr	r2, [r7, #16]
 80009ae:	4013      	ands	r3, r2
 80009b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	689a      	ldr	r2, [r3, #8]
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	005b      	lsls	r3, r3, #1
 80009ba:	fa02 f303 	lsl.w	r3, r2, r3
 80009be:	693a      	ldr	r2, [r7, #16]
 80009c0:	4313      	orrs	r3, r2
 80009c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	693a      	ldr	r2, [r7, #16]
 80009c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	f003 0303 	and.w	r3, r3, #3
 80009d2:	2b02      	cmp	r3, #2
 80009d4:	d123      	bne.n	8000a1e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009d6:	697b      	ldr	r3, [r7, #20]
 80009d8:	08da      	lsrs	r2, r3, #3
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	3208      	adds	r2, #8
 80009de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	f003 0307 	and.w	r3, r3, #7
 80009ea:	009b      	lsls	r3, r3, #2
 80009ec:	220f      	movs	r2, #15
 80009ee:	fa02 f303 	lsl.w	r3, r2, r3
 80009f2:	43db      	mvns	r3, r3
 80009f4:	693a      	ldr	r2, [r7, #16]
 80009f6:	4013      	ands	r3, r2
 80009f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	691a      	ldr	r2, [r3, #16]
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	f003 0307 	and.w	r3, r3, #7
 8000a04:	009b      	lsls	r3, r3, #2
 8000a06:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0a:	693a      	ldr	r2, [r7, #16]
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	08da      	lsrs	r2, r3, #3
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	3208      	adds	r2, #8
 8000a18:	6939      	ldr	r1, [r7, #16]
 8000a1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	005b      	lsls	r3, r3, #1
 8000a28:	2203      	movs	r2, #3
 8000a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2e:	43db      	mvns	r3, r3
 8000a30:	693a      	ldr	r2, [r7, #16]
 8000a32:	4013      	ands	r3, r2
 8000a34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	f003 0203 	and.w	r2, r3, #3
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	005b      	lsls	r3, r3, #1
 8000a42:	fa02 f303 	lsl.w	r3, r2, r3
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	693a      	ldr	r2, [r7, #16]
 8000a50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	685b      	ldr	r3, [r3, #4]
 8000a56:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	f000 8094 	beq.w	8000b88 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a60:	4b52      	ldr	r3, [pc, #328]	; (8000bac <HAL_GPIO_Init+0x2c0>)
 8000a62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a64:	4a51      	ldr	r2, [pc, #324]	; (8000bac <HAL_GPIO_Init+0x2c0>)
 8000a66:	f043 0301 	orr.w	r3, r3, #1
 8000a6a:	6613      	str	r3, [r2, #96]	; 0x60
 8000a6c:	4b4f      	ldr	r3, [pc, #316]	; (8000bac <HAL_GPIO_Init+0x2c0>)
 8000a6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a70:	f003 0301 	and.w	r3, r3, #1
 8000a74:	60bb      	str	r3, [r7, #8]
 8000a76:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a78:	4a4d      	ldr	r2, [pc, #308]	; (8000bb0 <HAL_GPIO_Init+0x2c4>)
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	089b      	lsrs	r3, r3, #2
 8000a7e:	3302      	adds	r3, #2
 8000a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	f003 0303 	and.w	r3, r3, #3
 8000a8c:	009b      	lsls	r3, r3, #2
 8000a8e:	220f      	movs	r2, #15
 8000a90:	fa02 f303 	lsl.w	r3, r2, r3
 8000a94:	43db      	mvns	r3, r3
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	4013      	ands	r3, r2
 8000a9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000aa2:	d00d      	beq.n	8000ac0 <HAL_GPIO_Init+0x1d4>
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	4a43      	ldr	r2, [pc, #268]	; (8000bb4 <HAL_GPIO_Init+0x2c8>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d007      	beq.n	8000abc <HAL_GPIO_Init+0x1d0>
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	4a42      	ldr	r2, [pc, #264]	; (8000bb8 <HAL_GPIO_Init+0x2cc>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d101      	bne.n	8000ab8 <HAL_GPIO_Init+0x1cc>
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	e004      	b.n	8000ac2 <HAL_GPIO_Init+0x1d6>
 8000ab8:	2307      	movs	r3, #7
 8000aba:	e002      	b.n	8000ac2 <HAL_GPIO_Init+0x1d6>
 8000abc:	2301      	movs	r3, #1
 8000abe:	e000      	b.n	8000ac2 <HAL_GPIO_Init+0x1d6>
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	697a      	ldr	r2, [r7, #20]
 8000ac4:	f002 0203 	and.w	r2, r2, #3
 8000ac8:	0092      	lsls	r2, r2, #2
 8000aca:	4093      	lsls	r3, r2
 8000acc:	693a      	ldr	r2, [r7, #16]
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ad2:	4937      	ldr	r1, [pc, #220]	; (8000bb0 <HAL_GPIO_Init+0x2c4>)
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	089b      	lsrs	r3, r3, #2
 8000ad8:	3302      	adds	r3, #2
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ae0:	4b36      	ldr	r3, [pc, #216]	; (8000bbc <HAL_GPIO_Init+0x2d0>)
 8000ae2:	689b      	ldr	r3, [r3, #8]
 8000ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	43db      	mvns	r3, r3
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	4013      	ands	r3, r2
 8000aee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d003      	beq.n	8000b04 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000afc:	693a      	ldr	r2, [r7, #16]
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b04:	4a2d      	ldr	r2, [pc, #180]	; (8000bbc <HAL_GPIO_Init+0x2d0>)
 8000b06:	693b      	ldr	r3, [r7, #16]
 8000b08:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000b0a:	4b2c      	ldr	r3, [pc, #176]	; (8000bbc <HAL_GPIO_Init+0x2d0>)
 8000b0c:	68db      	ldr	r3, [r3, #12]
 8000b0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	43db      	mvns	r3, r3
 8000b14:	693a      	ldr	r2, [r7, #16]
 8000b16:	4013      	ands	r3, r2
 8000b18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d003      	beq.n	8000b2e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b2e:	4a23      	ldr	r2, [pc, #140]	; (8000bbc <HAL_GPIO_Init+0x2d0>)
 8000b30:	693b      	ldr	r3, [r7, #16]
 8000b32:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000b34:	4b21      	ldr	r3, [pc, #132]	; (8000bbc <HAL_GPIO_Init+0x2d0>)
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	43db      	mvns	r3, r3
 8000b3e:	693a      	ldr	r2, [r7, #16]
 8000b40:	4013      	ands	r3, r2
 8000b42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d003      	beq.n	8000b58 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000b50:	693a      	ldr	r2, [r7, #16]
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	4313      	orrs	r3, r2
 8000b56:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b58:	4a18      	ldr	r2, [pc, #96]	; (8000bbc <HAL_GPIO_Init+0x2d0>)
 8000b5a:	693b      	ldr	r3, [r7, #16]
 8000b5c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000b5e:	4b17      	ldr	r3, [pc, #92]	; (8000bbc <HAL_GPIO_Init+0x2d0>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	43db      	mvns	r3, r3
 8000b68:	693a      	ldr	r2, [r7, #16]
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d003      	beq.n	8000b82 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b82:	4a0e      	ldr	r2, [pc, #56]	; (8000bbc <HAL_GPIO_Init+0x2d0>)
 8000b84:	693b      	ldr	r3, [r7, #16]
 8000b86:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	fa22 f303 	lsr.w	r3, r2, r3
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	f47f aeaf 	bne.w	80008fc <HAL_GPIO_Init+0x10>
  }
}
 8000b9e:	bf00      	nop
 8000ba0:	bf00      	nop
 8000ba2:	371c      	adds	r7, #28
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	40021000 	.word	0x40021000
 8000bb0:	40010000 	.word	0x40010000
 8000bb4:	48000400 	.word	0x48000400
 8000bb8:	48000800 	.word	0x48000800
 8000bbc:	40010400 	.word	0x40010400

08000bc0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000bc4:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <HAL_PWREx_GetVoltageRange+0x18>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	40007000 	.word	0x40007000

08000bdc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bea:	d130      	bne.n	8000c4e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000bec:	4b23      	ldr	r3, [pc, #140]	; (8000c7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000bf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bf8:	d038      	beq.n	8000c6c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bfa:	4b20      	ldr	r3, [pc, #128]	; (8000c7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c02:	4a1e      	ldr	r2, [pc, #120]	; (8000c7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c08:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000c0a:	4b1d      	ldr	r3, [pc, #116]	; (8000c80 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	2232      	movs	r2, #50	; 0x32
 8000c10:	fb02 f303 	mul.w	r3, r2, r3
 8000c14:	4a1b      	ldr	r2, [pc, #108]	; (8000c84 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000c16:	fba2 2303 	umull	r2, r3, r2, r3
 8000c1a:	0c9b      	lsrs	r3, r3, #18
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c20:	e002      	b.n	8000c28 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	3b01      	subs	r3, #1
 8000c26:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c28:	4b14      	ldr	r3, [pc, #80]	; (8000c7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c2a:	695b      	ldr	r3, [r3, #20]
 8000c2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c34:	d102      	bne.n	8000c3c <HAL_PWREx_ControlVoltageScaling+0x60>
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d1f2      	bne.n	8000c22 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c3c:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c3e:	695b      	ldr	r3, [r3, #20]
 8000c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c48:	d110      	bne.n	8000c6c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	e00f      	b.n	8000c6e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000c4e:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c5a:	d007      	beq.n	8000c6c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c5c:	4b07      	ldr	r3, [pc, #28]	; (8000c7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c64:	4a05      	ldr	r2, [pc, #20]	; (8000c7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c6a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000c6c:	2300      	movs	r3, #0
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3714      	adds	r7, #20
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	40007000 	.word	0x40007000
 8000c80:	20000000 	.word	0x20000000
 8000c84:	431bde83 	.word	0x431bde83

08000c88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b088      	sub	sp, #32
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d102      	bne.n	8000c9c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
 8000c98:	f000 bc02 	b.w	80014a0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c9c:	4b96      	ldr	r3, [pc, #600]	; (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000c9e:	689b      	ldr	r3, [r3, #8]
 8000ca0:	f003 030c 	and.w	r3, r3, #12
 8000ca4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ca6:	4b94      	ldr	r3, [pc, #592]	; (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000ca8:	68db      	ldr	r3, [r3, #12]
 8000caa:	f003 0303 	and.w	r3, r3, #3
 8000cae:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f003 0310 	and.w	r3, r3, #16
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	f000 80e4 	beq.w	8000e86 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000cbe:	69bb      	ldr	r3, [r7, #24]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d007      	beq.n	8000cd4 <HAL_RCC_OscConfig+0x4c>
 8000cc4:	69bb      	ldr	r3, [r7, #24]
 8000cc6:	2b0c      	cmp	r3, #12
 8000cc8:	f040 808b 	bne.w	8000de2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	f040 8087 	bne.w	8000de2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000cd4:	4b88      	ldr	r3, [pc, #544]	; (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f003 0302 	and.w	r3, r3, #2
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d005      	beq.n	8000cec <HAL_RCC_OscConfig+0x64>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d101      	bne.n	8000cec <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	e3d9      	b.n	80014a0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6a1a      	ldr	r2, [r3, #32]
 8000cf0:	4b81      	ldr	r3, [pc, #516]	; (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f003 0308 	and.w	r3, r3, #8
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d004      	beq.n	8000d06 <HAL_RCC_OscConfig+0x7e>
 8000cfc:	4b7e      	ldr	r3, [pc, #504]	; (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d04:	e005      	b.n	8000d12 <HAL_RCC_OscConfig+0x8a>
 8000d06:	4b7c      	ldr	r3, [pc, #496]	; (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000d08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d0c:	091b      	lsrs	r3, r3, #4
 8000d0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d223      	bcs.n	8000d5e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6a1b      	ldr	r3, [r3, #32]
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f000 fd54 	bl	80017c8 <RCC_SetFlashLatencyFromMSIRange>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	e3ba      	b.n	80014a0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d2a:	4b73      	ldr	r3, [pc, #460]	; (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a72      	ldr	r2, [pc, #456]	; (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000d30:	f043 0308 	orr.w	r3, r3, #8
 8000d34:	6013      	str	r3, [r2, #0]
 8000d36:	4b70      	ldr	r3, [pc, #448]	; (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6a1b      	ldr	r3, [r3, #32]
 8000d42:	496d      	ldr	r1, [pc, #436]	; (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000d44:	4313      	orrs	r3, r2
 8000d46:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d48:	4b6b      	ldr	r3, [pc, #428]	; (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	69db      	ldr	r3, [r3, #28]
 8000d54:	021b      	lsls	r3, r3, #8
 8000d56:	4968      	ldr	r1, [pc, #416]	; (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	604b      	str	r3, [r1, #4]
 8000d5c:	e025      	b.n	8000daa <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d5e:	4b66      	ldr	r3, [pc, #408]	; (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a65      	ldr	r2, [pc, #404]	; (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000d64:	f043 0308 	orr.w	r3, r3, #8
 8000d68:	6013      	str	r3, [r2, #0]
 8000d6a:	4b63      	ldr	r3, [pc, #396]	; (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6a1b      	ldr	r3, [r3, #32]
 8000d76:	4960      	ldr	r1, [pc, #384]	; (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d7c:	4b5e      	ldr	r3, [pc, #376]	; (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	69db      	ldr	r3, [r3, #28]
 8000d88:	021b      	lsls	r3, r3, #8
 8000d8a:	495b      	ldr	r1, [pc, #364]	; (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000d90:	69bb      	ldr	r3, [r7, #24]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d109      	bne.n	8000daa <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6a1b      	ldr	r3, [r3, #32]
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f000 fd14 	bl	80017c8 <RCC_SetFlashLatencyFromMSIRange>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	e37a      	b.n	80014a0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000daa:	f000 fc81 	bl	80016b0 <HAL_RCC_GetSysClockFreq>
 8000dae:	4602      	mov	r2, r0
 8000db0:	4b51      	ldr	r3, [pc, #324]	; (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000db2:	689b      	ldr	r3, [r3, #8]
 8000db4:	091b      	lsrs	r3, r3, #4
 8000db6:	f003 030f 	and.w	r3, r3, #15
 8000dba:	4950      	ldr	r1, [pc, #320]	; (8000efc <HAL_RCC_OscConfig+0x274>)
 8000dbc:	5ccb      	ldrb	r3, [r1, r3]
 8000dbe:	f003 031f 	and.w	r3, r3, #31
 8000dc2:	fa22 f303 	lsr.w	r3, r2, r3
 8000dc6:	4a4e      	ldr	r2, [pc, #312]	; (8000f00 <HAL_RCC_OscConfig+0x278>)
 8000dc8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000dca:	4b4e      	ldr	r3, [pc, #312]	; (8000f04 <HAL_RCC_OscConfig+0x27c>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff fc1e 	bl	8000610 <HAL_InitTick>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000dd8:	7bfb      	ldrb	r3, [r7, #15]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d052      	beq.n	8000e84 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000dde:	7bfb      	ldrb	r3, [r7, #15]
 8000de0:	e35e      	b.n	80014a0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	699b      	ldr	r3, [r3, #24]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d032      	beq.n	8000e50 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000dea:	4b43      	ldr	r3, [pc, #268]	; (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a42      	ldr	r2, [pc, #264]	; (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000df0:	f043 0301 	orr.w	r3, r3, #1
 8000df4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000df6:	f7ff fc5b 	bl	80006b0 <HAL_GetTick>
 8000dfa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000dfc:	e008      	b.n	8000e10 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000dfe:	f7ff fc57 	bl	80006b0 <HAL_GetTick>
 8000e02:	4602      	mov	r2, r0
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	1ad3      	subs	r3, r2, r3
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	d901      	bls.n	8000e10 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	e347      	b.n	80014a0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e10:	4b39      	ldr	r3, [pc, #228]	; (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f003 0302 	and.w	r3, r3, #2
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d0f0      	beq.n	8000dfe <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e1c:	4b36      	ldr	r3, [pc, #216]	; (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a35      	ldr	r2, [pc, #212]	; (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000e22:	f043 0308 	orr.w	r3, r3, #8
 8000e26:	6013      	str	r3, [r2, #0]
 8000e28:	4b33      	ldr	r3, [pc, #204]	; (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6a1b      	ldr	r3, [r3, #32]
 8000e34:	4930      	ldr	r1, [pc, #192]	; (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000e36:	4313      	orrs	r3, r2
 8000e38:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e3a:	4b2f      	ldr	r3, [pc, #188]	; (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	69db      	ldr	r3, [r3, #28]
 8000e46:	021b      	lsls	r3, r3, #8
 8000e48:	492b      	ldr	r1, [pc, #172]	; (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	604b      	str	r3, [r1, #4]
 8000e4e:	e01a      	b.n	8000e86 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000e50:	4b29      	ldr	r3, [pc, #164]	; (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a28      	ldr	r2, [pc, #160]	; (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000e56:	f023 0301 	bic.w	r3, r3, #1
 8000e5a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e5c:	f7ff fc28 	bl	80006b0 <HAL_GetTick>
 8000e60:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e62:	e008      	b.n	8000e76 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e64:	f7ff fc24 	bl	80006b0 <HAL_GetTick>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	2b02      	cmp	r3, #2
 8000e70:	d901      	bls.n	8000e76 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8000e72:	2303      	movs	r3, #3
 8000e74:	e314      	b.n	80014a0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e76:	4b20      	ldr	r3, [pc, #128]	; (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f003 0302 	and.w	r3, r3, #2
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d1f0      	bne.n	8000e64 <HAL_RCC_OscConfig+0x1dc>
 8000e82:	e000      	b.n	8000e86 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e84:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d073      	beq.n	8000f7a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000e92:	69bb      	ldr	r3, [r7, #24]
 8000e94:	2b08      	cmp	r3, #8
 8000e96:	d005      	beq.n	8000ea4 <HAL_RCC_OscConfig+0x21c>
 8000e98:	69bb      	ldr	r3, [r7, #24]
 8000e9a:	2b0c      	cmp	r3, #12
 8000e9c:	d10e      	bne.n	8000ebc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	2b03      	cmp	r3, #3
 8000ea2:	d10b      	bne.n	8000ebc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ea4:	4b14      	ldr	r3, [pc, #80]	; (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d063      	beq.n	8000f78 <HAL_RCC_OscConfig+0x2f0>
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d15f      	bne.n	8000f78 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	e2f1      	b.n	80014a0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ec4:	d106      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x24c>
 8000ec6:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a0b      	ldr	r2, [pc, #44]	; (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000ecc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ed0:	6013      	str	r3, [r2, #0]
 8000ed2:	e025      	b.n	8000f20 <HAL_RCC_OscConfig+0x298>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000edc:	d114      	bne.n	8000f08 <HAL_RCC_OscConfig+0x280>
 8000ede:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a05      	ldr	r2, [pc, #20]	; (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000ee4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ee8:	6013      	str	r3, [r2, #0]
 8000eea:	4b03      	ldr	r3, [pc, #12]	; (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a02      	ldr	r2, [pc, #8]	; (8000ef8 <HAL_RCC_OscConfig+0x270>)
 8000ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ef4:	6013      	str	r3, [r2, #0]
 8000ef6:	e013      	b.n	8000f20 <HAL_RCC_OscConfig+0x298>
 8000ef8:	40021000 	.word	0x40021000
 8000efc:	0800280c 	.word	0x0800280c
 8000f00:	20000000 	.word	0x20000000
 8000f04:	20000004 	.word	0x20000004
 8000f08:	4ba0      	ldr	r3, [pc, #640]	; (800118c <HAL_RCC_OscConfig+0x504>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a9f      	ldr	r2, [pc, #636]	; (800118c <HAL_RCC_OscConfig+0x504>)
 8000f0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f12:	6013      	str	r3, [r2, #0]
 8000f14:	4b9d      	ldr	r3, [pc, #628]	; (800118c <HAL_RCC_OscConfig+0x504>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a9c      	ldr	r2, [pc, #624]	; (800118c <HAL_RCC_OscConfig+0x504>)
 8000f1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d013      	beq.n	8000f50 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f28:	f7ff fbc2 	bl	80006b0 <HAL_GetTick>
 8000f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f2e:	e008      	b.n	8000f42 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f30:	f7ff fbbe 	bl	80006b0 <HAL_GetTick>
 8000f34:	4602      	mov	r2, r0
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	2b64      	cmp	r3, #100	; 0x64
 8000f3c:	d901      	bls.n	8000f42 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	e2ae      	b.n	80014a0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f42:	4b92      	ldr	r3, [pc, #584]	; (800118c <HAL_RCC_OscConfig+0x504>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d0f0      	beq.n	8000f30 <HAL_RCC_OscConfig+0x2a8>
 8000f4e:	e014      	b.n	8000f7a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f50:	f7ff fbae 	bl	80006b0 <HAL_GetTick>
 8000f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f56:	e008      	b.n	8000f6a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f58:	f7ff fbaa 	bl	80006b0 <HAL_GetTick>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	2b64      	cmp	r3, #100	; 0x64
 8000f64:	d901      	bls.n	8000f6a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000f66:	2303      	movs	r3, #3
 8000f68:	e29a      	b.n	80014a0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f6a:	4b88      	ldr	r3, [pc, #544]	; (800118c <HAL_RCC_OscConfig+0x504>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d1f0      	bne.n	8000f58 <HAL_RCC_OscConfig+0x2d0>
 8000f76:	e000      	b.n	8000f7a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f003 0302 	and.w	r3, r3, #2
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d060      	beq.n	8001048 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000f86:	69bb      	ldr	r3, [r7, #24]
 8000f88:	2b04      	cmp	r3, #4
 8000f8a:	d005      	beq.n	8000f98 <HAL_RCC_OscConfig+0x310>
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	2b0c      	cmp	r3, #12
 8000f90:	d119      	bne.n	8000fc6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d116      	bne.n	8000fc6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f98:	4b7c      	ldr	r3, [pc, #496]	; (800118c <HAL_RCC_OscConfig+0x504>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d005      	beq.n	8000fb0 <HAL_RCC_OscConfig+0x328>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d101      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	e277      	b.n	80014a0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fb0:	4b76      	ldr	r3, [pc, #472]	; (800118c <HAL_RCC_OscConfig+0x504>)
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	691b      	ldr	r3, [r3, #16]
 8000fbc:	061b      	lsls	r3, r3, #24
 8000fbe:	4973      	ldr	r1, [pc, #460]	; (800118c <HAL_RCC_OscConfig+0x504>)
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fc4:	e040      	b.n	8001048 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	68db      	ldr	r3, [r3, #12]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d023      	beq.n	8001016 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fce:	4b6f      	ldr	r3, [pc, #444]	; (800118c <HAL_RCC_OscConfig+0x504>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a6e      	ldr	r2, [pc, #440]	; (800118c <HAL_RCC_OscConfig+0x504>)
 8000fd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fda:	f7ff fb69 	bl	80006b0 <HAL_GetTick>
 8000fde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000fe0:	e008      	b.n	8000ff4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fe2:	f7ff fb65 	bl	80006b0 <HAL_GetTick>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	d901      	bls.n	8000ff4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	e255      	b.n	80014a0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000ff4:	4b65      	ldr	r3, [pc, #404]	; (800118c <HAL_RCC_OscConfig+0x504>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d0f0      	beq.n	8000fe2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001000:	4b62      	ldr	r3, [pc, #392]	; (800118c <HAL_RCC_OscConfig+0x504>)
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	691b      	ldr	r3, [r3, #16]
 800100c:	061b      	lsls	r3, r3, #24
 800100e:	495f      	ldr	r1, [pc, #380]	; (800118c <HAL_RCC_OscConfig+0x504>)
 8001010:	4313      	orrs	r3, r2
 8001012:	604b      	str	r3, [r1, #4]
 8001014:	e018      	b.n	8001048 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001016:	4b5d      	ldr	r3, [pc, #372]	; (800118c <HAL_RCC_OscConfig+0x504>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a5c      	ldr	r2, [pc, #368]	; (800118c <HAL_RCC_OscConfig+0x504>)
 800101c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001020:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001022:	f7ff fb45 	bl	80006b0 <HAL_GetTick>
 8001026:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001028:	e008      	b.n	800103c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800102a:	f7ff fb41 	bl	80006b0 <HAL_GetTick>
 800102e:	4602      	mov	r2, r0
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	2b02      	cmp	r3, #2
 8001036:	d901      	bls.n	800103c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001038:	2303      	movs	r3, #3
 800103a:	e231      	b.n	80014a0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800103c:	4b53      	ldr	r3, [pc, #332]	; (800118c <HAL_RCC_OscConfig+0x504>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001044:	2b00      	cmp	r3, #0
 8001046:	d1f0      	bne.n	800102a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f003 0308 	and.w	r3, r3, #8
 8001050:	2b00      	cmp	r3, #0
 8001052:	d03c      	beq.n	80010ce <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	695b      	ldr	r3, [r3, #20]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d01c      	beq.n	8001096 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800105c:	4b4b      	ldr	r3, [pc, #300]	; (800118c <HAL_RCC_OscConfig+0x504>)
 800105e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001062:	4a4a      	ldr	r2, [pc, #296]	; (800118c <HAL_RCC_OscConfig+0x504>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800106c:	f7ff fb20 	bl	80006b0 <HAL_GetTick>
 8001070:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001072:	e008      	b.n	8001086 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001074:	f7ff fb1c 	bl	80006b0 <HAL_GetTick>
 8001078:	4602      	mov	r2, r0
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	2b02      	cmp	r3, #2
 8001080:	d901      	bls.n	8001086 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001082:	2303      	movs	r3, #3
 8001084:	e20c      	b.n	80014a0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001086:	4b41      	ldr	r3, [pc, #260]	; (800118c <HAL_RCC_OscConfig+0x504>)
 8001088:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800108c:	f003 0302 	and.w	r3, r3, #2
 8001090:	2b00      	cmp	r3, #0
 8001092:	d0ef      	beq.n	8001074 <HAL_RCC_OscConfig+0x3ec>
 8001094:	e01b      	b.n	80010ce <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001096:	4b3d      	ldr	r3, [pc, #244]	; (800118c <HAL_RCC_OscConfig+0x504>)
 8001098:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800109c:	4a3b      	ldr	r2, [pc, #236]	; (800118c <HAL_RCC_OscConfig+0x504>)
 800109e:	f023 0301 	bic.w	r3, r3, #1
 80010a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010a6:	f7ff fb03 	bl	80006b0 <HAL_GetTick>
 80010aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80010ac:	e008      	b.n	80010c0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010ae:	f7ff faff 	bl	80006b0 <HAL_GetTick>
 80010b2:	4602      	mov	r2, r0
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d901      	bls.n	80010c0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80010bc:	2303      	movs	r3, #3
 80010be:	e1ef      	b.n	80014a0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80010c0:	4b32      	ldr	r3, [pc, #200]	; (800118c <HAL_RCC_OscConfig+0x504>)
 80010c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010c6:	f003 0302 	and.w	r3, r3, #2
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d1ef      	bne.n	80010ae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 0304 	and.w	r3, r3, #4
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	f000 80a6 	beq.w	8001228 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010dc:	2300      	movs	r3, #0
 80010de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80010e0:	4b2a      	ldr	r3, [pc, #168]	; (800118c <HAL_RCC_OscConfig+0x504>)
 80010e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d10d      	bne.n	8001108 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010ec:	4b27      	ldr	r3, [pc, #156]	; (800118c <HAL_RCC_OscConfig+0x504>)
 80010ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010f0:	4a26      	ldr	r2, [pc, #152]	; (800118c <HAL_RCC_OscConfig+0x504>)
 80010f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010f6:	6593      	str	r3, [r2, #88]	; 0x58
 80010f8:	4b24      	ldr	r3, [pc, #144]	; (800118c <HAL_RCC_OscConfig+0x504>)
 80010fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001100:	60bb      	str	r3, [r7, #8]
 8001102:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001104:	2301      	movs	r3, #1
 8001106:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001108:	4b21      	ldr	r3, [pc, #132]	; (8001190 <HAL_RCC_OscConfig+0x508>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001110:	2b00      	cmp	r3, #0
 8001112:	d118      	bne.n	8001146 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001114:	4b1e      	ldr	r3, [pc, #120]	; (8001190 <HAL_RCC_OscConfig+0x508>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a1d      	ldr	r2, [pc, #116]	; (8001190 <HAL_RCC_OscConfig+0x508>)
 800111a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800111e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001120:	f7ff fac6 	bl	80006b0 <HAL_GetTick>
 8001124:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001126:	e008      	b.n	800113a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001128:	f7ff fac2 	bl	80006b0 <HAL_GetTick>
 800112c:	4602      	mov	r2, r0
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	2b02      	cmp	r3, #2
 8001134:	d901      	bls.n	800113a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001136:	2303      	movs	r3, #3
 8001138:	e1b2      	b.n	80014a0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800113a:	4b15      	ldr	r3, [pc, #84]	; (8001190 <HAL_RCC_OscConfig+0x508>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001142:	2b00      	cmp	r3, #0
 8001144:	d0f0      	beq.n	8001128 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	2b01      	cmp	r3, #1
 800114c:	d108      	bne.n	8001160 <HAL_RCC_OscConfig+0x4d8>
 800114e:	4b0f      	ldr	r3, [pc, #60]	; (800118c <HAL_RCC_OscConfig+0x504>)
 8001150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001154:	4a0d      	ldr	r2, [pc, #52]	; (800118c <HAL_RCC_OscConfig+0x504>)
 8001156:	f043 0301 	orr.w	r3, r3, #1
 800115a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800115e:	e029      	b.n	80011b4 <HAL_RCC_OscConfig+0x52c>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	2b05      	cmp	r3, #5
 8001166:	d115      	bne.n	8001194 <HAL_RCC_OscConfig+0x50c>
 8001168:	4b08      	ldr	r3, [pc, #32]	; (800118c <HAL_RCC_OscConfig+0x504>)
 800116a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800116e:	4a07      	ldr	r2, [pc, #28]	; (800118c <HAL_RCC_OscConfig+0x504>)
 8001170:	f043 0304 	orr.w	r3, r3, #4
 8001174:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001178:	4b04      	ldr	r3, [pc, #16]	; (800118c <HAL_RCC_OscConfig+0x504>)
 800117a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800117e:	4a03      	ldr	r2, [pc, #12]	; (800118c <HAL_RCC_OscConfig+0x504>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001188:	e014      	b.n	80011b4 <HAL_RCC_OscConfig+0x52c>
 800118a:	bf00      	nop
 800118c:	40021000 	.word	0x40021000
 8001190:	40007000 	.word	0x40007000
 8001194:	4b9a      	ldr	r3, [pc, #616]	; (8001400 <HAL_RCC_OscConfig+0x778>)
 8001196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800119a:	4a99      	ldr	r2, [pc, #612]	; (8001400 <HAL_RCC_OscConfig+0x778>)
 800119c:	f023 0301 	bic.w	r3, r3, #1
 80011a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80011a4:	4b96      	ldr	r3, [pc, #600]	; (8001400 <HAL_RCC_OscConfig+0x778>)
 80011a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011aa:	4a95      	ldr	r2, [pc, #596]	; (8001400 <HAL_RCC_OscConfig+0x778>)
 80011ac:	f023 0304 	bic.w	r3, r3, #4
 80011b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d016      	beq.n	80011ea <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011bc:	f7ff fa78 	bl	80006b0 <HAL_GetTick>
 80011c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011c2:	e00a      	b.n	80011da <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011c4:	f7ff fa74 	bl	80006b0 <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d901      	bls.n	80011da <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e162      	b.n	80014a0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011da:	4b89      	ldr	r3, [pc, #548]	; (8001400 <HAL_RCC_OscConfig+0x778>)
 80011dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011e0:	f003 0302 	and.w	r3, r3, #2
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d0ed      	beq.n	80011c4 <HAL_RCC_OscConfig+0x53c>
 80011e8:	e015      	b.n	8001216 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011ea:	f7ff fa61 	bl	80006b0 <HAL_GetTick>
 80011ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011f0:	e00a      	b.n	8001208 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011f2:	f7ff fa5d 	bl	80006b0 <HAL_GetTick>
 80011f6:	4602      	mov	r2, r0
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001200:	4293      	cmp	r3, r2
 8001202:	d901      	bls.n	8001208 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001204:	2303      	movs	r3, #3
 8001206:	e14b      	b.n	80014a0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001208:	4b7d      	ldr	r3, [pc, #500]	; (8001400 <HAL_RCC_OscConfig+0x778>)
 800120a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	2b00      	cmp	r3, #0
 8001214:	d1ed      	bne.n	80011f2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001216:	7ffb      	ldrb	r3, [r7, #31]
 8001218:	2b01      	cmp	r3, #1
 800121a:	d105      	bne.n	8001228 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800121c:	4b78      	ldr	r3, [pc, #480]	; (8001400 <HAL_RCC_OscConfig+0x778>)
 800121e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001220:	4a77      	ldr	r2, [pc, #476]	; (8001400 <HAL_RCC_OscConfig+0x778>)
 8001222:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001226:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f003 0320 	and.w	r3, r3, #32
 8001230:	2b00      	cmp	r3, #0
 8001232:	d03c      	beq.n	80012ae <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001238:	2b00      	cmp	r3, #0
 800123a:	d01c      	beq.n	8001276 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800123c:	4b70      	ldr	r3, [pc, #448]	; (8001400 <HAL_RCC_OscConfig+0x778>)
 800123e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001242:	4a6f      	ldr	r2, [pc, #444]	; (8001400 <HAL_RCC_OscConfig+0x778>)
 8001244:	f043 0301 	orr.w	r3, r3, #1
 8001248:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800124c:	f7ff fa30 	bl	80006b0 <HAL_GetTick>
 8001250:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001252:	e008      	b.n	8001266 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001254:	f7ff fa2c 	bl	80006b0 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b02      	cmp	r3, #2
 8001260:	d901      	bls.n	8001266 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e11c      	b.n	80014a0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001266:	4b66      	ldr	r3, [pc, #408]	; (8001400 <HAL_RCC_OscConfig+0x778>)
 8001268:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800126c:	f003 0302 	and.w	r3, r3, #2
 8001270:	2b00      	cmp	r3, #0
 8001272:	d0ef      	beq.n	8001254 <HAL_RCC_OscConfig+0x5cc>
 8001274:	e01b      	b.n	80012ae <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001276:	4b62      	ldr	r3, [pc, #392]	; (8001400 <HAL_RCC_OscConfig+0x778>)
 8001278:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800127c:	4a60      	ldr	r2, [pc, #384]	; (8001400 <HAL_RCC_OscConfig+0x778>)
 800127e:	f023 0301 	bic.w	r3, r3, #1
 8001282:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001286:	f7ff fa13 	bl	80006b0 <HAL_GetTick>
 800128a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800128c:	e008      	b.n	80012a0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800128e:	f7ff fa0f 	bl	80006b0 <HAL_GetTick>
 8001292:	4602      	mov	r2, r0
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	2b02      	cmp	r3, #2
 800129a:	d901      	bls.n	80012a0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800129c:	2303      	movs	r3, #3
 800129e:	e0ff      	b.n	80014a0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80012a0:	4b57      	ldr	r3, [pc, #348]	; (8001400 <HAL_RCC_OscConfig+0x778>)
 80012a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d1ef      	bne.n	800128e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	f000 80f3 	beq.w	800149e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012bc:	2b02      	cmp	r3, #2
 80012be:	f040 80c9 	bne.w	8001454 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80012c2:	4b4f      	ldr	r3, [pc, #316]	; (8001400 <HAL_RCC_OscConfig+0x778>)
 80012c4:	68db      	ldr	r3, [r3, #12]
 80012c6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	f003 0203 	and.w	r2, r3, #3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d12c      	bne.n	8001330 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e0:	3b01      	subs	r3, #1
 80012e2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d123      	bne.n	8001330 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012f2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d11b      	bne.n	8001330 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001302:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001304:	429a      	cmp	r2, r3
 8001306:	d113      	bne.n	8001330 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001312:	085b      	lsrs	r3, r3, #1
 8001314:	3b01      	subs	r3, #1
 8001316:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001318:	429a      	cmp	r2, r3
 800131a:	d109      	bne.n	8001330 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001326:	085b      	lsrs	r3, r3, #1
 8001328:	3b01      	subs	r3, #1
 800132a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800132c:	429a      	cmp	r2, r3
 800132e:	d06b      	beq.n	8001408 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	2b0c      	cmp	r3, #12
 8001334:	d062      	beq.n	80013fc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001336:	4b32      	ldr	r3, [pc, #200]	; (8001400 <HAL_RCC_OscConfig+0x778>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e0ac      	b.n	80014a0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001346:	4b2e      	ldr	r3, [pc, #184]	; (8001400 <HAL_RCC_OscConfig+0x778>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a2d      	ldr	r2, [pc, #180]	; (8001400 <HAL_RCC_OscConfig+0x778>)
 800134c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001350:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001352:	f7ff f9ad 	bl	80006b0 <HAL_GetTick>
 8001356:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001358:	e008      	b.n	800136c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800135a:	f7ff f9a9 	bl	80006b0 <HAL_GetTick>
 800135e:	4602      	mov	r2, r0
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	2b02      	cmp	r3, #2
 8001366:	d901      	bls.n	800136c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001368:	2303      	movs	r3, #3
 800136a:	e099      	b.n	80014a0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800136c:	4b24      	ldr	r3, [pc, #144]	; (8001400 <HAL_RCC_OscConfig+0x778>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001374:	2b00      	cmp	r3, #0
 8001376:	d1f0      	bne.n	800135a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001378:	4b21      	ldr	r3, [pc, #132]	; (8001400 <HAL_RCC_OscConfig+0x778>)
 800137a:	68da      	ldr	r2, [r3, #12]
 800137c:	4b21      	ldr	r3, [pc, #132]	; (8001404 <HAL_RCC_OscConfig+0x77c>)
 800137e:	4013      	ands	r3, r2
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001388:	3a01      	subs	r2, #1
 800138a:	0112      	lsls	r2, r2, #4
 800138c:	4311      	orrs	r1, r2
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001392:	0212      	lsls	r2, r2, #8
 8001394:	4311      	orrs	r1, r2
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800139a:	0852      	lsrs	r2, r2, #1
 800139c:	3a01      	subs	r2, #1
 800139e:	0552      	lsls	r2, r2, #21
 80013a0:	4311      	orrs	r1, r2
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80013a6:	0852      	lsrs	r2, r2, #1
 80013a8:	3a01      	subs	r2, #1
 80013aa:	0652      	lsls	r2, r2, #25
 80013ac:	4311      	orrs	r1, r2
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80013b2:	06d2      	lsls	r2, r2, #27
 80013b4:	430a      	orrs	r2, r1
 80013b6:	4912      	ldr	r1, [pc, #72]	; (8001400 <HAL_RCC_OscConfig+0x778>)
 80013b8:	4313      	orrs	r3, r2
 80013ba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80013bc:	4b10      	ldr	r3, [pc, #64]	; (8001400 <HAL_RCC_OscConfig+0x778>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a0f      	ldr	r2, [pc, #60]	; (8001400 <HAL_RCC_OscConfig+0x778>)
 80013c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013c6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80013c8:	4b0d      	ldr	r3, [pc, #52]	; (8001400 <HAL_RCC_OscConfig+0x778>)
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	4a0c      	ldr	r2, [pc, #48]	; (8001400 <HAL_RCC_OscConfig+0x778>)
 80013ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013d2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80013d4:	f7ff f96c 	bl	80006b0 <HAL_GetTick>
 80013d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013da:	e008      	b.n	80013ee <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013dc:	f7ff f968 	bl	80006b0 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e058      	b.n	80014a0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013ee:	4b04      	ldr	r3, [pc, #16]	; (8001400 <HAL_RCC_OscConfig+0x778>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d0f0      	beq.n	80013dc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80013fa:	e050      	b.n	800149e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e04f      	b.n	80014a0 <HAL_RCC_OscConfig+0x818>
 8001400:	40021000 	.word	0x40021000
 8001404:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001408:	4b27      	ldr	r3, [pc, #156]	; (80014a8 <HAL_RCC_OscConfig+0x820>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d144      	bne.n	800149e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001414:	4b24      	ldr	r3, [pc, #144]	; (80014a8 <HAL_RCC_OscConfig+0x820>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a23      	ldr	r2, [pc, #140]	; (80014a8 <HAL_RCC_OscConfig+0x820>)
 800141a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800141e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001420:	4b21      	ldr	r3, [pc, #132]	; (80014a8 <HAL_RCC_OscConfig+0x820>)
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	4a20      	ldr	r2, [pc, #128]	; (80014a8 <HAL_RCC_OscConfig+0x820>)
 8001426:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800142a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800142c:	f7ff f940 	bl	80006b0 <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001434:	f7ff f93c 	bl	80006b0 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e02c      	b.n	80014a0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001446:	4b18      	ldr	r3, [pc, #96]	; (80014a8 <HAL_RCC_OscConfig+0x820>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d0f0      	beq.n	8001434 <HAL_RCC_OscConfig+0x7ac>
 8001452:	e024      	b.n	800149e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	2b0c      	cmp	r3, #12
 8001458:	d01f      	beq.n	800149a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800145a:	4b13      	ldr	r3, [pc, #76]	; (80014a8 <HAL_RCC_OscConfig+0x820>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a12      	ldr	r2, [pc, #72]	; (80014a8 <HAL_RCC_OscConfig+0x820>)
 8001460:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001464:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001466:	f7ff f923 	bl	80006b0 <HAL_GetTick>
 800146a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800146c:	e008      	b.n	8001480 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800146e:	f7ff f91f 	bl	80006b0 <HAL_GetTick>
 8001472:	4602      	mov	r2, r0
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	2b02      	cmp	r3, #2
 800147a:	d901      	bls.n	8001480 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e00f      	b.n	80014a0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001480:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <HAL_RCC_OscConfig+0x820>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d1f0      	bne.n	800146e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800148c:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <HAL_RCC_OscConfig+0x820>)
 800148e:	68da      	ldr	r2, [r3, #12]
 8001490:	4905      	ldr	r1, [pc, #20]	; (80014a8 <HAL_RCC_OscConfig+0x820>)
 8001492:	4b06      	ldr	r3, [pc, #24]	; (80014ac <HAL_RCC_OscConfig+0x824>)
 8001494:	4013      	ands	r3, r2
 8001496:	60cb      	str	r3, [r1, #12]
 8001498:	e001      	b.n	800149e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e000      	b.n	80014a0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800149e:	2300      	movs	r3, #0
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3720      	adds	r7, #32
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40021000 	.word	0x40021000
 80014ac:	feeefffc 	.word	0xfeeefffc

080014b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d101      	bne.n	80014c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e0e7      	b.n	8001694 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014c4:	4b75      	ldr	r3, [pc, #468]	; (800169c <HAL_RCC_ClockConfig+0x1ec>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0307 	and.w	r3, r3, #7
 80014cc:	683a      	ldr	r2, [r7, #0]
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d910      	bls.n	80014f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014d2:	4b72      	ldr	r3, [pc, #456]	; (800169c <HAL_RCC_ClockConfig+0x1ec>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f023 0207 	bic.w	r2, r3, #7
 80014da:	4970      	ldr	r1, [pc, #448]	; (800169c <HAL_RCC_ClockConfig+0x1ec>)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	4313      	orrs	r3, r2
 80014e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014e2:	4b6e      	ldr	r3, [pc, #440]	; (800169c <HAL_RCC_ClockConfig+0x1ec>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0307 	and.w	r3, r3, #7
 80014ea:	683a      	ldr	r2, [r7, #0]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d001      	beq.n	80014f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	e0cf      	b.n	8001694 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0302 	and.w	r3, r3, #2
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d010      	beq.n	8001522 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689a      	ldr	r2, [r3, #8]
 8001504:	4b66      	ldr	r3, [pc, #408]	; (80016a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800150c:	429a      	cmp	r2, r3
 800150e:	d908      	bls.n	8001522 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001510:	4b63      	ldr	r3, [pc, #396]	; (80016a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	4960      	ldr	r1, [pc, #384]	; (80016a0 <HAL_RCC_ClockConfig+0x1f0>)
 800151e:	4313      	orrs	r3, r2
 8001520:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	2b00      	cmp	r3, #0
 800152c:	d04c      	beq.n	80015c8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	2b03      	cmp	r3, #3
 8001534:	d107      	bne.n	8001546 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001536:	4b5a      	ldr	r3, [pc, #360]	; (80016a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d121      	bne.n	8001586 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e0a6      	b.n	8001694 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	2b02      	cmp	r3, #2
 800154c:	d107      	bne.n	800155e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800154e:	4b54      	ldr	r3, [pc, #336]	; (80016a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d115      	bne.n	8001586 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e09a      	b.n	8001694 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d107      	bne.n	8001576 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001566:	4b4e      	ldr	r3, [pc, #312]	; (80016a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	2b00      	cmp	r3, #0
 8001570:	d109      	bne.n	8001586 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e08e      	b.n	8001694 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001576:	4b4a      	ldr	r3, [pc, #296]	; (80016a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800157e:	2b00      	cmp	r3, #0
 8001580:	d101      	bne.n	8001586 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e086      	b.n	8001694 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001586:	4b46      	ldr	r3, [pc, #280]	; (80016a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	f023 0203 	bic.w	r2, r3, #3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	4943      	ldr	r1, [pc, #268]	; (80016a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001594:	4313      	orrs	r3, r2
 8001596:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001598:	f7ff f88a 	bl	80006b0 <HAL_GetTick>
 800159c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800159e:	e00a      	b.n	80015b6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015a0:	f7ff f886 	bl	80006b0 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e06e      	b.n	8001694 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015b6:	4b3a      	ldr	r3, [pc, #232]	; (80016a0 <HAL_RCC_ClockConfig+0x1f0>)
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	f003 020c 	and.w	r2, r3, #12
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d1eb      	bne.n	80015a0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0302 	and.w	r3, r3, #2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d010      	beq.n	80015f6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689a      	ldr	r2, [r3, #8]
 80015d8:	4b31      	ldr	r3, [pc, #196]	; (80016a0 <HAL_RCC_ClockConfig+0x1f0>)
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d208      	bcs.n	80015f6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015e4:	4b2e      	ldr	r3, [pc, #184]	; (80016a0 <HAL_RCC_ClockConfig+0x1f0>)
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	492b      	ldr	r1, [pc, #172]	; (80016a0 <HAL_RCC_ClockConfig+0x1f0>)
 80015f2:	4313      	orrs	r3, r2
 80015f4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015f6:	4b29      	ldr	r3, [pc, #164]	; (800169c <HAL_RCC_ClockConfig+0x1ec>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0307 	and.w	r3, r3, #7
 80015fe:	683a      	ldr	r2, [r7, #0]
 8001600:	429a      	cmp	r2, r3
 8001602:	d210      	bcs.n	8001626 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001604:	4b25      	ldr	r3, [pc, #148]	; (800169c <HAL_RCC_ClockConfig+0x1ec>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f023 0207 	bic.w	r2, r3, #7
 800160c:	4923      	ldr	r1, [pc, #140]	; (800169c <HAL_RCC_ClockConfig+0x1ec>)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	4313      	orrs	r3, r2
 8001612:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001614:	4b21      	ldr	r3, [pc, #132]	; (800169c <HAL_RCC_ClockConfig+0x1ec>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0307 	and.w	r3, r3, #7
 800161c:	683a      	ldr	r2, [r7, #0]
 800161e:	429a      	cmp	r2, r3
 8001620:	d001      	beq.n	8001626 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e036      	b.n	8001694 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0304 	and.w	r3, r3, #4
 800162e:	2b00      	cmp	r3, #0
 8001630:	d008      	beq.n	8001644 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001632:	4b1b      	ldr	r3, [pc, #108]	; (80016a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	68db      	ldr	r3, [r3, #12]
 800163e:	4918      	ldr	r1, [pc, #96]	; (80016a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001640:	4313      	orrs	r3, r2
 8001642:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0308 	and.w	r3, r3, #8
 800164c:	2b00      	cmp	r3, #0
 800164e:	d009      	beq.n	8001664 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001650:	4b13      	ldr	r3, [pc, #76]	; (80016a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	691b      	ldr	r3, [r3, #16]
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	4910      	ldr	r1, [pc, #64]	; (80016a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001660:	4313      	orrs	r3, r2
 8001662:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001664:	f000 f824 	bl	80016b0 <HAL_RCC_GetSysClockFreq>
 8001668:	4602      	mov	r2, r0
 800166a:	4b0d      	ldr	r3, [pc, #52]	; (80016a0 <HAL_RCC_ClockConfig+0x1f0>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	091b      	lsrs	r3, r3, #4
 8001670:	f003 030f 	and.w	r3, r3, #15
 8001674:	490b      	ldr	r1, [pc, #44]	; (80016a4 <HAL_RCC_ClockConfig+0x1f4>)
 8001676:	5ccb      	ldrb	r3, [r1, r3]
 8001678:	f003 031f 	and.w	r3, r3, #31
 800167c:	fa22 f303 	lsr.w	r3, r2, r3
 8001680:	4a09      	ldr	r2, [pc, #36]	; (80016a8 <HAL_RCC_ClockConfig+0x1f8>)
 8001682:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001684:	4b09      	ldr	r3, [pc, #36]	; (80016ac <HAL_RCC_ClockConfig+0x1fc>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4618      	mov	r0, r3
 800168a:	f7fe ffc1 	bl	8000610 <HAL_InitTick>
 800168e:	4603      	mov	r3, r0
 8001690:	72fb      	strb	r3, [r7, #11]

  return status;
 8001692:	7afb      	ldrb	r3, [r7, #11]
}
 8001694:	4618      	mov	r0, r3
 8001696:	3710      	adds	r7, #16
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40022000 	.word	0x40022000
 80016a0:	40021000 	.word	0x40021000
 80016a4:	0800280c 	.word	0x0800280c
 80016a8:	20000000 	.word	0x20000000
 80016ac:	20000004 	.word	0x20000004

080016b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b089      	sub	sp, #36	; 0x24
 80016b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80016b6:	2300      	movs	r3, #0
 80016b8:	61fb      	str	r3, [r7, #28]
 80016ba:	2300      	movs	r3, #0
 80016bc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016be:	4b3e      	ldr	r3, [pc, #248]	; (80017b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f003 030c 	and.w	r3, r3, #12
 80016c6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016c8:	4b3b      	ldr	r3, [pc, #236]	; (80017b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	f003 0303 	and.w	r3, r3, #3
 80016d0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d005      	beq.n	80016e4 <HAL_RCC_GetSysClockFreq+0x34>
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	2b0c      	cmp	r3, #12
 80016dc:	d121      	bne.n	8001722 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d11e      	bne.n	8001722 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80016e4:	4b34      	ldr	r3, [pc, #208]	; (80017b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0308 	and.w	r3, r3, #8
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d107      	bne.n	8001700 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80016f0:	4b31      	ldr	r3, [pc, #196]	; (80017b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80016f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016f6:	0a1b      	lsrs	r3, r3, #8
 80016f8:	f003 030f 	and.w	r3, r3, #15
 80016fc:	61fb      	str	r3, [r7, #28]
 80016fe:	e005      	b.n	800170c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001700:	4b2d      	ldr	r3, [pc, #180]	; (80017b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	091b      	lsrs	r3, r3, #4
 8001706:	f003 030f 	and.w	r3, r3, #15
 800170a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800170c:	4a2b      	ldr	r2, [pc, #172]	; (80017bc <HAL_RCC_GetSysClockFreq+0x10c>)
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001714:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d10d      	bne.n	8001738 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001720:	e00a      	b.n	8001738 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	2b04      	cmp	r3, #4
 8001726:	d102      	bne.n	800172e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001728:	4b25      	ldr	r3, [pc, #148]	; (80017c0 <HAL_RCC_GetSysClockFreq+0x110>)
 800172a:	61bb      	str	r3, [r7, #24]
 800172c:	e004      	b.n	8001738 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	2b08      	cmp	r3, #8
 8001732:	d101      	bne.n	8001738 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001734:	4b23      	ldr	r3, [pc, #140]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001736:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	2b0c      	cmp	r3, #12
 800173c:	d134      	bne.n	80017a8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800173e:	4b1e      	ldr	r3, [pc, #120]	; (80017b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	f003 0303 	and.w	r3, r3, #3
 8001746:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	2b02      	cmp	r3, #2
 800174c:	d003      	beq.n	8001756 <HAL_RCC_GetSysClockFreq+0xa6>
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	2b03      	cmp	r3, #3
 8001752:	d003      	beq.n	800175c <HAL_RCC_GetSysClockFreq+0xac>
 8001754:	e005      	b.n	8001762 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001756:	4b1a      	ldr	r3, [pc, #104]	; (80017c0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001758:	617b      	str	r3, [r7, #20]
      break;
 800175a:	e005      	b.n	8001768 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800175c:	4b19      	ldr	r3, [pc, #100]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x114>)
 800175e:	617b      	str	r3, [r7, #20]
      break;
 8001760:	e002      	b.n	8001768 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	617b      	str	r3, [r7, #20]
      break;
 8001766:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001768:	4b13      	ldr	r3, [pc, #76]	; (80017b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	091b      	lsrs	r3, r3, #4
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	3301      	adds	r3, #1
 8001774:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001776:	4b10      	ldr	r3, [pc, #64]	; (80017b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001778:	68db      	ldr	r3, [r3, #12]
 800177a:	0a1b      	lsrs	r3, r3, #8
 800177c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001780:	697a      	ldr	r2, [r7, #20]
 8001782:	fb03 f202 	mul.w	r2, r3, r2
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	fbb2 f3f3 	udiv	r3, r2, r3
 800178c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800178e:	4b0a      	ldr	r3, [pc, #40]	; (80017b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	0e5b      	lsrs	r3, r3, #25
 8001794:	f003 0303 	and.w	r3, r3, #3
 8001798:	3301      	adds	r3, #1
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800179e:	697a      	ldr	r2, [r7, #20]
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80017a8:	69bb      	ldr	r3, [r7, #24]
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3724      	adds	r7, #36	; 0x24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	40021000 	.word	0x40021000
 80017bc:	0800281c 	.word	0x0800281c
 80017c0:	00f42400 	.word	0x00f42400
 80017c4:	007a1200 	.word	0x007a1200

080017c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80017d0:	2300      	movs	r3, #0
 80017d2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80017d4:	4b2a      	ldr	r3, [pc, #168]	; (8001880 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d003      	beq.n	80017e8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80017e0:	f7ff f9ee 	bl	8000bc0 <HAL_PWREx_GetVoltageRange>
 80017e4:	6178      	str	r0, [r7, #20]
 80017e6:	e014      	b.n	8001812 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80017e8:	4b25      	ldr	r3, [pc, #148]	; (8001880 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ec:	4a24      	ldr	r2, [pc, #144]	; (8001880 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017f2:	6593      	str	r3, [r2, #88]	; 0x58
 80017f4:	4b22      	ldr	r3, [pc, #136]	; (8001880 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001800:	f7ff f9de 	bl	8000bc0 <HAL_PWREx_GetVoltageRange>
 8001804:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001806:	4b1e      	ldr	r3, [pc, #120]	; (8001880 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800180a:	4a1d      	ldr	r2, [pc, #116]	; (8001880 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800180c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001810:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001818:	d10b      	bne.n	8001832 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2b80      	cmp	r3, #128	; 0x80
 800181e:	d919      	bls.n	8001854 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2ba0      	cmp	r3, #160	; 0xa0
 8001824:	d902      	bls.n	800182c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001826:	2302      	movs	r3, #2
 8001828:	613b      	str	r3, [r7, #16]
 800182a:	e013      	b.n	8001854 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800182c:	2301      	movs	r3, #1
 800182e:	613b      	str	r3, [r7, #16]
 8001830:	e010      	b.n	8001854 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2b80      	cmp	r3, #128	; 0x80
 8001836:	d902      	bls.n	800183e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001838:	2303      	movs	r3, #3
 800183a:	613b      	str	r3, [r7, #16]
 800183c:	e00a      	b.n	8001854 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2b80      	cmp	r3, #128	; 0x80
 8001842:	d102      	bne.n	800184a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001844:	2302      	movs	r3, #2
 8001846:	613b      	str	r3, [r7, #16]
 8001848:	e004      	b.n	8001854 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2b70      	cmp	r3, #112	; 0x70
 800184e:	d101      	bne.n	8001854 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001850:	2301      	movs	r3, #1
 8001852:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001854:	4b0b      	ldr	r3, [pc, #44]	; (8001884 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f023 0207 	bic.w	r2, r3, #7
 800185c:	4909      	ldr	r1, [pc, #36]	; (8001884 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	4313      	orrs	r3, r2
 8001862:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001864:	4b07      	ldr	r3, [pc, #28]	; (8001884 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0307 	and.w	r3, r3, #7
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	429a      	cmp	r2, r3
 8001870:	d001      	beq.n	8001876 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e000      	b.n	8001878 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001876:	2300      	movs	r3, #0
}
 8001878:	4618      	mov	r0, r3
 800187a:	3718      	adds	r7, #24
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40021000 	.word	0x40021000
 8001884:	40022000 	.word	0x40022000

08001888 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d101      	bne.n	800189a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e049      	b.n	800192e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d106      	bne.n	80018b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2200      	movs	r2, #0
 80018aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f7fe fe24 	bl	80004fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2202      	movs	r2, #2
 80018b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3304      	adds	r3, #4
 80018c4:	4619      	mov	r1, r3
 80018c6:	4610      	mov	r0, r2
 80018c8:	f000 fcb4 	bl	8002234 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2201      	movs	r2, #1
 80018d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2201      	movs	r2, #1
 80018d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2201      	movs	r2, #1
 80018e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2201      	movs	r2, #1
 80018e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2201      	movs	r2, #1
 80018f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2201      	movs	r2, #1
 80018f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2201      	movs	r2, #1
 8001900:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2201      	movs	r2, #1
 8001908:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2201      	movs	r2, #1
 8001910:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2201      	movs	r2, #1
 8001918:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2201      	movs	r2, #1
 8001920:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2201      	movs	r2, #1
 8001928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b082      	sub	sp, #8
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d101      	bne.n	8001948 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e049      	b.n	80019dc <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800194e:	b2db      	uxtb	r3, r3
 8001950:	2b00      	cmp	r3, #0
 8001952:	d106      	bne.n	8001962 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f000 f841 	bl	80019e4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2202      	movs	r2, #2
 8001966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	3304      	adds	r3, #4
 8001972:	4619      	mov	r1, r3
 8001974:	4610      	mov	r0, r2
 8001976:	f000 fc5d 	bl	8002234 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2201      	movs	r2, #1
 800197e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2201      	movs	r2, #1
 8001986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2201      	movs	r2, #1
 800198e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2201      	movs	r2, #1
 8001996:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2201      	movs	r2, #1
 800199e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2201      	movs	r2, #1
 80019a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2201      	movs	r2, #1
 80019ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2201      	movs	r2, #1
 80019b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2201      	movs	r2, #1
 80019be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2201      	movs	r2, #1
 80019c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2201      	movs	r2, #1
 80019ce:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2201      	movs	r2, #1
 80019d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80019da:	2300      	movs	r3, #0
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a02:	2300      	movs	r3, #0
 8001a04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d104      	bne.n	8001a16 <HAL_TIM_IC_Start_IT+0x1e>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	e023      	b.n	8001a5e <HAL_TIM_IC_Start_IT+0x66>
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	2b04      	cmp	r3, #4
 8001a1a:	d104      	bne.n	8001a26 <HAL_TIM_IC_Start_IT+0x2e>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	e01b      	b.n	8001a5e <HAL_TIM_IC_Start_IT+0x66>
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	2b08      	cmp	r3, #8
 8001a2a:	d104      	bne.n	8001a36 <HAL_TIM_IC_Start_IT+0x3e>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	e013      	b.n	8001a5e <HAL_TIM_IC_Start_IT+0x66>
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	2b0c      	cmp	r3, #12
 8001a3a:	d104      	bne.n	8001a46 <HAL_TIM_IC_Start_IT+0x4e>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	e00b      	b.n	8001a5e <HAL_TIM_IC_Start_IT+0x66>
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	2b10      	cmp	r3, #16
 8001a4a:	d104      	bne.n	8001a56 <HAL_TIM_IC_Start_IT+0x5e>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	e003      	b.n	8001a5e <HAL_TIM_IC_Start_IT+0x66>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d104      	bne.n	8001a70 <HAL_TIM_IC_Start_IT+0x78>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	e013      	b.n	8001a98 <HAL_TIM_IC_Start_IT+0xa0>
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	2b04      	cmp	r3, #4
 8001a74:	d104      	bne.n	8001a80 <HAL_TIM_IC_Start_IT+0x88>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	e00b      	b.n	8001a98 <HAL_TIM_IC_Start_IT+0xa0>
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	2b08      	cmp	r3, #8
 8001a84:	d104      	bne.n	8001a90 <HAL_TIM_IC_Start_IT+0x98>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	e003      	b.n	8001a98 <HAL_TIM_IC_Start_IT+0xa0>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8001a9a:	7bbb      	ldrb	r3, [r7, #14]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d102      	bne.n	8001aa6 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8001aa0:	7b7b      	ldrb	r3, [r7, #13]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d001      	beq.n	8001aaa <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e0c9      	b.n	8001c3e <HAL_TIM_IC_Start_IT+0x246>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d104      	bne.n	8001aba <HAL_TIM_IC_Start_IT+0xc2>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2202      	movs	r2, #2
 8001ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ab8:	e023      	b.n	8001b02 <HAL_TIM_IC_Start_IT+0x10a>
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	2b04      	cmp	r3, #4
 8001abe:	d104      	bne.n	8001aca <HAL_TIM_IC_Start_IT+0xd2>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2202      	movs	r2, #2
 8001ac4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ac8:	e01b      	b.n	8001b02 <HAL_TIM_IC_Start_IT+0x10a>
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	2b08      	cmp	r3, #8
 8001ace:	d104      	bne.n	8001ada <HAL_TIM_IC_Start_IT+0xe2>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2202      	movs	r2, #2
 8001ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ad8:	e013      	b.n	8001b02 <HAL_TIM_IC_Start_IT+0x10a>
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	2b0c      	cmp	r3, #12
 8001ade:	d104      	bne.n	8001aea <HAL_TIM_IC_Start_IT+0xf2>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2202      	movs	r2, #2
 8001ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001ae8:	e00b      	b.n	8001b02 <HAL_TIM_IC_Start_IT+0x10a>
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	2b10      	cmp	r3, #16
 8001aee:	d104      	bne.n	8001afa <HAL_TIM_IC_Start_IT+0x102>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2202      	movs	r2, #2
 8001af4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001af8:	e003      	b.n	8001b02 <HAL_TIM_IC_Start_IT+0x10a>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2202      	movs	r2, #2
 8001afe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d104      	bne.n	8001b12 <HAL_TIM_IC_Start_IT+0x11a>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b10:	e013      	b.n	8001b3a <HAL_TIM_IC_Start_IT+0x142>
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	2b04      	cmp	r3, #4
 8001b16:	d104      	bne.n	8001b22 <HAL_TIM_IC_Start_IT+0x12a>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2202      	movs	r2, #2
 8001b1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001b20:	e00b      	b.n	8001b3a <HAL_TIM_IC_Start_IT+0x142>
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	2b08      	cmp	r3, #8
 8001b26:	d104      	bne.n	8001b32 <HAL_TIM_IC_Start_IT+0x13a>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2202      	movs	r2, #2
 8001b2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001b30:	e003      	b.n	8001b3a <HAL_TIM_IC_Start_IT+0x142>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2202      	movs	r2, #2
 8001b36:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	2b0c      	cmp	r3, #12
 8001b3e:	d841      	bhi.n	8001bc4 <HAL_TIM_IC_Start_IT+0x1cc>
 8001b40:	a201      	add	r2, pc, #4	; (adr r2, 8001b48 <HAL_TIM_IC_Start_IT+0x150>)
 8001b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b46:	bf00      	nop
 8001b48:	08001b7d 	.word	0x08001b7d
 8001b4c:	08001bc5 	.word	0x08001bc5
 8001b50:	08001bc5 	.word	0x08001bc5
 8001b54:	08001bc5 	.word	0x08001bc5
 8001b58:	08001b8f 	.word	0x08001b8f
 8001b5c:	08001bc5 	.word	0x08001bc5
 8001b60:	08001bc5 	.word	0x08001bc5
 8001b64:	08001bc5 	.word	0x08001bc5
 8001b68:	08001ba1 	.word	0x08001ba1
 8001b6c:	08001bc5 	.word	0x08001bc5
 8001b70:	08001bc5 	.word	0x08001bc5
 8001b74:	08001bc5 	.word	0x08001bc5
 8001b78:	08001bb3 	.word	0x08001bb3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	68da      	ldr	r2, [r3, #12]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f042 0202 	orr.w	r2, r2, #2
 8001b8a:	60da      	str	r2, [r3, #12]
      break;
 8001b8c:	e01d      	b.n	8001bca <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	68da      	ldr	r2, [r3, #12]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f042 0204 	orr.w	r2, r2, #4
 8001b9c:	60da      	str	r2, [r3, #12]
      break;
 8001b9e:	e014      	b.n	8001bca <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	68da      	ldr	r2, [r3, #12]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f042 0208 	orr.w	r2, r2, #8
 8001bae:	60da      	str	r2, [r3, #12]
      break;
 8001bb0:	e00b      	b.n	8001bca <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	68da      	ldr	r2, [r3, #12]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f042 0210 	orr.w	r2, r2, #16
 8001bc0:	60da      	str	r2, [r3, #12]
      break;
 8001bc2:	e002      	b.n	8001bca <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	73fb      	strb	r3, [r7, #15]
      break;
 8001bc8:	bf00      	nop
  }

  if (status == HAL_OK)
 8001bca:	7bfb      	ldrb	r3, [r7, #15]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d135      	bne.n	8001c3c <HAL_TIM_IC_Start_IT+0x244>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	6839      	ldr	r1, [r7, #0]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f000 fd35 	bl	8002648 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a19      	ldr	r2, [pc, #100]	; (8001c48 <HAL_TIM_IC_Start_IT+0x250>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d009      	beq.n	8001bfc <HAL_TIM_IC_Start_IT+0x204>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bf0:	d004      	beq.n	8001bfc <HAL_TIM_IC_Start_IT+0x204>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a15      	ldr	r2, [pc, #84]	; (8001c4c <HAL_TIM_IC_Start_IT+0x254>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d115      	bne.n	8001c28 <HAL_TIM_IC_Start_IT+0x230>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	689a      	ldr	r2, [r3, #8]
 8001c02:	4b13      	ldr	r3, [pc, #76]	; (8001c50 <HAL_TIM_IC_Start_IT+0x258>)
 8001c04:	4013      	ands	r3, r2
 8001c06:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	2b06      	cmp	r3, #6
 8001c0c:	d015      	beq.n	8001c3a <HAL_TIM_IC_Start_IT+0x242>
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c14:	d011      	beq.n	8001c3a <HAL_TIM_IC_Start_IT+0x242>
      {
        __HAL_TIM_ENABLE(htim);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f042 0201 	orr.w	r2, r2, #1
 8001c24:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c26:	e008      	b.n	8001c3a <HAL_TIM_IC_Start_IT+0x242>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f042 0201 	orr.w	r2, r2, #1
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	e000      	b.n	8001c3c <HAL_TIM_IC_Start_IT+0x244>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c3a:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8001c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3710      	adds	r7, #16
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	40012c00 	.word	0x40012c00
 8001c4c:	40014000 	.word	0x40014000
 8001c50:	00010007 	.word	0x00010007

08001c54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d122      	bne.n	8001cb0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	f003 0302 	and.w	r3, r3, #2
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d11b      	bne.n	8001cb0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f06f 0202 	mvn.w	r2, #2
 8001c80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2201      	movs	r2, #1
 8001c86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	f003 0303 	and.w	r3, r3, #3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d003      	beq.n	8001c9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f7fe fab0 	bl	80001fc <HAL_TIM_IC_CaptureCallback>
 8001c9c:	e005      	b.n	8001caa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 faaa 	bl	80021f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f000 fab1 	bl	800220c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	f003 0304 	and.w	r3, r3, #4
 8001cba:	2b04      	cmp	r3, #4
 8001cbc:	d122      	bne.n	8001d04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	f003 0304 	and.w	r3, r3, #4
 8001cc8:	2b04      	cmp	r3, #4
 8001cca:	d11b      	bne.n	8001d04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f06f 0204 	mvn.w	r2, #4
 8001cd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2202      	movs	r2, #2
 8001cda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	699b      	ldr	r3, [r3, #24]
 8001ce2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d003      	beq.n	8001cf2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7fe fa86 	bl	80001fc <HAL_TIM_IC_CaptureCallback>
 8001cf0:	e005      	b.n	8001cfe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 fa80 	bl	80021f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f000 fa87 	bl	800220c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	f003 0308 	and.w	r3, r3, #8
 8001d0e:	2b08      	cmp	r3, #8
 8001d10:	d122      	bne.n	8001d58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	f003 0308 	and.w	r3, r3, #8
 8001d1c:	2b08      	cmp	r3, #8
 8001d1e:	d11b      	bne.n	8001d58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f06f 0208 	mvn.w	r2, #8
 8001d28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2204      	movs	r2, #4
 8001d2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	69db      	ldr	r3, [r3, #28]
 8001d36:	f003 0303 	and.w	r3, r3, #3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d003      	beq.n	8001d46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f7fe fa5c 	bl	80001fc <HAL_TIM_IC_CaptureCallback>
 8001d44:	e005      	b.n	8001d52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f000 fa56 	bl	80021f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f000 fa5d 	bl	800220c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	f003 0310 	and.w	r3, r3, #16
 8001d62:	2b10      	cmp	r3, #16
 8001d64:	d122      	bne.n	8001dac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	f003 0310 	and.w	r3, r3, #16
 8001d70:	2b10      	cmp	r3, #16
 8001d72:	d11b      	bne.n	8001dac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f06f 0210 	mvn.w	r2, #16
 8001d7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2208      	movs	r2, #8
 8001d82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d003      	beq.n	8001d9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7fe fa32 	bl	80001fc <HAL_TIM_IC_CaptureCallback>
 8001d98:	e005      	b.n	8001da6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 fa2c 	bl	80021f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f000 fa33 	bl	800220c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d10e      	bne.n	8001dd8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d107      	bne.n	8001dd8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f06f 0201 	mvn.w	r2, #1
 8001dd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f000 fa06 	bl	80021e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001de2:	2b80      	cmp	r3, #128	; 0x80
 8001de4:	d10e      	bne.n	8001e04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001df0:	2b80      	cmp	r3, #128	; 0x80
 8001df2:	d107      	bne.n	8001e04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001dfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 fcb8 	bl	8002774 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e12:	d10e      	bne.n	8001e32 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e1e:	2b80      	cmp	r3, #128	; 0x80
 8001e20:	d107      	bne.n	8001e32 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001e2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f000 fcab 	bl	8002788 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	691b      	ldr	r3, [r3, #16]
 8001e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e3c:	2b40      	cmp	r3, #64	; 0x40
 8001e3e:	d10e      	bne.n	8001e5e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e4a:	2b40      	cmp	r3, #64	; 0x40
 8001e4c:	d107      	bne.n	8001e5e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f000 f9e1 	bl	8002220 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	691b      	ldr	r3, [r3, #16]
 8001e64:	f003 0320 	and.w	r3, r3, #32
 8001e68:	2b20      	cmp	r3, #32
 8001e6a:	d10e      	bne.n	8001e8a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	f003 0320 	and.w	r3, r3, #32
 8001e76:	2b20      	cmp	r3, #32
 8001e78:	d107      	bne.n	8001e8a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f06f 0220 	mvn.w	r2, #32
 8001e82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f000 fc6b 	bl	8002760 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e8a:	bf00      	nop
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b086      	sub	sp, #24
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	60f8      	str	r0, [r7, #12]
 8001e9a:	60b9      	str	r1, [r7, #8]
 8001e9c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d101      	bne.n	8001eb0 <HAL_TIM_IC_ConfigChannel+0x1e>
 8001eac:	2302      	movs	r3, #2
 8001eae:	e088      	b.n	8001fc2 <HAL_TIM_IC_ConfigChannel+0x130>
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d11b      	bne.n	8001ef6 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6818      	ldr	r0, [r3, #0]
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	6819      	ldr	r1, [r3, #0]
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	f000 fa15 	bl	80022fc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	699a      	ldr	r2, [r3, #24]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f022 020c 	bic.w	r2, r2, #12
 8001ee0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	6999      	ldr	r1, [r3, #24]
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	689a      	ldr	r2, [r3, #8]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	619a      	str	r2, [r3, #24]
 8001ef4:	e060      	b.n	8001fb8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2b04      	cmp	r3, #4
 8001efa:	d11c      	bne.n	8001f36 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6818      	ldr	r0, [r3, #0]
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	6819      	ldr	r1, [r3, #0]
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	685a      	ldr	r2, [r3, #4]
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	f000 fa7b 	bl	8002406 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	699a      	ldr	r2, [r3, #24]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001f1e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	6999      	ldr	r1, [r3, #24]
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	021a      	lsls	r2, r3, #8
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	430a      	orrs	r2, r1
 8001f32:	619a      	str	r2, [r3, #24]
 8001f34:	e040      	b.n	8001fb8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2b08      	cmp	r3, #8
 8001f3a:	d11b      	bne.n	8001f74 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6818      	ldr	r0, [r3, #0]
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	6819      	ldr	r1, [r3, #0]
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	685a      	ldr	r2, [r3, #4]
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	f000 fac8 	bl	80024e0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	69da      	ldr	r2, [r3, #28]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f022 020c 	bic.w	r2, r2, #12
 8001f5e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	69d9      	ldr	r1, [r3, #28]
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	689a      	ldr	r2, [r3, #8]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	61da      	str	r2, [r3, #28]
 8001f72:	e021      	b.n	8001fb8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2b0c      	cmp	r3, #12
 8001f78:	d11c      	bne.n	8001fb4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	6818      	ldr	r0, [r3, #0]
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	6819      	ldr	r1, [r3, #0]
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	685a      	ldr	r2, [r3, #4]
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	f000 fae5 	bl	8002558 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	69da      	ldr	r2, [r3, #28]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001f9c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	69d9      	ldr	r1, [r3, #28]
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	021a      	lsls	r2, r3, #8
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	61da      	str	r2, [r3, #28]
 8001fb2:	e001      	b.n	8001fb8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001fc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3718      	adds	r7, #24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b084      	sub	sp, #16
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
 8001fd2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d101      	bne.n	8001fe6 <HAL_TIM_ConfigClockSource+0x1c>
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	e0b6      	b.n	8002154 <HAL_TIM_ConfigClockSource+0x18a>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2202      	movs	r2, #2
 8001ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002004:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002008:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002010:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68ba      	ldr	r2, [r7, #8]
 8002018:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002022:	d03e      	beq.n	80020a2 <HAL_TIM_ConfigClockSource+0xd8>
 8002024:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002028:	f200 8087 	bhi.w	800213a <HAL_TIM_ConfigClockSource+0x170>
 800202c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002030:	f000 8086 	beq.w	8002140 <HAL_TIM_ConfigClockSource+0x176>
 8002034:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002038:	d87f      	bhi.n	800213a <HAL_TIM_ConfigClockSource+0x170>
 800203a:	2b70      	cmp	r3, #112	; 0x70
 800203c:	d01a      	beq.n	8002074 <HAL_TIM_ConfigClockSource+0xaa>
 800203e:	2b70      	cmp	r3, #112	; 0x70
 8002040:	d87b      	bhi.n	800213a <HAL_TIM_ConfigClockSource+0x170>
 8002042:	2b60      	cmp	r3, #96	; 0x60
 8002044:	d050      	beq.n	80020e8 <HAL_TIM_ConfigClockSource+0x11e>
 8002046:	2b60      	cmp	r3, #96	; 0x60
 8002048:	d877      	bhi.n	800213a <HAL_TIM_ConfigClockSource+0x170>
 800204a:	2b50      	cmp	r3, #80	; 0x50
 800204c:	d03c      	beq.n	80020c8 <HAL_TIM_ConfigClockSource+0xfe>
 800204e:	2b50      	cmp	r3, #80	; 0x50
 8002050:	d873      	bhi.n	800213a <HAL_TIM_ConfigClockSource+0x170>
 8002052:	2b40      	cmp	r3, #64	; 0x40
 8002054:	d058      	beq.n	8002108 <HAL_TIM_ConfigClockSource+0x13e>
 8002056:	2b40      	cmp	r3, #64	; 0x40
 8002058:	d86f      	bhi.n	800213a <HAL_TIM_ConfigClockSource+0x170>
 800205a:	2b30      	cmp	r3, #48	; 0x30
 800205c:	d064      	beq.n	8002128 <HAL_TIM_ConfigClockSource+0x15e>
 800205e:	2b30      	cmp	r3, #48	; 0x30
 8002060:	d86b      	bhi.n	800213a <HAL_TIM_ConfigClockSource+0x170>
 8002062:	2b20      	cmp	r3, #32
 8002064:	d060      	beq.n	8002128 <HAL_TIM_ConfigClockSource+0x15e>
 8002066:	2b20      	cmp	r3, #32
 8002068:	d867      	bhi.n	800213a <HAL_TIM_ConfigClockSource+0x170>
 800206a:	2b00      	cmp	r3, #0
 800206c:	d05c      	beq.n	8002128 <HAL_TIM_ConfigClockSource+0x15e>
 800206e:	2b10      	cmp	r3, #16
 8002070:	d05a      	beq.n	8002128 <HAL_TIM_ConfigClockSource+0x15e>
 8002072:	e062      	b.n	800213a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6818      	ldr	r0, [r3, #0]
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	6899      	ldr	r1, [r3, #8]
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685a      	ldr	r2, [r3, #4]
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	f000 fac0 	bl	8002608 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002096:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	68ba      	ldr	r2, [r7, #8]
 800209e:	609a      	str	r2, [r3, #8]
      break;
 80020a0:	e04f      	b.n	8002142 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6818      	ldr	r0, [r3, #0]
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	6899      	ldr	r1, [r3, #8]
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685a      	ldr	r2, [r3, #4]
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	f000 faa9 	bl	8002608 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	689a      	ldr	r2, [r3, #8]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020c4:	609a      	str	r2, [r3, #8]
      break;
 80020c6:	e03c      	b.n	8002142 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6818      	ldr	r0, [r3, #0]
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	6859      	ldr	r1, [r3, #4]
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	461a      	mov	r2, r3
 80020d6:	f000 f967 	bl	80023a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2150      	movs	r1, #80	; 0x50
 80020e0:	4618      	mov	r0, r3
 80020e2:	f000 fa76 	bl	80025d2 <TIM_ITRx_SetConfig>
      break;
 80020e6:	e02c      	b.n	8002142 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6818      	ldr	r0, [r3, #0]
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	6859      	ldr	r1, [r3, #4]
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	461a      	mov	r2, r3
 80020f6:	f000 f9c3 	bl	8002480 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2160      	movs	r1, #96	; 0x60
 8002100:	4618      	mov	r0, r3
 8002102:	f000 fa66 	bl	80025d2 <TIM_ITRx_SetConfig>
      break;
 8002106:	e01c      	b.n	8002142 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6818      	ldr	r0, [r3, #0]
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	6859      	ldr	r1, [r3, #4]
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	461a      	mov	r2, r3
 8002116:	f000 f947 	bl	80023a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2140      	movs	r1, #64	; 0x40
 8002120:	4618      	mov	r0, r3
 8002122:	f000 fa56 	bl	80025d2 <TIM_ITRx_SetConfig>
      break;
 8002126:	e00c      	b.n	8002142 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4619      	mov	r1, r3
 8002132:	4610      	mov	r0, r2
 8002134:	f000 fa4d 	bl	80025d2 <TIM_ITRx_SetConfig>
      break;
 8002138:	e003      	b.n	8002142 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	73fb      	strb	r3, [r7, #15]
      break;
 800213e:	e000      	b.n	8002142 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002140:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2201      	movs	r2, #1
 8002146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002152:	7bfb      	ldrb	r3, [r7, #15]
}
 8002154:	4618      	mov	r0, r3
 8002156:	3710      	adds	r7, #16
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002166:	2300      	movs	r3, #0
 8002168:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	2b0c      	cmp	r3, #12
 800216e:	d831      	bhi.n	80021d4 <HAL_TIM_ReadCapturedValue+0x78>
 8002170:	a201      	add	r2, pc, #4	; (adr r2, 8002178 <HAL_TIM_ReadCapturedValue+0x1c>)
 8002172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002176:	bf00      	nop
 8002178:	080021ad 	.word	0x080021ad
 800217c:	080021d5 	.word	0x080021d5
 8002180:	080021d5 	.word	0x080021d5
 8002184:	080021d5 	.word	0x080021d5
 8002188:	080021b7 	.word	0x080021b7
 800218c:	080021d5 	.word	0x080021d5
 8002190:	080021d5 	.word	0x080021d5
 8002194:	080021d5 	.word	0x080021d5
 8002198:	080021c1 	.word	0x080021c1
 800219c:	080021d5 	.word	0x080021d5
 80021a0:	080021d5 	.word	0x080021d5
 80021a4:	080021d5 	.word	0x080021d5
 80021a8:	080021cb 	.word	0x080021cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021b2:	60fb      	str	r3, [r7, #12]

      break;
 80021b4:	e00f      	b.n	80021d6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021bc:	60fb      	str	r3, [r7, #12]

      break;
 80021be:	e00a      	b.n	80021d6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c6:	60fb      	str	r3, [r7, #12]

      break;
 80021c8:	e005      	b.n	80021d6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d0:	60fb      	str	r3, [r7, #12]

      break;
 80021d2:	e000      	b.n	80021d6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80021d4:	bf00      	nop
  }

  return tmpreg;
 80021d6:	68fb      	ldr	r3, [r7, #12]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3714      	adds	r7, #20
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002200:	bf00      	nop
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002228:	bf00      	nop
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	4a2a      	ldr	r2, [pc, #168]	; (80022f0 <TIM_Base_SetConfig+0xbc>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d003      	beq.n	8002254 <TIM_Base_SetConfig+0x20>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002252:	d108      	bne.n	8002266 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800225a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	68fa      	ldr	r2, [r7, #12]
 8002262:	4313      	orrs	r3, r2
 8002264:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a21      	ldr	r2, [pc, #132]	; (80022f0 <TIM_Base_SetConfig+0xbc>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d00b      	beq.n	8002286 <TIM_Base_SetConfig+0x52>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002274:	d007      	beq.n	8002286 <TIM_Base_SetConfig+0x52>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a1e      	ldr	r2, [pc, #120]	; (80022f4 <TIM_Base_SetConfig+0xc0>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d003      	beq.n	8002286 <TIM_Base_SetConfig+0x52>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a1d      	ldr	r2, [pc, #116]	; (80022f8 <TIM_Base_SetConfig+0xc4>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d108      	bne.n	8002298 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800228c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	4313      	orrs	r3, r2
 8002296:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4a0c      	ldr	r2, [pc, #48]	; (80022f0 <TIM_Base_SetConfig+0xbc>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d007      	beq.n	80022d4 <TIM_Base_SetConfig+0xa0>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4a0b      	ldr	r2, [pc, #44]	; (80022f4 <TIM_Base_SetConfig+0xc0>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d003      	beq.n	80022d4 <TIM_Base_SetConfig+0xa0>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4a0a      	ldr	r2, [pc, #40]	; (80022f8 <TIM_Base_SetConfig+0xc4>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d103      	bne.n	80022dc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	691a      	ldr	r2, [r3, #16]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	615a      	str	r2, [r3, #20]
}
 80022e2:	bf00      	nop
 80022e4:	3714      	adds	r7, #20
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	40012c00 	.word	0x40012c00
 80022f4:	40014000 	.word	0x40014000
 80022f8:	40014400 	.word	0x40014400

080022fc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b087      	sub	sp, #28
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
 8002308:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6a1b      	ldr	r3, [r3, #32]
 800230e:	f023 0201 	bic.w	r2, r3, #1
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	699b      	ldr	r3, [r3, #24]
 800231a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	4a1e      	ldr	r2, [pc, #120]	; (80023a0 <TIM_TI1_SetConfig+0xa4>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d007      	beq.n	800233a <TIM_TI1_SetConfig+0x3e>
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002330:	d003      	beq.n	800233a <TIM_TI1_SetConfig+0x3e>
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	4a1b      	ldr	r2, [pc, #108]	; (80023a4 <TIM_TI1_SetConfig+0xa8>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d101      	bne.n	800233e <TIM_TI1_SetConfig+0x42>
 800233a:	2301      	movs	r3, #1
 800233c:	e000      	b.n	8002340 <TIM_TI1_SetConfig+0x44>
 800233e:	2300      	movs	r3, #0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d008      	beq.n	8002356 <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	f023 0303 	bic.w	r3, r3, #3
 800234a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800234c:	697a      	ldr	r2, [r7, #20]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4313      	orrs	r3, r2
 8002352:	617b      	str	r3, [r7, #20]
 8002354:	e003      	b.n	800235e <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	f043 0301 	orr.w	r3, r3, #1
 800235c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002364:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	011b      	lsls	r3, r3, #4
 800236a:	b2db      	uxtb	r3, r3
 800236c:	697a      	ldr	r2, [r7, #20]
 800236e:	4313      	orrs	r3, r2
 8002370:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	f023 030a 	bic.w	r3, r3, #10
 8002378:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	f003 030a 	and.w	r3, r3, #10
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	4313      	orrs	r3, r2
 8002384:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	697a      	ldr	r2, [r7, #20]
 800238a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	621a      	str	r2, [r3, #32]
}
 8002392:	bf00      	nop
 8002394:	371c      	adds	r7, #28
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	40012c00 	.word	0x40012c00
 80023a4:	40014000 	.word	0x40014000

080023a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b087      	sub	sp, #28
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6a1b      	ldr	r3, [r3, #32]
 80023b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	f023 0201 	bic.w	r2, r3, #1
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	699b      	ldr	r3, [r3, #24]
 80023ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	011b      	lsls	r3, r3, #4
 80023d8:	693a      	ldr	r2, [r7, #16]
 80023da:	4313      	orrs	r3, r2
 80023dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	f023 030a 	bic.w	r3, r3, #10
 80023e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80023e6:	697a      	ldr	r2, [r7, #20]
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	697a      	ldr	r2, [r7, #20]
 80023f8:	621a      	str	r2, [r3, #32]
}
 80023fa:	bf00      	nop
 80023fc:	371c      	adds	r7, #28
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr

08002406 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002406:	b480      	push	{r7}
 8002408:	b087      	sub	sp, #28
 800240a:	af00      	add	r7, sp, #0
 800240c:	60f8      	str	r0, [r7, #12]
 800240e:	60b9      	str	r1, [r7, #8]
 8002410:	607a      	str	r2, [r7, #4]
 8002412:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6a1b      	ldr	r3, [r3, #32]
 8002418:	f023 0210 	bic.w	r2, r3, #16
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6a1b      	ldr	r3, [r3, #32]
 800242a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002432:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	021b      	lsls	r3, r3, #8
 8002438:	697a      	ldr	r2, [r7, #20]
 800243a:	4313      	orrs	r3, r2
 800243c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002444:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	031b      	lsls	r3, r3, #12
 800244a:	b29b      	uxth	r3, r3
 800244c:	697a      	ldr	r2, [r7, #20]
 800244e:	4313      	orrs	r3, r2
 8002450:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002458:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	011b      	lsls	r3, r3, #4
 800245e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	4313      	orrs	r3, r2
 8002466:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	697a      	ldr	r2, [r7, #20]
 800246c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	621a      	str	r2, [r3, #32]
}
 8002474:	bf00      	nop
 8002476:	371c      	adds	r7, #28
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002480:	b480      	push	{r7}
 8002482:	b087      	sub	sp, #28
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6a1b      	ldr	r3, [r3, #32]
 8002490:	f023 0210 	bic.w	r2, r3, #16
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6a1b      	ldr	r3, [r3, #32]
 80024a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80024aa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	031b      	lsls	r3, r3, #12
 80024b0:	697a      	ldr	r2, [r7, #20]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80024bc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	011b      	lsls	r3, r3, #4
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	697a      	ldr	r2, [r7, #20]
 80024cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	621a      	str	r2, [r3, #32]
}
 80024d4:	bf00      	nop
 80024d6:	371c      	adds	r7, #28
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b087      	sub	sp, #28
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
 80024ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6a1b      	ldr	r3, [r3, #32]
 80024f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	69db      	ldr	r3, [r3, #28]
 80024fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6a1b      	ldr	r3, [r3, #32]
 8002504:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	f023 0303 	bic.w	r3, r3, #3
 800250c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800250e:	697a      	ldr	r2, [r7, #20]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4313      	orrs	r3, r2
 8002514:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800251c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	011b      	lsls	r3, r3, #4
 8002522:	b2db      	uxtb	r3, r3
 8002524:	697a      	ldr	r2, [r7, #20]
 8002526:	4313      	orrs	r3, r2
 8002528:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8002530:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	021b      	lsls	r3, r3, #8
 8002536:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	4313      	orrs	r3, r2
 800253e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	621a      	str	r2, [r3, #32]
}
 800254c:	bf00      	nop
 800254e:	371c      	adds	r7, #28
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002558:	b480      	push	{r7}
 800255a:	b087      	sub	sp, #28
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
 8002564:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6a1b      	ldr	r3, [r3, #32]
 800256a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	69db      	ldr	r3, [r3, #28]
 8002576:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6a1b      	ldr	r3, [r3, #32]
 800257c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002584:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	021b      	lsls	r3, r3, #8
 800258a:	697a      	ldr	r2, [r7, #20]
 800258c:	4313      	orrs	r3, r2
 800258e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002596:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	031b      	lsls	r3, r3, #12
 800259c:	b29b      	uxth	r3, r3
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80025aa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	031b      	lsls	r3, r3, #12
 80025b0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	697a      	ldr	r2, [r7, #20]
 80025be:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	621a      	str	r2, [r3, #32]
}
 80025c6:	bf00      	nop
 80025c8:	371c      	adds	r7, #28
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr

080025d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80025d2:	b480      	push	{r7}
 80025d4:	b085      	sub	sp, #20
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
 80025da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	f043 0307 	orr.w	r3, r3, #7
 80025f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	68fa      	ldr	r2, [r7, #12]
 80025fa:	609a      	str	r2, [r3, #8]
}
 80025fc:	bf00      	nop
 80025fe:	3714      	adds	r7, #20
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002608:	b480      	push	{r7}
 800260a:	b087      	sub	sp, #28
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
 8002614:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002622:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	021a      	lsls	r2, r3, #8
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	431a      	orrs	r2, r3
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	4313      	orrs	r3, r2
 8002630:	697a      	ldr	r2, [r7, #20]
 8002632:	4313      	orrs	r3, r2
 8002634:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	697a      	ldr	r2, [r7, #20]
 800263a:	609a      	str	r2, [r3, #8]
}
 800263c:	bf00      	nop
 800263e:	371c      	adds	r7, #28
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002648:	b480      	push	{r7}
 800264a:	b087      	sub	sp, #28
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	f003 031f 	and.w	r3, r3, #31
 800265a:	2201      	movs	r2, #1
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6a1a      	ldr	r2, [r3, #32]
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	43db      	mvns	r3, r3
 800266a:	401a      	ands	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6a1a      	ldr	r2, [r3, #32]
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	f003 031f 	and.w	r3, r3, #31
 800267a:	6879      	ldr	r1, [r7, #4]
 800267c:	fa01 f303 	lsl.w	r3, r1, r3
 8002680:	431a      	orrs	r2, r3
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	621a      	str	r2, [r3, #32]
}
 8002686:	bf00      	nop
 8002688:	371c      	adds	r7, #28
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
	...

08002694 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002694:	b480      	push	{r7}
 8002696:	b085      	sub	sp, #20
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d101      	bne.n	80026ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80026a8:	2302      	movs	r3, #2
 80026aa:	e04f      	b.n	800274c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2202      	movs	r2, #2
 80026b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a21      	ldr	r2, [pc, #132]	; (8002758 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d108      	bne.n	80026e8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80026dc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68fa      	ldr	r2, [r7, #12]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a14      	ldr	r2, [pc, #80]	; (8002758 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d009      	beq.n	8002720 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002714:	d004      	beq.n	8002720 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a10      	ldr	r2, [pc, #64]	; (800275c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d10c      	bne.n	800273a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002726:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	68ba      	ldr	r2, [r7, #8]
 800272e:	4313      	orrs	r3, r2
 8002730:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68ba      	ldr	r2, [r7, #8]
 8002738:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2201      	movs	r2, #1
 800273e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	3714      	adds	r7, #20
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	40012c00 	.word	0x40012c00
 800275c:	40014000 	.word	0x40014000

08002760 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800277c:	bf00      	nop
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002790:	bf00      	nop
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <__libc_init_array>:
 800279c:	b570      	push	{r4, r5, r6, lr}
 800279e:	4d0d      	ldr	r5, [pc, #52]	; (80027d4 <__libc_init_array+0x38>)
 80027a0:	4c0d      	ldr	r4, [pc, #52]	; (80027d8 <__libc_init_array+0x3c>)
 80027a2:	1b64      	subs	r4, r4, r5
 80027a4:	10a4      	asrs	r4, r4, #2
 80027a6:	2600      	movs	r6, #0
 80027a8:	42a6      	cmp	r6, r4
 80027aa:	d109      	bne.n	80027c0 <__libc_init_array+0x24>
 80027ac:	4d0b      	ldr	r5, [pc, #44]	; (80027dc <__libc_init_array+0x40>)
 80027ae:	4c0c      	ldr	r4, [pc, #48]	; (80027e0 <__libc_init_array+0x44>)
 80027b0:	f000 f820 	bl	80027f4 <_init>
 80027b4:	1b64      	subs	r4, r4, r5
 80027b6:	10a4      	asrs	r4, r4, #2
 80027b8:	2600      	movs	r6, #0
 80027ba:	42a6      	cmp	r6, r4
 80027bc:	d105      	bne.n	80027ca <__libc_init_array+0x2e>
 80027be:	bd70      	pop	{r4, r5, r6, pc}
 80027c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80027c4:	4798      	blx	r3
 80027c6:	3601      	adds	r6, #1
 80027c8:	e7ee      	b.n	80027a8 <__libc_init_array+0xc>
 80027ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80027ce:	4798      	blx	r3
 80027d0:	3601      	adds	r6, #1
 80027d2:	e7f2      	b.n	80027ba <__libc_init_array+0x1e>
 80027d4:	0800284c 	.word	0x0800284c
 80027d8:	0800284c 	.word	0x0800284c
 80027dc:	0800284c 	.word	0x0800284c
 80027e0:	08002850 	.word	0x08002850

080027e4 <memset>:
 80027e4:	4402      	add	r2, r0
 80027e6:	4603      	mov	r3, r0
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d100      	bne.n	80027ee <memset+0xa>
 80027ec:	4770      	bx	lr
 80027ee:	f803 1b01 	strb.w	r1, [r3], #1
 80027f2:	e7f9      	b.n	80027e8 <memset+0x4>

080027f4 <_init>:
 80027f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027f6:	bf00      	nop
 80027f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027fa:	bc08      	pop	{r3}
 80027fc:	469e      	mov	lr, r3
 80027fe:	4770      	bx	lr

08002800 <_fini>:
 8002800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002802:	bf00      	nop
 8002804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002806:	bc08      	pop	{r3}
 8002808:	469e      	mov	lr, r3
 800280a:	4770      	bx	lr
