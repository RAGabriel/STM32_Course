
M11A12_ADCSamplingTime.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036f8  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003884  08003884  00013884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038c4  080038c4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080038c4  080038c4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080038c4  080038c4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038c4  080038c4  000138c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038c8  080038c8  000138c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080038cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  2000000c  080038d8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  080038d8  0002011c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b566  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eb1  00000000  00000000  0002b5a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  0002d458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009a0  00000000  00000000  0002df00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020522  00000000  00000000  0002e8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bc29  00000000  00000000  0004edc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c70cb  00000000  00000000  0005a9eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00121ab6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a24  00000000  00000000  00121b08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800386c 	.word	0x0800386c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	0800386c 	.word	0x0800386c

080001cc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b086      	sub	sp, #24
 80001d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80001d2:	463b      	mov	r3, r7
 80001d4:	2200      	movs	r2, #0
 80001d6:	601a      	str	r2, [r3, #0]
 80001d8:	605a      	str	r2, [r3, #4]
 80001da:	609a      	str	r2, [r3, #8]
 80001dc:	60da      	str	r2, [r3, #12]
 80001de:	611a      	str	r2, [r3, #16]
 80001e0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80001e2:	4b29      	ldr	r3, [pc, #164]	; (8000288 <MX_ADC1_Init+0xbc>)
 80001e4:	4a29      	ldr	r2, [pc, #164]	; (800028c <MX_ADC1_Init+0xc0>)
 80001e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80001e8:	4b27      	ldr	r3, [pc, #156]	; (8000288 <MX_ADC1_Init+0xbc>)
 80001ea:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80001ee:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80001f0:	4b25      	ldr	r3, [pc, #148]	; (8000288 <MX_ADC1_Init+0xbc>)
 80001f2:	2200      	movs	r2, #0
 80001f4:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80001f6:	4b24      	ldr	r3, [pc, #144]	; (8000288 <MX_ADC1_Init+0xbc>)
 80001f8:	2200      	movs	r2, #0
 80001fa:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80001fc:	4b22      	ldr	r3, [pc, #136]	; (8000288 <MX_ADC1_Init+0xbc>)
 80001fe:	2200      	movs	r2, #0
 8000200:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000202:	4b21      	ldr	r3, [pc, #132]	; (8000288 <MX_ADC1_Init+0xbc>)
 8000204:	2204      	movs	r2, #4
 8000206:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000208:	4b1f      	ldr	r3, [pc, #124]	; (8000288 <MX_ADC1_Init+0xbc>)
 800020a:	2200      	movs	r2, #0
 800020c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800020e:	4b1e      	ldr	r3, [pc, #120]	; (8000288 <MX_ADC1_Init+0xbc>)
 8000210:	2201      	movs	r2, #1
 8000212:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000214:	4b1c      	ldr	r3, [pc, #112]	; (8000288 <MX_ADC1_Init+0xbc>)
 8000216:	2201      	movs	r2, #1
 8000218:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800021a:	4b1b      	ldr	r3, [pc, #108]	; (8000288 <MX_ADC1_Init+0xbc>)
 800021c:	2200      	movs	r2, #0
 800021e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000222:	4b19      	ldr	r3, [pc, #100]	; (8000288 <MX_ADC1_Init+0xbc>)
 8000224:	2200      	movs	r2, #0
 8000226:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000228:	4b17      	ldr	r3, [pc, #92]	; (8000288 <MX_ADC1_Init+0xbc>)
 800022a:	2200      	movs	r2, #0
 800022c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800022e:	4b16      	ldr	r3, [pc, #88]	; (8000288 <MX_ADC1_Init+0xbc>)
 8000230:	2201      	movs	r2, #1
 8000232:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000236:	4b14      	ldr	r3, [pc, #80]	; (8000288 <MX_ADC1_Init+0xbc>)
 8000238:	2200      	movs	r2, #0
 800023a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800023c:	4b12      	ldr	r3, [pc, #72]	; (8000288 <MX_ADC1_Init+0xbc>)
 800023e:	2200      	movs	r2, #0
 8000240:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000244:	4810      	ldr	r0, [pc, #64]	; (8000288 <MX_ADC1_Init+0xbc>)
 8000246:	f000 fc5b 	bl	8000b00 <HAL_ADC_Init>
 800024a:	4603      	mov	r3, r0
 800024c:	2b00      	cmp	r3, #0
 800024e:	d001      	beq.n	8000254 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8000250:	f000 f964 	bl	800051c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000254:	4b0e      	ldr	r3, [pc, #56]	; (8000290 <MX_ADC1_Init+0xc4>)
 8000256:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000258:	2306      	movs	r3, #6
 800025a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 800025c:	2302      	movs	r3, #2
 800025e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000260:	237f      	movs	r3, #127	; 0x7f
 8000262:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000264:	2304      	movs	r3, #4
 8000266:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000268:	2300      	movs	r3, #0
 800026a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800026c:	463b      	mov	r3, r7
 800026e:	4619      	mov	r1, r3
 8000270:	4805      	ldr	r0, [pc, #20]	; (8000288 <MX_ADC1_Init+0xbc>)
 8000272:	f000 ffe3 	bl	800123c <HAL_ADC_ConfigChannel>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d001      	beq.n	8000280 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 800027c:	f000 f94e 	bl	800051c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000280:	bf00      	nop
 8000282:	3718      	adds	r7, #24
 8000284:	46bd      	mov	sp, r7
 8000286:	bd80      	pop	{r7, pc}
 8000288:	20000028 	.word	0x20000028
 800028c:	50040000 	.word	0x50040000
 8000290:	14f00020 	.word	0x14f00020

08000294 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b09e      	sub	sp, #120	; 0x78
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800029c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80002a0:	2200      	movs	r2, #0
 80002a2:	601a      	str	r2, [r3, #0]
 80002a4:	605a      	str	r2, [r3, #4]
 80002a6:	609a      	str	r2, [r3, #8]
 80002a8:	60da      	str	r2, [r3, #12]
 80002aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002ac:	f107 0310 	add.w	r3, r7, #16
 80002b0:	2254      	movs	r2, #84	; 0x54
 80002b2:	2100      	movs	r1, #0
 80002b4:	4618      	mov	r0, r3
 80002b6:	f003 fad1 	bl	800385c <memset>
  if(adcHandle->Instance==ADC1)
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	4a37      	ldr	r2, [pc, #220]	; (800039c <HAL_ADC_MspInit+0x108>)
 80002c0:	4293      	cmp	r3, r2
 80002c2:	d167      	bne.n	8000394 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80002c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80002c8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80002ca:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80002ce:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002d0:	f107 0310 	add.w	r3, r7, #16
 80002d4:	4618      	mov	r0, r3
 80002d6:	f002 ffb5 	bl	8003244 <HAL_RCCEx_PeriphCLKConfig>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d001      	beq.n	80002e4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80002e0:	f000 f91c 	bl	800051c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80002e4:	4b2e      	ldr	r3, [pc, #184]	; (80003a0 <HAL_ADC_MspInit+0x10c>)
 80002e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002e8:	4a2d      	ldr	r2, [pc, #180]	; (80003a0 <HAL_ADC_MspInit+0x10c>)
 80002ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002f0:	4b2b      	ldr	r3, [pc, #172]	; (80003a0 <HAL_ADC_MspInit+0x10c>)
 80002f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80002f8:	60fb      	str	r3, [r7, #12]
 80002fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002fc:	4b28      	ldr	r3, [pc, #160]	; (80003a0 <HAL_ADC_MspInit+0x10c>)
 80002fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000300:	4a27      	ldr	r2, [pc, #156]	; (80003a0 <HAL_ADC_MspInit+0x10c>)
 8000302:	f043 0301 	orr.w	r3, r3, #1
 8000306:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000308:	4b25      	ldr	r3, [pc, #148]	; (80003a0 <HAL_ADC_MspInit+0x10c>)
 800030a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800030c:	f003 0301 	and.w	r3, r3, #1
 8000310:	60bb      	str	r3, [r7, #8]
 8000312:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000314:	2301      	movs	r3, #1
 8000316:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000318:	230b      	movs	r3, #11
 800031a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800031c:	2300      	movs	r3, #0
 800031e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000320:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000324:	4619      	mov	r1, r3
 8000326:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800032a:	f001 ffbd 	bl	80022a8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800032e:	4b1d      	ldr	r3, [pc, #116]	; (80003a4 <HAL_ADC_MspInit+0x110>)
 8000330:	4a1d      	ldr	r2, [pc, #116]	; (80003a8 <HAL_ADC_MspInit+0x114>)
 8000332:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000334:	4b1b      	ldr	r3, [pc, #108]	; (80003a4 <HAL_ADC_MspInit+0x110>)
 8000336:	2200      	movs	r2, #0
 8000338:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800033a:	4b1a      	ldr	r3, [pc, #104]	; (80003a4 <HAL_ADC_MspInit+0x110>)
 800033c:	2200      	movs	r2, #0
 800033e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000340:	4b18      	ldr	r3, [pc, #96]	; (80003a4 <HAL_ADC_MspInit+0x110>)
 8000342:	2200      	movs	r2, #0
 8000344:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000346:	4b17      	ldr	r3, [pc, #92]	; (80003a4 <HAL_ADC_MspInit+0x110>)
 8000348:	2280      	movs	r2, #128	; 0x80
 800034a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800034c:	4b15      	ldr	r3, [pc, #84]	; (80003a4 <HAL_ADC_MspInit+0x110>)
 800034e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000352:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000354:	4b13      	ldr	r3, [pc, #76]	; (80003a4 <HAL_ADC_MspInit+0x110>)
 8000356:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800035a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800035c:	4b11      	ldr	r3, [pc, #68]	; (80003a4 <HAL_ADC_MspInit+0x110>)
 800035e:	2220      	movs	r2, #32
 8000360:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000362:	4b10      	ldr	r3, [pc, #64]	; (80003a4 <HAL_ADC_MspInit+0x110>)
 8000364:	2200      	movs	r2, #0
 8000366:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000368:	480e      	ldr	r0, [pc, #56]	; (80003a4 <HAL_ADC_MspInit+0x110>)
 800036a:	f001 fda5 	bl	8001eb8 <HAL_DMA_Init>
 800036e:	4603      	mov	r3, r0
 8000370:	2b00      	cmp	r3, #0
 8000372:	d001      	beq.n	8000378 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8000374:	f000 f8d2 	bl	800051c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	4a0a      	ldr	r2, [pc, #40]	; (80003a4 <HAL_ADC_MspInit+0x110>)
 800037c:	64da      	str	r2, [r3, #76]	; 0x4c
 800037e:	4a09      	ldr	r2, [pc, #36]	; (80003a4 <HAL_ADC_MspInit+0x110>)
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8000384:	2200      	movs	r2, #0
 8000386:	2100      	movs	r1, #0
 8000388:	2012      	movs	r0, #18
 800038a:	f001 fd5e 	bl	8001e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 800038e:	2012      	movs	r0, #18
 8000390:	f001 fd77 	bl	8001e82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000394:	bf00      	nop
 8000396:	3778      	adds	r7, #120	; 0x78
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}
 800039c:	50040000 	.word	0x50040000
 80003a0:	40021000 	.word	0x40021000
 80003a4:	2000008c 	.word	0x2000008c
 80003a8:	40020008 	.word	0x40020008

080003ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b082      	sub	sp, #8
 80003b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003b2:	4b0c      	ldr	r3, [pc, #48]	; (80003e4 <MX_DMA_Init+0x38>)
 80003b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80003b6:	4a0b      	ldr	r2, [pc, #44]	; (80003e4 <MX_DMA_Init+0x38>)
 80003b8:	f043 0301 	orr.w	r3, r3, #1
 80003bc:	6493      	str	r3, [r2, #72]	; 0x48
 80003be:	4b09      	ldr	r3, [pc, #36]	; (80003e4 <MX_DMA_Init+0x38>)
 80003c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80003c2:	f003 0301 	and.w	r3, r3, #1
 80003c6:	607b      	str	r3, [r7, #4]
 80003c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80003ca:	2200      	movs	r2, #0
 80003cc:	2100      	movs	r1, #0
 80003ce:	200b      	movs	r0, #11
 80003d0:	f001 fd3b 	bl	8001e4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80003d4:	200b      	movs	r0, #11
 80003d6:	f001 fd54 	bl	8001e82 <HAL_NVIC_EnableIRQ>

}
 80003da:	bf00      	nop
 80003dc:	3708      	adds	r7, #8
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	40021000 	.word	0x40021000

080003e8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	b083      	sub	sp, #12
 80003ec:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ee:	4b09      	ldr	r3, [pc, #36]	; (8000414 <MX_GPIO_Init+0x2c>)
 80003f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003f2:	4a08      	ldr	r2, [pc, #32]	; (8000414 <MX_GPIO_Init+0x2c>)
 80003f4:	f043 0301 	orr.w	r3, r3, #1
 80003f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003fa:	4b06      	ldr	r3, [pc, #24]	; (8000414 <MX_GPIO_Init+0x2c>)
 80003fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003fe:	f003 0301 	and.w	r3, r3, #1
 8000402:	607b      	str	r3, [r7, #4]
 8000404:	687b      	ldr	r3, [r7, #4]

}
 8000406:	bf00      	nop
 8000408:	370c      	adds	r7, #12
 800040a:	46bd      	mov	sp, r7
 800040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000410:	4770      	bx	lr
 8000412:	bf00      	nop
 8000414:	40021000 	.word	0x40021000

08000418 <HAL_ADC_ConvCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000418:	b480      	push	{r7}
 800041a:	b083      	sub	sp, #12
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
	Raw_Data_Vector[count] = Data;
 8000420:	4b0d      	ldr	r3, [pc, #52]	; (8000458 <HAL_ADC_ConvCpltCallback+0x40>)
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	461a      	mov	r2, r3
 8000426:	4b0d      	ldr	r3, [pc, #52]	; (800045c <HAL_ADC_ConvCpltCallback+0x44>)
 8000428:	8819      	ldrh	r1, [r3, #0]
 800042a:	4b0d      	ldr	r3, [pc, #52]	; (8000460 <HAL_ADC_ConvCpltCallback+0x48>)
 800042c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	count++;
 8000430:	4b09      	ldr	r3, [pc, #36]	; (8000458 <HAL_ADC_ConvCpltCallback+0x40>)
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	3301      	adds	r3, #1
 8000436:	b2da      	uxtb	r2, r3
 8000438:	4b07      	ldr	r3, [pc, #28]	; (8000458 <HAL_ADC_ConvCpltCallback+0x40>)
 800043a:	701a      	strb	r2, [r3, #0]
	if (count > 30)
 800043c:	4b06      	ldr	r3, [pc, #24]	; (8000458 <HAL_ADC_ConvCpltCallback+0x40>)
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	2b1e      	cmp	r3, #30
 8000442:	d902      	bls.n	800044a <HAL_ADC_ConvCpltCallback+0x32>
		count = 0;
 8000444:	4b04      	ldr	r3, [pc, #16]	; (8000458 <HAL_ADC_ConvCpltCallback+0x40>)
 8000446:	2200      	movs	r2, #0
 8000448:	701a      	strb	r2, [r3, #0]
}
 800044a:	bf00      	nop
 800044c:	370c      	adds	r7, #12
 800044e:	46bd      	mov	sp, r7
 8000450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000454:	4770      	bx	lr
 8000456:	bf00      	nop
 8000458:	20000114 	.word	0x20000114
 800045c:	200000d4 	.word	0x200000d4
 8000460:	200000d8 	.word	0x200000d8

08000464 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000468:	f000 f8fb 	bl	8000662 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800046c:	f000 f810 	bl	8000490 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000470:	f7ff ffba 	bl	80003e8 <MX_GPIO_Init>
	MX_DMA_Init();
 8000474:	f7ff ff9a 	bl	80003ac <MX_DMA_Init>
	MX_ADC1_Init();
 8000478:	f7ff fea8 	bl	80001cc <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */
	HAL_ADC_Start_DMA(&hadc1, &Data, 1);
 800047c:	2201      	movs	r2, #1
 800047e:	4902      	ldr	r1, [pc, #8]	; (8000488 <main+0x24>)
 8000480:	4802      	ldr	r0, [pc, #8]	; (800048c <main+0x28>)
 8000482:	f000 fc85 	bl	8000d90 <HAL_ADC_Start_DMA>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000486:	e7fe      	b.n	8000486 <main+0x22>
 8000488:	200000d4 	.word	0x200000d4
 800048c:	20000028 	.word	0x20000028

08000490 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000490:	b580      	push	{r7, lr}
 8000492:	b096      	sub	sp, #88	; 0x58
 8000494:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000496:	f107 0314 	add.w	r3, r7, #20
 800049a:	2244      	movs	r2, #68	; 0x44
 800049c:	2100      	movs	r1, #0
 800049e:	4618      	mov	r0, r3
 80004a0:	f003 f9dc 	bl	800385c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80004a4:	463b      	mov	r3, r7
 80004a6:	2200      	movs	r2, #0
 80004a8:	601a      	str	r2, [r3, #0]
 80004aa:	605a      	str	r2, [r3, #4]
 80004ac:	609a      	str	r2, [r3, #8]
 80004ae:	60da      	str	r2, [r3, #12]
 80004b0:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 80004b2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80004b6:	f002 f86f 	bl	8002598 <HAL_PWREx_ControlVoltageScaling>
 80004ba:	4603      	mov	r3, r0
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d001      	beq.n	80004c4 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 80004c0:	f000 f82c 	bl	800051c <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80004c4:	2310      	movs	r3, #16
 80004c6:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80004c8:	2301      	movs	r3, #1
 80004ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80004cc:	2300      	movs	r3, #0
 80004ce:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 80004d0:	2340      	movs	r3, #64	; 0x40
 80004d2:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004d4:	2300      	movs	r3, #0
 80004d6:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80004d8:	f107 0314 	add.w	r3, r7, #20
 80004dc:	4618      	mov	r0, r3
 80004de:	f002 f8b1 	bl	8002644 <HAL_RCC_OscConfig>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d001      	beq.n	80004ec <SystemClock_Config+0x5c>
		Error_Handler();
 80004e8:	f000 f818 	bl	800051c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80004ec:	230f      	movs	r3, #15
 80004ee:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80004f0:	2300      	movs	r3, #0
 80004f2:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004f4:	2300      	movs	r3, #0
 80004f6:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004f8:	2300      	movs	r3, #0
 80004fa:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004fc:	2300      	movs	r3, #0
 80004fe:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000500:	463b      	mov	r3, r7
 8000502:	2100      	movs	r1, #0
 8000504:	4618      	mov	r0, r3
 8000506:	f002 fcb1 	bl	8002e6c <HAL_RCC_ClockConfig>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d001      	beq.n	8000514 <SystemClock_Config+0x84>
		Error_Handler();
 8000510:	f000 f804 	bl	800051c <Error_Handler>
	}
}
 8000514:	bf00      	nop
 8000516:	3758      	adds	r7, #88	; 0x58
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}

0800051c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000520:	b672      	cpsid	i
}
 8000522:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000524:	e7fe      	b.n	8000524 <Error_Handler+0x8>
	...

08000528 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800052e:	4b0f      	ldr	r3, [pc, #60]	; (800056c <HAL_MspInit+0x44>)
 8000530:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000532:	4a0e      	ldr	r2, [pc, #56]	; (800056c <HAL_MspInit+0x44>)
 8000534:	f043 0301 	orr.w	r3, r3, #1
 8000538:	6613      	str	r3, [r2, #96]	; 0x60
 800053a:	4b0c      	ldr	r3, [pc, #48]	; (800056c <HAL_MspInit+0x44>)
 800053c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800053e:	f003 0301 	and.w	r3, r3, #1
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000546:	4b09      	ldr	r3, [pc, #36]	; (800056c <HAL_MspInit+0x44>)
 8000548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800054a:	4a08      	ldr	r2, [pc, #32]	; (800056c <HAL_MspInit+0x44>)
 800054c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000550:	6593      	str	r3, [r2, #88]	; 0x58
 8000552:	4b06      	ldr	r3, [pc, #24]	; (800056c <HAL_MspInit+0x44>)
 8000554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800055a:	603b      	str	r3, [r7, #0]
 800055c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800055e:	bf00      	nop
 8000560:	370c      	adds	r7, #12
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	40021000 	.word	0x40021000

08000570 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000574:	e7fe      	b.n	8000574 <NMI_Handler+0x4>

08000576 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000576:	b480      	push	{r7}
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800057a:	e7fe      	b.n	800057a <HardFault_Handler+0x4>

0800057c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000580:	e7fe      	b.n	8000580 <MemManage_Handler+0x4>

08000582 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000582:	b480      	push	{r7}
 8000584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000586:	e7fe      	b.n	8000586 <BusFault_Handler+0x4>

08000588 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800058c:	e7fe      	b.n	800058c <UsageFault_Handler+0x4>

0800058e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800058e:	b480      	push	{r7}
 8000590:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000592:	bf00      	nop
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr

0800059c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005a0:	bf00      	nop
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr

080005aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005aa:	b480      	push	{r7}
 80005ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005ae:	bf00      	nop
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr

080005b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005bc:	f000 f8a6 	bl	800070c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005c0:	bf00      	nop
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80005c8:	4802      	ldr	r0, [pc, #8]	; (80005d4 <DMA1_Channel1_IRQHandler+0x10>)
 80005ca:	f001 fd8d 	bl	80020e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	2000008c 	.word	0x2000008c

080005d8 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80005dc:	4802      	ldr	r0, [pc, #8]	; (80005e8 <ADC1_IRQHandler+0x10>)
 80005de:	f000 fc5b 	bl	8000e98 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80005e2:	bf00      	nop
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	20000028 	.word	0x20000028

080005ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80005f0:	4b06      	ldr	r3, [pc, #24]	; (800060c <SystemInit+0x20>)
 80005f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005f6:	4a05      	ldr	r2, [pc, #20]	; (800060c <SystemInit+0x20>)
 80005f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000600:	bf00      	nop
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000610:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000648 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000614:	f7ff ffea 	bl	80005ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000618:	480c      	ldr	r0, [pc, #48]	; (800064c <LoopForever+0x6>)
  ldr r1, =_edata
 800061a:	490d      	ldr	r1, [pc, #52]	; (8000650 <LoopForever+0xa>)
  ldr r2, =_sidata
 800061c:	4a0d      	ldr	r2, [pc, #52]	; (8000654 <LoopForever+0xe>)
  movs r3, #0
 800061e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000620:	e002      	b.n	8000628 <LoopCopyDataInit>

08000622 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000622:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000624:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000626:	3304      	adds	r3, #4

08000628 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000628:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800062a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800062c:	d3f9      	bcc.n	8000622 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800062e:	4a0a      	ldr	r2, [pc, #40]	; (8000658 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000630:	4c0a      	ldr	r4, [pc, #40]	; (800065c <LoopForever+0x16>)
  movs r3, #0
 8000632:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000634:	e001      	b.n	800063a <LoopFillZerobss>

08000636 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000636:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000638:	3204      	adds	r2, #4

0800063a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800063a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800063c:	d3fb      	bcc.n	8000636 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800063e:	f003 f8e9 	bl	8003814 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000642:	f7ff ff0f 	bl	8000464 <main>

08000646 <LoopForever>:

LoopForever:
    b LoopForever
 8000646:	e7fe      	b.n	8000646 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000648:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800064c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000650:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000654:	080038cc 	.word	0x080038cc
  ldr r2, =_sbss
 8000658:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800065c:	2000011c 	.word	0x2000011c

08000660 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000660:	e7fe      	b.n	8000660 <CAN1_RX0_IRQHandler>

08000662 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000662:	b580      	push	{r7, lr}
 8000664:	b082      	sub	sp, #8
 8000666:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000668:	2300      	movs	r3, #0
 800066a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800066c:	2003      	movs	r0, #3
 800066e:	f001 fbe1 	bl	8001e34 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000672:	2000      	movs	r0, #0
 8000674:	f000 f80e 	bl	8000694 <HAL_InitTick>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d002      	beq.n	8000684 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800067e:	2301      	movs	r3, #1
 8000680:	71fb      	strb	r3, [r7, #7]
 8000682:	e001      	b.n	8000688 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000684:	f7ff ff50 	bl	8000528 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000688:	79fb      	ldrb	r3, [r7, #7]
}
 800068a:	4618      	mov	r0, r3
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
	...

08000694 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800069c:	2300      	movs	r3, #0
 800069e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80006a0:	4b17      	ldr	r3, [pc, #92]	; (8000700 <HAL_InitTick+0x6c>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d023      	beq.n	80006f0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80006a8:	4b16      	ldr	r3, [pc, #88]	; (8000704 <HAL_InitTick+0x70>)
 80006aa:	681a      	ldr	r2, [r3, #0]
 80006ac:	4b14      	ldr	r3, [pc, #80]	; (8000700 <HAL_InitTick+0x6c>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	4619      	mov	r1, r3
 80006b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80006ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80006be:	4618      	mov	r0, r3
 80006c0:	f001 fbed 	bl	8001e9e <HAL_SYSTICK_Config>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d10f      	bne.n	80006ea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	2b0f      	cmp	r3, #15
 80006ce:	d809      	bhi.n	80006e4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006d0:	2200      	movs	r2, #0
 80006d2:	6879      	ldr	r1, [r7, #4]
 80006d4:	f04f 30ff 	mov.w	r0, #4294967295
 80006d8:	f001 fbb7 	bl	8001e4a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006dc:	4a0a      	ldr	r2, [pc, #40]	; (8000708 <HAL_InitTick+0x74>)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	6013      	str	r3, [r2, #0]
 80006e2:	e007      	b.n	80006f4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80006e4:	2301      	movs	r3, #1
 80006e6:	73fb      	strb	r3, [r7, #15]
 80006e8:	e004      	b.n	80006f4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006ea:	2301      	movs	r3, #1
 80006ec:	73fb      	strb	r3, [r7, #15]
 80006ee:	e001      	b.n	80006f4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006f0:	2301      	movs	r3, #1
 80006f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80006f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3710      	adds	r7, #16
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	20000008 	.word	0x20000008
 8000704:	20000000 	.word	0x20000000
 8000708:	20000004 	.word	0x20000004

0800070c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000710:	4b06      	ldr	r3, [pc, #24]	; (800072c <HAL_IncTick+0x20>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	461a      	mov	r2, r3
 8000716:	4b06      	ldr	r3, [pc, #24]	; (8000730 <HAL_IncTick+0x24>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4413      	add	r3, r2
 800071c:	4a04      	ldr	r2, [pc, #16]	; (8000730 <HAL_IncTick+0x24>)
 800071e:	6013      	str	r3, [r2, #0]
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	20000008 	.word	0x20000008
 8000730:	20000118 	.word	0x20000118

08000734 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  return uwTick;
 8000738:	4b03      	ldr	r3, [pc, #12]	; (8000748 <HAL_GetTick+0x14>)
 800073a:	681b      	ldr	r3, [r3, #0]
}
 800073c:	4618      	mov	r0, r3
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	20000118 	.word	0x20000118

0800074c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	689b      	ldr	r3, [r3, #8]
 800075a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	431a      	orrs	r2, r3
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	609a      	str	r2, [r3, #8]
}
 8000766:	bf00      	nop
 8000768:	370c      	adds	r7, #12
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr

08000772 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000772:	b480      	push	{r7}
 8000774:	b083      	sub	sp, #12
 8000776:	af00      	add	r7, sp, #0
 8000778:	6078      	str	r0, [r7, #4]
 800077a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	689b      	ldr	r3, [r3, #8]
 8000780:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	431a      	orrs	r2, r3
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	609a      	str	r2, [r3, #8]
}
 800078c:	bf00      	nop
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr

08000798 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	689b      	ldr	r3, [r3, #8]
 80007a4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	370c      	adds	r7, #12
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr

080007b4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b087      	sub	sp, #28
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	60f8      	str	r0, [r7, #12]
 80007bc:	60b9      	str	r1, [r7, #8]
 80007be:	607a      	str	r2, [r7, #4]
 80007c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	3360      	adds	r3, #96	; 0x60
 80007c6:	461a      	mov	r2, r3
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	009b      	lsls	r3, r3, #2
 80007cc:	4413      	add	r3, r2
 80007ce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	681a      	ldr	r2, [r3, #0]
 80007d4:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <LL_ADC_SetOffset+0x44>)
 80007d6:	4013      	ands	r3, r2
 80007d8:	687a      	ldr	r2, [r7, #4]
 80007da:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80007de:	683a      	ldr	r2, [r7, #0]
 80007e0:	430a      	orrs	r2, r1
 80007e2:	4313      	orrs	r3, r2
 80007e4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80007ec:	bf00      	nop
 80007ee:	371c      	adds	r7, #28
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr
 80007f8:	03fff000 	.word	0x03fff000

080007fc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b085      	sub	sp, #20
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	3360      	adds	r3, #96	; 0x60
 800080a:	461a      	mov	r2, r3
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	009b      	lsls	r3, r3, #2
 8000810:	4413      	add	r3, r2
 8000812:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800081c:	4618      	mov	r0, r3
 800081e:	3714      	adds	r7, #20
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr

08000828 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000828:	b480      	push	{r7}
 800082a:	b087      	sub	sp, #28
 800082c:	af00      	add	r7, sp, #0
 800082e:	60f8      	str	r0, [r7, #12]
 8000830:	60b9      	str	r1, [r7, #8]
 8000832:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	3360      	adds	r3, #96	; 0x60
 8000838:	461a      	mov	r2, r3
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	009b      	lsls	r3, r3, #2
 800083e:	4413      	add	r3, r2
 8000840:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000842:	697b      	ldr	r3, [r7, #20]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	431a      	orrs	r2, r3
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000852:	bf00      	nop
 8000854:	371c      	adds	r7, #28
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr

0800085e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800085e:	b480      	push	{r7}
 8000860:	b083      	sub	sp, #12
 8000862:	af00      	add	r7, sp, #0
 8000864:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	68db      	ldr	r3, [r3, #12]
 800086a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800086e:	2b00      	cmp	r3, #0
 8000870:	d101      	bne.n	8000876 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000872:	2301      	movs	r3, #1
 8000874:	e000      	b.n	8000878 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000876:	2300      	movs	r3, #0
}
 8000878:	4618      	mov	r0, r3
 800087a:	370c      	adds	r7, #12
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr

08000884 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000884:	b480      	push	{r7}
 8000886:	b087      	sub	sp, #28
 8000888:	af00      	add	r7, sp, #0
 800088a:	60f8      	str	r0, [r7, #12]
 800088c:	60b9      	str	r1, [r7, #8]
 800088e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	3330      	adds	r3, #48	; 0x30
 8000894:	461a      	mov	r2, r3
 8000896:	68bb      	ldr	r3, [r7, #8]
 8000898:	0a1b      	lsrs	r3, r3, #8
 800089a:	009b      	lsls	r3, r3, #2
 800089c:	f003 030c 	and.w	r3, r3, #12
 80008a0:	4413      	add	r3, r2
 80008a2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	681a      	ldr	r2, [r3, #0]
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	f003 031f 	and.w	r3, r3, #31
 80008ae:	211f      	movs	r1, #31
 80008b0:	fa01 f303 	lsl.w	r3, r1, r3
 80008b4:	43db      	mvns	r3, r3
 80008b6:	401a      	ands	r2, r3
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	0e9b      	lsrs	r3, r3, #26
 80008bc:	f003 011f 	and.w	r1, r3, #31
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	f003 031f 	and.w	r3, r3, #31
 80008c6:	fa01 f303 	lsl.w	r3, r1, r3
 80008ca:	431a      	orrs	r2, r3
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80008d0:	bf00      	nop
 80008d2:	371c      	adds	r7, #28
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr

080008dc <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d101      	bne.n	80008f4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80008f0:	2301      	movs	r3, #1
 80008f2:	e000      	b.n	80008f6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80008f4:	2300      	movs	r3, #0
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	370c      	adds	r7, #12
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr

08000902 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000902:	b480      	push	{r7}
 8000904:	b087      	sub	sp, #28
 8000906:	af00      	add	r7, sp, #0
 8000908:	60f8      	str	r0, [r7, #12]
 800090a:	60b9      	str	r1, [r7, #8]
 800090c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	3314      	adds	r3, #20
 8000912:	461a      	mov	r2, r3
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	0e5b      	lsrs	r3, r3, #25
 8000918:	009b      	lsls	r3, r3, #2
 800091a:	f003 0304 	and.w	r3, r3, #4
 800091e:	4413      	add	r3, r2
 8000920:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	681a      	ldr	r2, [r3, #0]
 8000926:	68bb      	ldr	r3, [r7, #8]
 8000928:	0d1b      	lsrs	r3, r3, #20
 800092a:	f003 031f 	and.w	r3, r3, #31
 800092e:	2107      	movs	r1, #7
 8000930:	fa01 f303 	lsl.w	r3, r1, r3
 8000934:	43db      	mvns	r3, r3
 8000936:	401a      	ands	r2, r3
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	0d1b      	lsrs	r3, r3, #20
 800093c:	f003 031f 	and.w	r3, r3, #31
 8000940:	6879      	ldr	r1, [r7, #4]
 8000942:	fa01 f303 	lsl.w	r3, r1, r3
 8000946:	431a      	orrs	r2, r3
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800094c:	bf00      	nop
 800094e:	371c      	adds	r7, #28
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr

08000958 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000958:	b480      	push	{r7}
 800095a:	b085      	sub	sp, #20
 800095c:	af00      	add	r7, sp, #0
 800095e:	60f8      	str	r0, [r7, #12]
 8000960:	60b9      	str	r1, [r7, #8]
 8000962:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800096a:	68bb      	ldr	r3, [r7, #8]
 800096c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000970:	43db      	mvns	r3, r3
 8000972:	401a      	ands	r2, r3
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	f003 0318 	and.w	r3, r3, #24
 800097a:	4908      	ldr	r1, [pc, #32]	; (800099c <LL_ADC_SetChannelSingleDiff+0x44>)
 800097c:	40d9      	lsrs	r1, r3
 800097e:	68bb      	ldr	r3, [r7, #8]
 8000980:	400b      	ands	r3, r1
 8000982:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000986:	431a      	orrs	r2, r3
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800098e:	bf00      	nop
 8000990:	3714      	adds	r7, #20
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	0007ffff 	.word	0x0007ffff

080009a0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	689b      	ldr	r3, [r3, #8]
 80009ac:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80009b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80009b4:	687a      	ldr	r2, [r7, #4]
 80009b6:	6093      	str	r3, [r2, #8]
}
 80009b8:	bf00      	nop
 80009ba:	370c      	adds	r7, #12
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr

080009c4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	689b      	ldr	r3, [r3, #8]
 80009d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80009d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80009d8:	d101      	bne.n	80009de <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80009da:	2301      	movs	r3, #1
 80009dc:	e000      	b.n	80009e0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80009de:	2300      	movs	r3, #0
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	370c      	adds	r7, #12
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr

080009ec <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	689b      	ldr	r3, [r3, #8]
 80009f8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80009fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000a00:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000a08:	bf00      	nop
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr

08000a14 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	689b      	ldr	r3, [r3, #8]
 8000a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000a28:	d101      	bne.n	8000a2e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	e000      	b.n	8000a30 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000a2e:	2300      	movs	r3, #0
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	689b      	ldr	r3, [r3, #8]
 8000a48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000a4c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000a50:	f043 0201 	orr.w	r2, r3, #1
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000a58:	bf00      	nop
 8000a5a:	370c      	adds	r7, #12
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr

08000a64 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	689b      	ldr	r3, [r3, #8]
 8000a70:	f003 0301 	and.w	r3, r3, #1
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d101      	bne.n	8000a7c <LL_ADC_IsEnabled+0x18>
 8000a78:	2301      	movs	r3, #1
 8000a7a:	e000      	b.n	8000a7e <LL_ADC_IsEnabled+0x1a>
 8000a7c:	2300      	movs	r3, #0
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr

08000a8a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	b083      	sub	sp, #12
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	689b      	ldr	r3, [r3, #8]
 8000a96:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000a9e:	f043 0204 	orr.w	r2, r3, #4
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000aa6:	bf00      	nop
 8000aa8:	370c      	adds	r7, #12
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr

08000ab2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	b083      	sub	sp, #12
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	689b      	ldr	r3, [r3, #8]
 8000abe:	f003 0304 	and.w	r3, r3, #4
 8000ac2:	2b04      	cmp	r3, #4
 8000ac4:	d101      	bne.n	8000aca <LL_ADC_REG_IsConversionOngoing+0x18>
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	e000      	b.n	8000acc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000aca:	2300      	movs	r3, #0
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	689b      	ldr	r3, [r3, #8]
 8000ae4:	f003 0308 	and.w	r3, r3, #8
 8000ae8:	2b08      	cmp	r3, #8
 8000aea:	d101      	bne.n	8000af0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000aec:	2301      	movs	r3, #1
 8000aee:	e000      	b.n	8000af2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000af0:	2300      	movs	r3, #0
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
	...

08000b00 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b088      	sub	sp, #32
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d101      	bne.n	8000b1a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
 8000b18:	e12c      	b.n	8000d74 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	691b      	ldr	r3, [r3, #16]
 8000b1e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d109      	bne.n	8000b3c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b28:	6878      	ldr	r0, [r7, #4]
 8000b2a:	f7ff fbb3 	bl	8000294 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2200      	movs	r2, #0
 8000b32:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2200      	movs	r2, #0
 8000b38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff ff3f 	bl	80009c4 <LL_ADC_IsDeepPowerDownEnabled>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d004      	beq.n	8000b56 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff ff25 	bl	80009a0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f7ff ff5a 	bl	8000a14 <LL_ADC_IsInternalRegulatorEnabled>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d115      	bne.n	8000b92 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f7ff ff3e 	bl	80009ec <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000b70:	4b82      	ldr	r3, [pc, #520]	; (8000d7c <HAL_ADC_Init+0x27c>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	099b      	lsrs	r3, r3, #6
 8000b76:	4a82      	ldr	r2, [pc, #520]	; (8000d80 <HAL_ADC_Init+0x280>)
 8000b78:	fba2 2303 	umull	r2, r3, r2, r3
 8000b7c:	099b      	lsrs	r3, r3, #6
 8000b7e:	3301      	adds	r3, #1
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000b84:	e002      	b.n	8000b8c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	3b01      	subs	r3, #1
 8000b8a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d1f9      	bne.n	8000b86 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4618      	mov	r0, r3
 8000b98:	f7ff ff3c 	bl	8000a14 <LL_ADC_IsInternalRegulatorEnabled>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d10d      	bne.n	8000bbe <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ba6:	f043 0210 	orr.w	r2, r3, #16
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bb2:	f043 0201 	orr.w	r2, r3, #1
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff ff75 	bl	8000ab2 <LL_ADC_REG_IsConversionOngoing>
 8000bc8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000bce:	f003 0310 	and.w	r3, r3, #16
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	f040 80c5 	bne.w	8000d62 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	f040 80c1 	bne.w	8000d62 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000be4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000be8:	f043 0202 	orr.w	r2, r3, #2
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff ff35 	bl	8000a64 <LL_ADC_IsEnabled>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d10b      	bne.n	8000c18 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000c00:	4860      	ldr	r0, [pc, #384]	; (8000d84 <HAL_ADC_Init+0x284>)
 8000c02:	f7ff ff2f 	bl	8000a64 <LL_ADC_IsEnabled>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d105      	bne.n	8000c18 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	4619      	mov	r1, r3
 8000c12:	485d      	ldr	r0, [pc, #372]	; (8000d88 <HAL_ADC_Init+0x288>)
 8000c14:	f7ff fd9a 	bl	800074c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	7e5b      	ldrb	r3, [r3, #25]
 8000c1c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000c22:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8000c28:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8000c2e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c36:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	d106      	bne.n	8000c54 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c4a:	3b01      	subs	r3, #1
 8000c4c:	045b      	lsls	r3, r3, #17
 8000c4e:	69ba      	ldr	r2, [r7, #24]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d009      	beq.n	8000c70 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c60:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c68:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000c6a:	69ba      	ldr	r2, [r7, #24]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	68da      	ldr	r2, [r3, #12]
 8000c76:	4b45      	ldr	r3, [pc, #276]	; (8000d8c <HAL_ADC_Init+0x28c>)
 8000c78:	4013      	ands	r3, r2
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	6812      	ldr	r2, [r2, #0]
 8000c7e:	69b9      	ldr	r1, [r7, #24]
 8000c80:	430b      	orrs	r3, r1
 8000c82:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff ff12 	bl	8000ab2 <LL_ADC_REG_IsConversionOngoing>
 8000c8e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff ff1f 	bl	8000ad8 <LL_ADC_INJ_IsConversionOngoing>
 8000c9a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000c9c:	693b      	ldr	r3, [r7, #16]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d13d      	bne.n	8000d1e <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d13a      	bne.n	8000d1e <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000cac:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000cb4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000cc4:	f023 0302 	bic.w	r3, r3, #2
 8000cc8:	687a      	ldr	r2, [r7, #4]
 8000cca:	6812      	ldr	r2, [r2, #0]
 8000ccc:	69b9      	ldr	r1, [r7, #24]
 8000cce:	430b      	orrs	r3, r1
 8000cd0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d118      	bne.n	8000d0e <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	691b      	ldr	r3, [r3, #16]
 8000ce2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000ce6:	f023 0304 	bic.w	r3, r3, #4
 8000cea:	687a      	ldr	r2, [r7, #4]
 8000cec:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8000cee:	687a      	ldr	r2, [r7, #4]
 8000cf0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000cf2:	4311      	orrs	r1, r2
 8000cf4:	687a      	ldr	r2, [r7, #4]
 8000cf6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000cf8:	4311      	orrs	r1, r2
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000cfe:	430a      	orrs	r2, r1
 8000d00:	431a      	orrs	r2, r3
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f042 0201 	orr.w	r2, r2, #1
 8000d0a:	611a      	str	r2, [r3, #16]
 8000d0c:	e007      	b.n	8000d1e <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	691a      	ldr	r2, [r3, #16]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f022 0201 	bic.w	r2, r2, #1
 8000d1c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	691b      	ldr	r3, [r3, #16]
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d10c      	bne.n	8000d40 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2c:	f023 010f 	bic.w	r1, r3, #15
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	69db      	ldr	r3, [r3, #28]
 8000d34:	1e5a      	subs	r2, r3, #1
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	430a      	orrs	r2, r1
 8000d3c:	631a      	str	r2, [r3, #48]	; 0x30
 8000d3e:	e007      	b.n	8000d50 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f022 020f 	bic.w	r2, r2, #15
 8000d4e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d54:	f023 0303 	bic.w	r3, r3, #3
 8000d58:	f043 0201 	orr.w	r2, r3, #1
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	655a      	str	r2, [r3, #84]	; 0x54
 8000d60:	e007      	b.n	8000d72 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d66:	f043 0210 	orr.w	r2, r3, #16
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000d72:	7ffb      	ldrb	r3, [r7, #31]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3720      	adds	r7, #32
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	20000000 	.word	0x20000000
 8000d80:	053e2d63 	.word	0x053e2d63
 8000d84:	50040000 	.word	0x50040000
 8000d88:	50040300 	.word	0x50040300
 8000d8c:	fff0c007 	.word	0xfff0c007

08000d90 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b086      	sub	sp, #24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	60b9      	str	r1, [r7, #8]
 8000d9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff fe86 	bl	8000ab2 <LL_ADC_REG_IsConversionOngoing>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d167      	bne.n	8000e7c <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d101      	bne.n	8000dba <HAL_ADC_Start_DMA+0x2a>
 8000db6:	2302      	movs	r3, #2
 8000db8:	e063      	b.n	8000e82 <HAL_ADC_Start_DMA+0xf2>
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8000dc2:	68f8      	ldr	r0, [r7, #12]
 8000dc4:	f000 fe1a 	bl	80019fc <ADC_Enable>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8000dcc:	7dfb      	ldrb	r3, [r7, #23]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d14f      	bne.n	8000e72 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dd6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000dda:	f023 0301 	bic.w	r3, r3, #1
 8000dde:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d006      	beq.n	8000e00 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000df6:	f023 0206 	bic.w	r2, r3, #6
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	659a      	str	r2, [r3, #88]	; 0x58
 8000dfe:	e002      	b.n	8000e06 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	2200      	movs	r2, #0
 8000e04:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0a:	4a20      	ldr	r2, [pc, #128]	; (8000e8c <HAL_ADC_Start_DMA+0xfc>)
 8000e0c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e12:	4a1f      	ldr	r2, [pc, #124]	; (8000e90 <HAL_ADC_Start_DMA+0x100>)
 8000e14:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1a:	4a1e      	ldr	r2, [pc, #120]	; (8000e94 <HAL_ADC_Start_DMA+0x104>)
 8000e1c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	221c      	movs	r2, #28
 8000e24:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	2200      	movs	r2, #0
 8000e2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	685a      	ldr	r2, [r3, #4]
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f042 0210 	orr.w	r2, r2, #16
 8000e3c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	68da      	ldr	r2, [r3, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f042 0201 	orr.w	r2, r2, #1
 8000e4c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	3340      	adds	r3, #64	; 0x40
 8000e58:	4619      	mov	r1, r3
 8000e5a:	68ba      	ldr	r2, [r7, #8]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f001 f8e3 	bl	8002028 <HAL_DMA_Start_IT>
 8000e62:	4603      	mov	r3, r0
 8000e64:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff fe0d 	bl	8000a8a <LL_ADC_REG_StartConversion>
 8000e70:	e006      	b.n	8000e80 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	2200      	movs	r2, #0
 8000e76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8000e7a:	e001      	b.n	8000e80 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8000e80:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3718      	adds	r7, #24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	08001b09 	.word	0x08001b09
 8000e90:	08001be1 	.word	0x08001be1
 8000e94:	08001bfd 	.word	0x08001bfd

08000e98 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b088      	sub	sp, #32
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8000eb4:	69bb      	ldr	r3, [r7, #24]
 8000eb6:	f003 0302 	and.w	r3, r3, #2
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d017      	beq.n	8000eee <HAL_ADC_IRQHandler+0x56>
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	f003 0302 	and.w	r3, r3, #2
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d012      	beq.n	8000eee <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ecc:	f003 0310 	and.w	r3, r3, #16
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d105      	bne.n	8000ee0 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ed8:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	f000 fecd 	bl	8001c80 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2202      	movs	r2, #2
 8000eec:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8000eee:	69bb      	ldr	r3, [r7, #24]
 8000ef0:	f003 0304 	and.w	r3, r3, #4
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d004      	beq.n	8000f02 <HAL_ADC_IRQHandler+0x6a>
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	f003 0304 	and.w	r3, r3, #4
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d109      	bne.n	8000f16 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8000f02:	69bb      	ldr	r3, [r7, #24]
 8000f04:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d05e      	beq.n	8000fca <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	f003 0308 	and.w	r3, r3, #8
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d059      	beq.n	8000fca <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f1a:	f003 0310 	and.w	r3, r3, #16
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d105      	bne.n	8000f2e <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f26:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff fc93 	bl	800085e <LL_ADC_REG_IsTriggerSourceSWStart>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d03e      	beq.n	8000fbc <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	613b      	str	r3, [r7, #16]
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d135      	bne.n	8000fbc <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f003 0308 	and.w	r3, r3, #8
 8000f5a:	2b08      	cmp	r3, #8
 8000f5c:	d12e      	bne.n	8000fbc <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff fda5 	bl	8000ab2 <LL_ADC_REG_IsConversionOngoing>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d11a      	bne.n	8000fa4 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	685a      	ldr	r2, [r3, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f022 020c 	bic.w	r2, r2, #12
 8000f7c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d112      	bne.n	8000fbc <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f9a:	f043 0201 	orr.w	r2, r3, #1
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	655a      	str	r2, [r3, #84]	; 0x54
 8000fa2:	e00b      	b.n	8000fbc <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fa8:	f043 0210 	orr.w	r2, r3, #16
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fb4:	f043 0201 	orr.w	r2, r3, #1
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f7ff fa2b 	bl	8000418 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	220c      	movs	r2, #12
 8000fc8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8000fca:	69bb      	ldr	r3, [r7, #24]
 8000fcc:	f003 0320 	and.w	r3, r3, #32
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d004      	beq.n	8000fde <HAL_ADC_IRQHandler+0x146>
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	f003 0320 	and.w	r3, r3, #32
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d109      	bne.n	8000ff2 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8000fde:	69bb      	ldr	r3, [r7, #24]
 8000fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d072      	beq.n	80010ce <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d06d      	beq.n	80010ce <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ff6:	f003 0310 	and.w	r3, r3, #16
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d105      	bne.n	800100a <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001002:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff fc64 	bl	80008dc <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001014:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff fc1f 	bl	800085e <LL_ADC_REG_IsTriggerSourceSWStart>
 8001020:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d047      	beq.n	80010c0 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001036:	2b00      	cmp	r3, #0
 8001038:	d007      	beq.n	800104a <HAL_ADC_IRQHandler+0x1b2>
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d03f      	beq.n	80010c0 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001046:	2b00      	cmp	r3, #0
 8001048:	d13a      	bne.n	80010c0 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001054:	2b40      	cmp	r3, #64	; 0x40
 8001056:	d133      	bne.n	80010c0 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d12e      	bne.n	80010c0 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff fd36 	bl	8000ad8 <LL_ADC_INJ_IsConversionOngoing>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d11a      	bne.n	80010a8 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	685a      	ldr	r2, [r3, #4]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001080:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001086:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001096:	2b00      	cmp	r3, #0
 8001098:	d112      	bne.n	80010c0 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800109e:	f043 0201 	orr.w	r2, r3, #1
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	655a      	str	r2, [r3, #84]	; 0x54
 80010a6:	e00b      	b.n	80010c0 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010ac:	f043 0210 	orr.w	r2, r3, #16
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b8:	f043 0201 	orr.w	r2, r3, #1
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f000 fdb5 	bl	8001c30 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2260      	movs	r2, #96	; 0x60
 80010cc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d011      	beq.n	80010fc <HAL_ADC_IRQHandler+0x264>
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d00c      	beq.n	80010fc <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f000 f890 	bl	8001214 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2280      	movs	r2, #128	; 0x80
 80010fa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001102:	2b00      	cmp	r3, #0
 8001104:	d012      	beq.n	800112c <HAL_ADC_IRQHandler+0x294>
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800110c:	2b00      	cmp	r3, #0
 800110e:	d00d      	beq.n	800112c <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001114:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f000 fd9b 	bl	8001c58 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f44f 7280 	mov.w	r2, #256	; 0x100
 800112a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001132:	2b00      	cmp	r3, #0
 8001134:	d012      	beq.n	800115c <HAL_ADC_IRQHandler+0x2c4>
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800113c:	2b00      	cmp	r3, #0
 800113e:	d00d      	beq.n	800115c <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001144:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f000 fd8d 	bl	8001c6c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f44f 7200 	mov.w	r2, #512	; 0x200
 800115a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	f003 0310 	and.w	r3, r3, #16
 8001162:	2b00      	cmp	r3, #0
 8001164:	d02a      	beq.n	80011bc <HAL_ADC_IRQHandler+0x324>
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	f003 0310 	and.w	r3, r3, #16
 800116c:	2b00      	cmp	r3, #0
 800116e:	d025      	beq.n	80011bc <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001174:	2b00      	cmp	r3, #0
 8001176:	d102      	bne.n	800117e <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8001178:	2301      	movs	r3, #1
 800117a:	61fb      	str	r3, [r7, #28]
 800117c:	e008      	b.n	8001190 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	f003 0301 	and.w	r3, r3, #1
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 800118c:	2301      	movs	r3, #1
 800118e:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	2b01      	cmp	r3, #1
 8001194:	d10e      	bne.n	80011b4 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800119a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a6:	f043 0202 	orr.w	r2, r3, #2
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f000 f83a 	bl	8001228 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2210      	movs	r2, #16
 80011ba:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d018      	beq.n	80011f8 <HAL_ADC_IRQHandler+0x360>
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d013      	beq.n	80011f8 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011d4:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011e0:	f043 0208 	orr.w	r2, r3, #8
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011f0:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f000 fd26 	bl	8001c44 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80011f8:	bf00      	nop
 80011fa:	3720      	adds	r7, #32
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b0b6      	sub	sp, #216	; 0xd8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001246:	2300      	movs	r3, #0
 8001248:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800124c:	2300      	movs	r3, #0
 800124e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001256:	2b01      	cmp	r3, #1
 8001258:	d101      	bne.n	800125e <HAL_ADC_ConfigChannel+0x22>
 800125a:	2302      	movs	r3, #2
 800125c:	e3b9      	b.n	80019d2 <HAL_ADC_ConfigChannel+0x796>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2201      	movs	r2, #1
 8001262:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff fc21 	bl	8000ab2 <LL_ADC_REG_IsConversionOngoing>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	f040 839e 	bne.w	80019b4 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	2b05      	cmp	r3, #5
 800127e:	d824      	bhi.n	80012ca <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	3b02      	subs	r3, #2
 8001286:	2b03      	cmp	r3, #3
 8001288:	d81b      	bhi.n	80012c2 <HAL_ADC_ConfigChannel+0x86>
 800128a:	a201      	add	r2, pc, #4	; (adr r2, 8001290 <HAL_ADC_ConfigChannel+0x54>)
 800128c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001290:	080012a1 	.word	0x080012a1
 8001294:	080012a9 	.word	0x080012a9
 8001298:	080012b1 	.word	0x080012b1
 800129c:	080012b9 	.word	0x080012b9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	220c      	movs	r2, #12
 80012a4:	605a      	str	r2, [r3, #4]
          break;
 80012a6:	e011      	b.n	80012cc <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	2212      	movs	r2, #18
 80012ac:	605a      	str	r2, [r3, #4]
          break;
 80012ae:	e00d      	b.n	80012cc <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	2218      	movs	r2, #24
 80012b4:	605a      	str	r2, [r3, #4]
          break;
 80012b6:	e009      	b.n	80012cc <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012be:	605a      	str	r2, [r3, #4]
          break;
 80012c0:	e004      	b.n	80012cc <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	2206      	movs	r2, #6
 80012c6:	605a      	str	r2, [r3, #4]
          break;
 80012c8:	e000      	b.n	80012cc <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80012ca:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6818      	ldr	r0, [r3, #0]
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	6859      	ldr	r1, [r3, #4]
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	461a      	mov	r2, r3
 80012da:	f7ff fad3 	bl	8000884 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff fbe5 	bl	8000ab2 <LL_ADC_REG_IsConversionOngoing>
 80012e8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff fbf1 	bl	8000ad8 <LL_ADC_INJ_IsConversionOngoing>
 80012f6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80012fa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	f040 81a6 	bne.w	8001650 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001304:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001308:	2b00      	cmp	r3, #0
 800130a:	f040 81a1 	bne.w	8001650 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6818      	ldr	r0, [r3, #0]
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	6819      	ldr	r1, [r3, #0]
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	461a      	mov	r2, r3
 800131c:	f7ff faf1 	bl	8000902 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	695a      	ldr	r2, [r3, #20]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	68db      	ldr	r3, [r3, #12]
 800132a:	08db      	lsrs	r3, r3, #3
 800132c:	f003 0303 	and.w	r3, r3, #3
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	691b      	ldr	r3, [r3, #16]
 800133e:	2b04      	cmp	r3, #4
 8001340:	d00a      	beq.n	8001358 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6818      	ldr	r0, [r3, #0]
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	6919      	ldr	r1, [r3, #16]
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001352:	f7ff fa2f 	bl	80007b4 <LL_ADC_SetOffset>
 8001356:	e17b      	b.n	8001650 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2100      	movs	r1, #0
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff fa4c 	bl	80007fc <LL_ADC_GetOffsetChannel>
 8001364:	4603      	mov	r3, r0
 8001366:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800136a:	2b00      	cmp	r3, #0
 800136c:	d10a      	bne.n	8001384 <HAL_ADC_ConfigChannel+0x148>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2100      	movs	r1, #0
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff fa41 	bl	80007fc <LL_ADC_GetOffsetChannel>
 800137a:	4603      	mov	r3, r0
 800137c:	0e9b      	lsrs	r3, r3, #26
 800137e:	f003 021f 	and.w	r2, r3, #31
 8001382:	e01e      	b.n	80013c2 <HAL_ADC_ConfigChannel+0x186>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2100      	movs	r1, #0
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff fa36 	bl	80007fc <LL_ADC_GetOffsetChannel>
 8001390:	4603      	mov	r3, r0
 8001392:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001396:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800139a:	fa93 f3a3 	rbit	r3, r3
 800139e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80013a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80013a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80013aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d101      	bne.n	80013b6 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80013b2:	2320      	movs	r3, #32
 80013b4:	e004      	b.n	80013c0 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80013b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80013ba:	fab3 f383 	clz	r3, r3
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d105      	bne.n	80013da <HAL_ADC_ConfigChannel+0x19e>
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	0e9b      	lsrs	r3, r3, #26
 80013d4:	f003 031f 	and.w	r3, r3, #31
 80013d8:	e018      	b.n	800140c <HAL_ADC_ConfigChannel+0x1d0>
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80013e6:	fa93 f3a3 	rbit	r3, r3
 80013ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80013ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80013f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80013f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d101      	bne.n	8001402 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80013fe:	2320      	movs	r3, #32
 8001400:	e004      	b.n	800140c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001402:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001406:	fab3 f383 	clz	r3, r3
 800140a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800140c:	429a      	cmp	r2, r3
 800140e:	d106      	bne.n	800141e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2200      	movs	r2, #0
 8001416:	2100      	movs	r1, #0
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff fa05 	bl	8000828 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2101      	movs	r1, #1
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff f9e9 	bl	80007fc <LL_ADC_GetOffsetChannel>
 800142a:	4603      	mov	r3, r0
 800142c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001430:	2b00      	cmp	r3, #0
 8001432:	d10a      	bne.n	800144a <HAL_ADC_ConfigChannel+0x20e>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2101      	movs	r1, #1
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff f9de 	bl	80007fc <LL_ADC_GetOffsetChannel>
 8001440:	4603      	mov	r3, r0
 8001442:	0e9b      	lsrs	r3, r3, #26
 8001444:	f003 021f 	and.w	r2, r3, #31
 8001448:	e01e      	b.n	8001488 <HAL_ADC_ConfigChannel+0x24c>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2101      	movs	r1, #1
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff f9d3 	bl	80007fc <LL_ADC_GetOffsetChannel>
 8001456:	4603      	mov	r3, r0
 8001458:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800145c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001460:	fa93 f3a3 	rbit	r3, r3
 8001464:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001468:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800146c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001470:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001474:	2b00      	cmp	r3, #0
 8001476:	d101      	bne.n	800147c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001478:	2320      	movs	r3, #32
 800147a:	e004      	b.n	8001486 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 800147c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001480:	fab3 f383 	clz	r3, r3
 8001484:	b2db      	uxtb	r3, r3
 8001486:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001490:	2b00      	cmp	r3, #0
 8001492:	d105      	bne.n	80014a0 <HAL_ADC_ConfigChannel+0x264>
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	0e9b      	lsrs	r3, r3, #26
 800149a:	f003 031f 	and.w	r3, r3, #31
 800149e:	e018      	b.n	80014d2 <HAL_ADC_ConfigChannel+0x296>
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80014ac:	fa93 f3a3 	rbit	r3, r3
 80014b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80014b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80014b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80014bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d101      	bne.n	80014c8 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80014c4:	2320      	movs	r3, #32
 80014c6:	e004      	b.n	80014d2 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80014c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80014cc:	fab3 f383 	clz	r3, r3
 80014d0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d106      	bne.n	80014e4 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2200      	movs	r2, #0
 80014dc:	2101      	movs	r1, #1
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff f9a2 	bl	8000828 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2102      	movs	r1, #2
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff f986 	bl	80007fc <LL_ADC_GetOffsetChannel>
 80014f0:	4603      	mov	r3, r0
 80014f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d10a      	bne.n	8001510 <HAL_ADC_ConfigChannel+0x2d4>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2102      	movs	r1, #2
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff f97b 	bl	80007fc <LL_ADC_GetOffsetChannel>
 8001506:	4603      	mov	r3, r0
 8001508:	0e9b      	lsrs	r3, r3, #26
 800150a:	f003 021f 	and.w	r2, r3, #31
 800150e:	e01e      	b.n	800154e <HAL_ADC_ConfigChannel+0x312>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2102      	movs	r1, #2
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff f970 	bl	80007fc <LL_ADC_GetOffsetChannel>
 800151c:	4603      	mov	r3, r0
 800151e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001522:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001526:	fa93 f3a3 	rbit	r3, r3
 800152a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800152e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001532:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001536:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800153a:	2b00      	cmp	r3, #0
 800153c:	d101      	bne.n	8001542 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800153e:	2320      	movs	r3, #32
 8001540:	e004      	b.n	800154c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001542:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001546:	fab3 f383 	clz	r3, r3
 800154a:	b2db      	uxtb	r3, r3
 800154c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001556:	2b00      	cmp	r3, #0
 8001558:	d105      	bne.n	8001566 <HAL_ADC_ConfigChannel+0x32a>
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	0e9b      	lsrs	r3, r3, #26
 8001560:	f003 031f 	and.w	r3, r3, #31
 8001564:	e016      	b.n	8001594 <HAL_ADC_ConfigChannel+0x358>
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800156e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001572:	fa93 f3a3 	rbit	r3, r3
 8001576:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001578:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800157a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800157e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001582:	2b00      	cmp	r3, #0
 8001584:	d101      	bne.n	800158a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001586:	2320      	movs	r3, #32
 8001588:	e004      	b.n	8001594 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800158a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800158e:	fab3 f383 	clz	r3, r3
 8001592:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001594:	429a      	cmp	r2, r3
 8001596:	d106      	bne.n	80015a6 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2200      	movs	r2, #0
 800159e:	2102      	movs	r1, #2
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff f941 	bl	8000828 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2103      	movs	r1, #3
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff f925 	bl	80007fc <LL_ADC_GetOffsetChannel>
 80015b2:	4603      	mov	r3, r0
 80015b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d10a      	bne.n	80015d2 <HAL_ADC_ConfigChannel+0x396>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2103      	movs	r1, #3
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff f91a 	bl	80007fc <LL_ADC_GetOffsetChannel>
 80015c8:	4603      	mov	r3, r0
 80015ca:	0e9b      	lsrs	r3, r3, #26
 80015cc:	f003 021f 	and.w	r2, r3, #31
 80015d0:	e017      	b.n	8001602 <HAL_ADC_ConfigChannel+0x3c6>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2103      	movs	r1, #3
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff f90f 	bl	80007fc <LL_ADC_GetOffsetChannel>
 80015de:	4603      	mov	r3, r0
 80015e0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80015e4:	fa93 f3a3 	rbit	r3, r3
 80015e8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80015ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80015ec:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80015ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d101      	bne.n	80015f8 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80015f4:	2320      	movs	r3, #32
 80015f6:	e003      	b.n	8001600 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80015f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80015fa:	fab3 f383 	clz	r3, r3
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800160a:	2b00      	cmp	r3, #0
 800160c:	d105      	bne.n	800161a <HAL_ADC_ConfigChannel+0x3de>
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	0e9b      	lsrs	r3, r3, #26
 8001614:	f003 031f 	and.w	r3, r3, #31
 8001618:	e011      	b.n	800163e <HAL_ADC_ConfigChannel+0x402>
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001620:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001622:	fa93 f3a3 	rbit	r3, r3
 8001626:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001628:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800162a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800162c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800162e:	2b00      	cmp	r3, #0
 8001630:	d101      	bne.n	8001636 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001632:	2320      	movs	r3, #32
 8001634:	e003      	b.n	800163e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001636:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001638:	fab3 f383 	clz	r3, r3
 800163c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800163e:	429a      	cmp	r2, r3
 8001640:	d106      	bne.n	8001650 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2200      	movs	r2, #0
 8001648:	2103      	movs	r1, #3
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff f8ec 	bl	8000828 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff fa05 	bl	8000a64 <LL_ADC_IsEnabled>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	f040 813f 	bne.w	80018e0 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6818      	ldr	r0, [r3, #0]
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	6819      	ldr	r1, [r3, #0]
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	461a      	mov	r2, r3
 8001670:	f7ff f972 	bl	8000958 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	4a8e      	ldr	r2, [pc, #568]	; (80018b4 <HAL_ADC_ConfigChannel+0x678>)
 800167a:	4293      	cmp	r3, r2
 800167c:	f040 8130 	bne.w	80018e0 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800168c:	2b00      	cmp	r3, #0
 800168e:	d10b      	bne.n	80016a8 <HAL_ADC_ConfigChannel+0x46c>
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	0e9b      	lsrs	r3, r3, #26
 8001696:	3301      	adds	r3, #1
 8001698:	f003 031f 	and.w	r3, r3, #31
 800169c:	2b09      	cmp	r3, #9
 800169e:	bf94      	ite	ls
 80016a0:	2301      	movls	r3, #1
 80016a2:	2300      	movhi	r3, #0
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	e019      	b.n	80016dc <HAL_ADC_ConfigChannel+0x4a0>
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016b0:	fa93 f3a3 	rbit	r3, r3
 80016b4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80016b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80016b8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80016ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d101      	bne.n	80016c4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80016c0:	2320      	movs	r3, #32
 80016c2:	e003      	b.n	80016cc <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80016c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80016c6:	fab3 f383 	clz	r3, r3
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	3301      	adds	r3, #1
 80016ce:	f003 031f 	and.w	r3, r3, #31
 80016d2:	2b09      	cmp	r3, #9
 80016d4:	bf94      	ite	ls
 80016d6:	2301      	movls	r3, #1
 80016d8:	2300      	movhi	r3, #0
 80016da:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d079      	beq.n	80017d4 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d107      	bne.n	80016fc <HAL_ADC_ConfigChannel+0x4c0>
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	0e9b      	lsrs	r3, r3, #26
 80016f2:	3301      	adds	r3, #1
 80016f4:	069b      	lsls	r3, r3, #26
 80016f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80016fa:	e015      	b.n	8001728 <HAL_ADC_ConfigChannel+0x4ec>
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001702:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001704:	fa93 f3a3 	rbit	r3, r3
 8001708:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800170a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800170c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800170e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001710:	2b00      	cmp	r3, #0
 8001712:	d101      	bne.n	8001718 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001714:	2320      	movs	r3, #32
 8001716:	e003      	b.n	8001720 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001718:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800171a:	fab3 f383 	clz	r3, r3
 800171e:	b2db      	uxtb	r3, r3
 8001720:	3301      	adds	r3, #1
 8001722:	069b      	lsls	r3, r3, #26
 8001724:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001730:	2b00      	cmp	r3, #0
 8001732:	d109      	bne.n	8001748 <HAL_ADC_ConfigChannel+0x50c>
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	0e9b      	lsrs	r3, r3, #26
 800173a:	3301      	adds	r3, #1
 800173c:	f003 031f 	and.w	r3, r3, #31
 8001740:	2101      	movs	r1, #1
 8001742:	fa01 f303 	lsl.w	r3, r1, r3
 8001746:	e017      	b.n	8001778 <HAL_ADC_ConfigChannel+0x53c>
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800174e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001750:	fa93 f3a3 	rbit	r3, r3
 8001754:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001756:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001758:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800175a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800175c:	2b00      	cmp	r3, #0
 800175e:	d101      	bne.n	8001764 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001760:	2320      	movs	r3, #32
 8001762:	e003      	b.n	800176c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001764:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001766:	fab3 f383 	clz	r3, r3
 800176a:	b2db      	uxtb	r3, r3
 800176c:	3301      	adds	r3, #1
 800176e:	f003 031f 	and.w	r3, r3, #31
 8001772:	2101      	movs	r1, #1
 8001774:	fa01 f303 	lsl.w	r3, r1, r3
 8001778:	ea42 0103 	orr.w	r1, r2, r3
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001784:	2b00      	cmp	r3, #0
 8001786:	d10a      	bne.n	800179e <HAL_ADC_ConfigChannel+0x562>
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	0e9b      	lsrs	r3, r3, #26
 800178e:	3301      	adds	r3, #1
 8001790:	f003 021f 	and.w	r2, r3, #31
 8001794:	4613      	mov	r3, r2
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	4413      	add	r3, r2
 800179a:	051b      	lsls	r3, r3, #20
 800179c:	e018      	b.n	80017d0 <HAL_ADC_ConfigChannel+0x594>
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017a6:	fa93 f3a3 	rbit	r3, r3
 80017aa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80017ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80017b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d101      	bne.n	80017ba <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80017b6:	2320      	movs	r3, #32
 80017b8:	e003      	b.n	80017c2 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80017ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017bc:	fab3 f383 	clz	r3, r3
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	3301      	adds	r3, #1
 80017c4:	f003 021f 	and.w	r2, r3, #31
 80017c8:	4613      	mov	r3, r2
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	4413      	add	r3, r2
 80017ce:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80017d0:	430b      	orrs	r3, r1
 80017d2:	e080      	b.n	80018d6 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d107      	bne.n	80017f0 <HAL_ADC_ConfigChannel+0x5b4>
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	0e9b      	lsrs	r3, r3, #26
 80017e6:	3301      	adds	r3, #1
 80017e8:	069b      	lsls	r3, r3, #26
 80017ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80017ee:	e015      	b.n	800181c <HAL_ADC_ConfigChannel+0x5e0>
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017f8:	fa93 f3a3 	rbit	r3, r3
 80017fc:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80017fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001800:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001804:	2b00      	cmp	r3, #0
 8001806:	d101      	bne.n	800180c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001808:	2320      	movs	r3, #32
 800180a:	e003      	b.n	8001814 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 800180c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800180e:	fab3 f383 	clz	r3, r3
 8001812:	b2db      	uxtb	r3, r3
 8001814:	3301      	adds	r3, #1
 8001816:	069b      	lsls	r3, r3, #26
 8001818:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001824:	2b00      	cmp	r3, #0
 8001826:	d109      	bne.n	800183c <HAL_ADC_ConfigChannel+0x600>
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	0e9b      	lsrs	r3, r3, #26
 800182e:	3301      	adds	r3, #1
 8001830:	f003 031f 	and.w	r3, r3, #31
 8001834:	2101      	movs	r1, #1
 8001836:	fa01 f303 	lsl.w	r3, r1, r3
 800183a:	e017      	b.n	800186c <HAL_ADC_ConfigChannel+0x630>
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001842:	6a3b      	ldr	r3, [r7, #32]
 8001844:	fa93 f3a3 	rbit	r3, r3
 8001848:	61fb      	str	r3, [r7, #28]
  return result;
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800184e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001850:	2b00      	cmp	r3, #0
 8001852:	d101      	bne.n	8001858 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001854:	2320      	movs	r3, #32
 8001856:	e003      	b.n	8001860 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185a:	fab3 f383 	clz	r3, r3
 800185e:	b2db      	uxtb	r3, r3
 8001860:	3301      	adds	r3, #1
 8001862:	f003 031f 	and.w	r3, r3, #31
 8001866:	2101      	movs	r1, #1
 8001868:	fa01 f303 	lsl.w	r3, r1, r3
 800186c:	ea42 0103 	orr.w	r1, r2, r3
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001878:	2b00      	cmp	r3, #0
 800187a:	d10d      	bne.n	8001898 <HAL_ADC_ConfigChannel+0x65c>
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	0e9b      	lsrs	r3, r3, #26
 8001882:	3301      	adds	r3, #1
 8001884:	f003 021f 	and.w	r2, r3, #31
 8001888:	4613      	mov	r3, r2
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	4413      	add	r3, r2
 800188e:	3b1e      	subs	r3, #30
 8001890:	051b      	lsls	r3, r3, #20
 8001892:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001896:	e01d      	b.n	80018d4 <HAL_ADC_ConfigChannel+0x698>
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	fa93 f3a3 	rbit	r3, r3
 80018a4:	613b      	str	r3, [r7, #16]
  return result;
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d103      	bne.n	80018b8 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80018b0:	2320      	movs	r3, #32
 80018b2:	e005      	b.n	80018c0 <HAL_ADC_ConfigChannel+0x684>
 80018b4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	fab3 f383 	clz	r3, r3
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	3301      	adds	r3, #1
 80018c2:	f003 021f 	and.w	r2, r3, #31
 80018c6:	4613      	mov	r3, r2
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	4413      	add	r3, r2
 80018cc:	3b1e      	subs	r3, #30
 80018ce:	051b      	lsls	r3, r3, #20
 80018d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80018d4:	430b      	orrs	r3, r1
 80018d6:	683a      	ldr	r2, [r7, #0]
 80018d8:	6892      	ldr	r2, [r2, #8]
 80018da:	4619      	mov	r1, r3
 80018dc:	f7ff f811 	bl	8000902 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	4b3d      	ldr	r3, [pc, #244]	; (80019dc <HAL_ADC_ConfigChannel+0x7a0>)
 80018e6:	4013      	ands	r3, r2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d06c      	beq.n	80019c6 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80018ec:	483c      	ldr	r0, [pc, #240]	; (80019e0 <HAL_ADC_ConfigChannel+0x7a4>)
 80018ee:	f7fe ff53 	bl	8000798 <LL_ADC_GetCommonPathInternalCh>
 80018f2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a3a      	ldr	r2, [pc, #232]	; (80019e4 <HAL_ADC_ConfigChannel+0x7a8>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d127      	bne.n	8001950 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001900:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001904:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d121      	bne.n	8001950 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a35      	ldr	r2, [pc, #212]	; (80019e8 <HAL_ADC_ConfigChannel+0x7ac>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d157      	bne.n	80019c6 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001916:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800191a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800191e:	4619      	mov	r1, r3
 8001920:	482f      	ldr	r0, [pc, #188]	; (80019e0 <HAL_ADC_ConfigChannel+0x7a4>)
 8001922:	f7fe ff26 	bl	8000772 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001926:	4b31      	ldr	r3, [pc, #196]	; (80019ec <HAL_ADC_ConfigChannel+0x7b0>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	099b      	lsrs	r3, r3, #6
 800192c:	4a30      	ldr	r2, [pc, #192]	; (80019f0 <HAL_ADC_ConfigChannel+0x7b4>)
 800192e:	fba2 2303 	umull	r2, r3, r2, r3
 8001932:	099b      	lsrs	r3, r3, #6
 8001934:	1c5a      	adds	r2, r3, #1
 8001936:	4613      	mov	r3, r2
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	4413      	add	r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001940:	e002      	b.n	8001948 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	3b01      	subs	r3, #1
 8001946:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1f9      	bne.n	8001942 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800194e:	e03a      	b.n	80019c6 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a27      	ldr	r2, [pc, #156]	; (80019f4 <HAL_ADC_ConfigChannel+0x7b8>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d113      	bne.n	8001982 <HAL_ADC_ConfigChannel+0x746>
 800195a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800195e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d10d      	bne.n	8001982 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a1f      	ldr	r2, [pc, #124]	; (80019e8 <HAL_ADC_ConfigChannel+0x7ac>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d12a      	bne.n	80019c6 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001970:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001974:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001978:	4619      	mov	r1, r3
 800197a:	4819      	ldr	r0, [pc, #100]	; (80019e0 <HAL_ADC_ConfigChannel+0x7a4>)
 800197c:	f7fe fef9 	bl	8000772 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001980:	e021      	b.n	80019c6 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a1c      	ldr	r2, [pc, #112]	; (80019f8 <HAL_ADC_ConfigChannel+0x7bc>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d11c      	bne.n	80019c6 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800198c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001990:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d116      	bne.n	80019c6 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a12      	ldr	r2, [pc, #72]	; (80019e8 <HAL_ADC_ConfigChannel+0x7ac>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d111      	bne.n	80019c6 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80019a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80019a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019aa:	4619      	mov	r1, r3
 80019ac:	480c      	ldr	r0, [pc, #48]	; (80019e0 <HAL_ADC_ConfigChannel+0x7a4>)
 80019ae:	f7fe fee0 	bl	8000772 <LL_ADC_SetCommonPathInternalCh>
 80019b2:	e008      	b.n	80019c6 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019b8:	f043 0220 	orr.w	r2, r3, #32
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80019ce:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	37d8      	adds	r7, #216	; 0xd8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	80080000 	.word	0x80080000
 80019e0:	50040300 	.word	0x50040300
 80019e4:	c7520000 	.word	0xc7520000
 80019e8:	50040000 	.word	0x50040000
 80019ec:	20000000 	.word	0x20000000
 80019f0:	053e2d63 	.word	0x053e2d63
 80019f4:	cb840000 	.word	0xcb840000
 80019f8:	80000001 	.word	0x80000001

080019fc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001a04:	2300      	movs	r3, #0
 8001a06:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff f829 	bl	8000a64 <LL_ADC_IsEnabled>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d169      	bne.n	8001aec <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	689a      	ldr	r2, [r3, #8]
 8001a1e:	4b36      	ldr	r3, [pc, #216]	; (8001af8 <ADC_Enable+0xfc>)
 8001a20:	4013      	ands	r3, r2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d00d      	beq.n	8001a42 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a2a:	f043 0210 	orr.w	r2, r3, #16
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a36:	f043 0201 	orr.w	r2, r3, #1
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e055      	b.n	8001aee <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7fe fff8 	bl	8000a3c <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001a4c:	482b      	ldr	r0, [pc, #172]	; (8001afc <ADC_Enable+0x100>)
 8001a4e:	f7fe fea3 	bl	8000798 <LL_ADC_GetCommonPathInternalCh>
 8001a52:	4603      	mov	r3, r0
 8001a54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d013      	beq.n	8001a84 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a5c:	4b28      	ldr	r3, [pc, #160]	; (8001b00 <ADC_Enable+0x104>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	099b      	lsrs	r3, r3, #6
 8001a62:	4a28      	ldr	r2, [pc, #160]	; (8001b04 <ADC_Enable+0x108>)
 8001a64:	fba2 2303 	umull	r2, r3, r2, r3
 8001a68:	099b      	lsrs	r3, r3, #6
 8001a6a:	1c5a      	adds	r2, r3, #1
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	4413      	add	r3, r2
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001a76:	e002      	b.n	8001a7e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d1f9      	bne.n	8001a78 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001a84:	f7fe fe56 	bl	8000734 <HAL_GetTick>
 8001a88:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001a8a:	e028      	b.n	8001ade <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7fe ffe7 	bl	8000a64 <LL_ADC_IsEnabled>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d104      	bne.n	8001aa6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7fe ffcb 	bl	8000a3c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001aa6:	f7fe fe45 	bl	8000734 <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d914      	bls.n	8001ade <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d00d      	beq.n	8001ade <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ac6:	f043 0210 	orr.w	r2, r3, #16
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad2:	f043 0201 	orr.w	r2, r3, #1
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e007      	b.n	8001aee <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0301 	and.w	r3, r3, #1
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d1cf      	bne.n	8001a8c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3710      	adds	r7, #16
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	8000003f 	.word	0x8000003f
 8001afc:	50040300 	.word	0x50040300
 8001b00:	20000000 	.word	0x20000000
 8001b04:	053e2d63 	.word	0x053e2d63

08001b08 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b14:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b1a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d14b      	bne.n	8001bba <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b26:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0308 	and.w	r3, r3, #8
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d021      	beq.n	8001b80 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7fe fe8c 	bl	800085e <LL_ADC_REG_IsTriggerSourceSWStart>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d032      	beq.n	8001bb2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d12b      	bne.n	8001bb2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d11f      	bne.n	8001bb2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b76:	f043 0201 	orr.w	r2, r3, #1
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	655a      	str	r2, [r3, #84]	; 0x54
 8001b7e:	e018      	b.n	8001bb2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d111      	bne.n	8001bb2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d105      	bne.n	8001bb2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001baa:	f043 0201 	orr.w	r2, r3, #1
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001bb2:	68f8      	ldr	r0, [r7, #12]
 8001bb4:	f7fe fc30 	bl	8000418 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001bb8:	e00e      	b.n	8001bd8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bbe:	f003 0310 	and.w	r3, r3, #16
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d003      	beq.n	8001bce <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8001bc6:	68f8      	ldr	r0, [r7, #12]
 8001bc8:	f7ff fb2e 	bl	8001228 <HAL_ADC_ErrorCallback>
}
 8001bcc:	e004      	b.n	8001bd8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	4798      	blx	r3
}
 8001bd8:	bf00      	nop
 8001bda:	3710      	adds	r7, #16
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bec:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001bee:	68f8      	ldr	r0, [r7, #12]
 8001bf0:	f7ff fb06 	bl	8001200 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001bf4:	bf00      	nop
 8001bf6:	3710      	adds	r7, #16
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c08:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c0e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c1a:	f043 0204 	orr.w	r2, r3, #4
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001c22:	68f8      	ldr	r0, [r7, #12]
 8001c24:	f7ff fb00 	bl	8001228 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c28:	bf00      	nop
 8001c2a:	3710      	adds	r7, #16
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ca4:	4b0c      	ldr	r3, [pc, #48]	; (8001cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001caa:	68ba      	ldr	r2, [r7, #8]
 8001cac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cc6:	4a04      	ldr	r2, [pc, #16]	; (8001cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	60d3      	str	r3, [r2, #12]
}
 8001ccc:	bf00      	nop
 8001cce:	3714      	adds	r7, #20
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	e000ed00 	.word	0xe000ed00

08001cdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ce0:	4b04      	ldr	r3, [pc, #16]	; (8001cf4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	0a1b      	lsrs	r3, r3, #8
 8001ce6:	f003 0307 	and.w	r3, r3, #7
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	e000ed00 	.word	0xe000ed00

08001cf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	db0b      	blt.n	8001d22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d0a:	79fb      	ldrb	r3, [r7, #7]
 8001d0c:	f003 021f 	and.w	r2, r3, #31
 8001d10:	4907      	ldr	r1, [pc, #28]	; (8001d30 <__NVIC_EnableIRQ+0x38>)
 8001d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d16:	095b      	lsrs	r3, r3, #5
 8001d18:	2001      	movs	r0, #1
 8001d1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	e000e100 	.word	0xe000e100

08001d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	6039      	str	r1, [r7, #0]
 8001d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	db0a      	blt.n	8001d5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	b2da      	uxtb	r2, r3
 8001d4c:	490c      	ldr	r1, [pc, #48]	; (8001d80 <__NVIC_SetPriority+0x4c>)
 8001d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d52:	0112      	lsls	r2, r2, #4
 8001d54:	b2d2      	uxtb	r2, r2
 8001d56:	440b      	add	r3, r1
 8001d58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d5c:	e00a      	b.n	8001d74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	b2da      	uxtb	r2, r3
 8001d62:	4908      	ldr	r1, [pc, #32]	; (8001d84 <__NVIC_SetPriority+0x50>)
 8001d64:	79fb      	ldrb	r3, [r7, #7]
 8001d66:	f003 030f 	and.w	r3, r3, #15
 8001d6a:	3b04      	subs	r3, #4
 8001d6c:	0112      	lsls	r2, r2, #4
 8001d6e:	b2d2      	uxtb	r2, r2
 8001d70:	440b      	add	r3, r1
 8001d72:	761a      	strb	r2, [r3, #24]
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	e000e100 	.word	0xe000e100
 8001d84:	e000ed00 	.word	0xe000ed00

08001d88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b089      	sub	sp, #36	; 0x24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f003 0307 	and.w	r3, r3, #7
 8001d9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	f1c3 0307 	rsb	r3, r3, #7
 8001da2:	2b04      	cmp	r3, #4
 8001da4:	bf28      	it	cs
 8001da6:	2304      	movcs	r3, #4
 8001da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	3304      	adds	r3, #4
 8001dae:	2b06      	cmp	r3, #6
 8001db0:	d902      	bls.n	8001db8 <NVIC_EncodePriority+0x30>
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	3b03      	subs	r3, #3
 8001db6:	e000      	b.n	8001dba <NVIC_EncodePriority+0x32>
 8001db8:	2300      	movs	r3, #0
 8001dba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	43da      	mvns	r2, r3
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	401a      	ands	r2, r3
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dda:	43d9      	mvns	r1, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de0:	4313      	orrs	r3, r2
         );
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3724      	adds	r7, #36	; 0x24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
	...

08001df0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e00:	d301      	bcc.n	8001e06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e02:	2301      	movs	r3, #1
 8001e04:	e00f      	b.n	8001e26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e06:	4a0a      	ldr	r2, [pc, #40]	; (8001e30 <SysTick_Config+0x40>)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e0e:	210f      	movs	r1, #15
 8001e10:	f04f 30ff 	mov.w	r0, #4294967295
 8001e14:	f7ff ff8e 	bl	8001d34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e18:	4b05      	ldr	r3, [pc, #20]	; (8001e30 <SysTick_Config+0x40>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e1e:	4b04      	ldr	r3, [pc, #16]	; (8001e30 <SysTick_Config+0x40>)
 8001e20:	2207      	movs	r2, #7
 8001e22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	e000e010 	.word	0xe000e010

08001e34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f7ff ff29 	bl	8001c94 <__NVIC_SetPriorityGrouping>
}
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b086      	sub	sp, #24
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	4603      	mov	r3, r0
 8001e52:	60b9      	str	r1, [r7, #8]
 8001e54:	607a      	str	r2, [r7, #4]
 8001e56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e5c:	f7ff ff3e 	bl	8001cdc <__NVIC_GetPriorityGrouping>
 8001e60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	68b9      	ldr	r1, [r7, #8]
 8001e66:	6978      	ldr	r0, [r7, #20]
 8001e68:	f7ff ff8e 	bl	8001d88 <NVIC_EncodePriority>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e72:	4611      	mov	r1, r2
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff ff5d 	bl	8001d34 <__NVIC_SetPriority>
}
 8001e7a:	bf00      	nop
 8001e7c:	3718      	adds	r7, #24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b082      	sub	sp, #8
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	4603      	mov	r3, r0
 8001e8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff ff31 	bl	8001cf8 <__NVIC_EnableIRQ>
}
 8001e96:	bf00      	nop
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b082      	sub	sp, #8
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f7ff ffa2 	bl	8001df0 <SysTick_Config>
 8001eac:	4603      	mov	r3, r0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
	...

08001eb8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d101      	bne.n	8001eca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e098      	b.n	8001ffc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	461a      	mov	r2, r3
 8001ed0:	4b4d      	ldr	r3, [pc, #308]	; (8002008 <HAL_DMA_Init+0x150>)
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d80f      	bhi.n	8001ef6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	461a      	mov	r2, r3
 8001edc:	4b4b      	ldr	r3, [pc, #300]	; (800200c <HAL_DMA_Init+0x154>)
 8001ede:	4413      	add	r3, r2
 8001ee0:	4a4b      	ldr	r2, [pc, #300]	; (8002010 <HAL_DMA_Init+0x158>)
 8001ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee6:	091b      	lsrs	r3, r3, #4
 8001ee8:	009a      	lsls	r2, r3, #2
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a48      	ldr	r2, [pc, #288]	; (8002014 <HAL_DMA_Init+0x15c>)
 8001ef2:	641a      	str	r2, [r3, #64]	; 0x40
 8001ef4:	e00e      	b.n	8001f14 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	461a      	mov	r2, r3
 8001efc:	4b46      	ldr	r3, [pc, #280]	; (8002018 <HAL_DMA_Init+0x160>)
 8001efe:	4413      	add	r3, r2
 8001f00:	4a43      	ldr	r2, [pc, #268]	; (8002010 <HAL_DMA_Init+0x158>)
 8001f02:	fba2 2303 	umull	r2, r3, r2, r3
 8001f06:	091b      	lsrs	r3, r3, #4
 8001f08:	009a      	lsls	r2, r3, #2
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a42      	ldr	r2, [pc, #264]	; (800201c <HAL_DMA_Init+0x164>)
 8001f12:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2202      	movs	r2, #2
 8001f18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f2e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001f38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a1b      	ldr	r3, [r3, #32]
 8001f56:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f6e:	d039      	beq.n	8001fe4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f74:	4a27      	ldr	r2, [pc, #156]	; (8002014 <HAL_DMA_Init+0x15c>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d11a      	bne.n	8001fb0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001f7a:	4b29      	ldr	r3, [pc, #164]	; (8002020 <HAL_DMA_Init+0x168>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f82:	f003 031c 	and.w	r3, r3, #28
 8001f86:	210f      	movs	r1, #15
 8001f88:	fa01 f303 	lsl.w	r3, r1, r3
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	4924      	ldr	r1, [pc, #144]	; (8002020 <HAL_DMA_Init+0x168>)
 8001f90:	4013      	ands	r3, r2
 8001f92:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001f94:	4b22      	ldr	r3, [pc, #136]	; (8002020 <HAL_DMA_Init+0x168>)
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6859      	ldr	r1, [r3, #4]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa0:	f003 031c 	and.w	r3, r3, #28
 8001fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa8:	491d      	ldr	r1, [pc, #116]	; (8002020 <HAL_DMA_Init+0x168>)
 8001faa:	4313      	orrs	r3, r2
 8001fac:	600b      	str	r3, [r1, #0]
 8001fae:	e019      	b.n	8001fe4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001fb0:	4b1c      	ldr	r3, [pc, #112]	; (8002024 <HAL_DMA_Init+0x16c>)
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb8:	f003 031c 	and.w	r3, r3, #28
 8001fbc:	210f      	movs	r1, #15
 8001fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc2:	43db      	mvns	r3, r3
 8001fc4:	4917      	ldr	r1, [pc, #92]	; (8002024 <HAL_DMA_Init+0x16c>)
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001fca:	4b16      	ldr	r3, [pc, #88]	; (8002024 <HAL_DMA_Init+0x16c>)
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6859      	ldr	r1, [r3, #4]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd6:	f003 031c 	and.w	r3, r3, #28
 8001fda:	fa01 f303 	lsl.w	r3, r1, r3
 8001fde:	4911      	ldr	r1, [pc, #68]	; (8002024 <HAL_DMA_Init+0x16c>)
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2201      	movs	r2, #1
 8001fee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3714      	adds	r7, #20
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr
 8002008:	40020407 	.word	0x40020407
 800200c:	bffdfff8 	.word	0xbffdfff8
 8002010:	cccccccd 	.word	0xcccccccd
 8002014:	40020000 	.word	0x40020000
 8002018:	bffdfbf8 	.word	0xbffdfbf8
 800201c:	40020400 	.word	0x40020400
 8002020:	400200a8 	.word	0x400200a8
 8002024:	400204a8 	.word	0x400204a8

08002028 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b086      	sub	sp, #24
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	60b9      	str	r1, [r7, #8]
 8002032:	607a      	str	r2, [r7, #4]
 8002034:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002036:	2300      	movs	r3, #0
 8002038:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002040:	2b01      	cmp	r3, #1
 8002042:	d101      	bne.n	8002048 <HAL_DMA_Start_IT+0x20>
 8002044:	2302      	movs	r3, #2
 8002046:	e04b      	b.n	80020e0 <HAL_DMA_Start_IT+0xb8>
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002056:	b2db      	uxtb	r3, r3
 8002058:	2b01      	cmp	r3, #1
 800205a:	d13a      	bne.n	80020d2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2202      	movs	r2, #2
 8002060:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2200      	movs	r2, #0
 8002068:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f022 0201 	bic.w	r2, r2, #1
 8002078:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	68b9      	ldr	r1, [r7, #8]
 8002080:	68f8      	ldr	r0, [r7, #12]
 8002082:	f000 f8e0 	bl	8002246 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208a:	2b00      	cmp	r3, #0
 800208c:	d008      	beq.n	80020a0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f042 020e 	orr.w	r2, r2, #14
 800209c:	601a      	str	r2, [r3, #0]
 800209e:	e00f      	b.n	80020c0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f022 0204 	bic.w	r2, r2, #4
 80020ae:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f042 020a 	orr.w	r2, r2, #10
 80020be:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f042 0201 	orr.w	r2, r2, #1
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	e005      	b.n	80020de <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80020da:	2302      	movs	r3, #2
 80020dc:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80020de:	7dfb      	ldrb	r3, [r7, #23]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3718      	adds	r7, #24
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002104:	f003 031c 	and.w	r3, r3, #28
 8002108:	2204      	movs	r2, #4
 800210a:	409a      	lsls	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	4013      	ands	r3, r2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d026      	beq.n	8002162 <HAL_DMA_IRQHandler+0x7a>
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	f003 0304 	and.w	r3, r3, #4
 800211a:	2b00      	cmp	r3, #0
 800211c:	d021      	beq.n	8002162 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0320 	and.w	r3, r3, #32
 8002128:	2b00      	cmp	r3, #0
 800212a:	d107      	bne.n	800213c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f022 0204 	bic.w	r2, r2, #4
 800213a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002140:	f003 021c 	and.w	r2, r3, #28
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002148:	2104      	movs	r1, #4
 800214a:	fa01 f202 	lsl.w	r2, r1, r2
 800214e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002154:	2b00      	cmp	r3, #0
 8002156:	d071      	beq.n	800223c <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002160:	e06c      	b.n	800223c <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002166:	f003 031c 	and.w	r3, r3, #28
 800216a:	2202      	movs	r2, #2
 800216c:	409a      	lsls	r2, r3
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	4013      	ands	r3, r2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d02e      	beq.n	80021d4 <HAL_DMA_IRQHandler+0xec>
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	f003 0302 	and.w	r3, r3, #2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d029      	beq.n	80021d4 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0320 	and.w	r3, r3, #32
 800218a:	2b00      	cmp	r3, #0
 800218c:	d10b      	bne.n	80021a6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f022 020a 	bic.w	r2, r2, #10
 800219c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2201      	movs	r2, #1
 80021a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021aa:	f003 021c 	and.w	r2, r3, #28
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b2:	2102      	movs	r1, #2
 80021b4:	fa01 f202 	lsl.w	r2, r1, r2
 80021b8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d038      	beq.n	800223c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80021d2:	e033      	b.n	800223c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d8:	f003 031c 	and.w	r3, r3, #28
 80021dc:	2208      	movs	r2, #8
 80021de:	409a      	lsls	r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	4013      	ands	r3, r2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d02a      	beq.n	800223e <HAL_DMA_IRQHandler+0x156>
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	f003 0308 	and.w	r3, r3, #8
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d025      	beq.n	800223e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f022 020e 	bic.w	r2, r2, #14
 8002200:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002206:	f003 021c 	and.w	r2, r3, #28
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	2101      	movs	r1, #1
 8002210:	fa01 f202 	lsl.w	r2, r1, r2
 8002214:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2201      	movs	r2, #1
 800221a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002230:	2b00      	cmp	r3, #0
 8002232:	d004      	beq.n	800223e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800223c:	bf00      	nop
 800223e:	bf00      	nop
}
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002246:	b480      	push	{r7}
 8002248:	b085      	sub	sp, #20
 800224a:	af00      	add	r7, sp, #0
 800224c:	60f8      	str	r0, [r7, #12]
 800224e:	60b9      	str	r1, [r7, #8]
 8002250:	607a      	str	r2, [r7, #4]
 8002252:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002258:	f003 021c 	and.w	r2, r3, #28
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002260:	2101      	movs	r1, #1
 8002262:	fa01 f202 	lsl.w	r2, r1, r2
 8002266:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	683a      	ldr	r2, [r7, #0]
 800226e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	2b10      	cmp	r3, #16
 8002276:	d108      	bne.n	800228a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	68ba      	ldr	r2, [r7, #8]
 8002286:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002288:	e007      	b.n	800229a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	68ba      	ldr	r2, [r7, #8]
 8002290:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	60da      	str	r2, [r3, #12]
}
 800229a:	bf00      	nop
 800229c:	3714      	adds	r7, #20
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
	...

080022a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b087      	sub	sp, #28
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022b2:	2300      	movs	r3, #0
 80022b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022b6:	e148      	b.n	800254a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	2101      	movs	r1, #1
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	fa01 f303 	lsl.w	r3, r1, r3
 80022c4:	4013      	ands	r3, r2
 80022c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	f000 813a 	beq.w	8002544 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f003 0303 	and.w	r3, r3, #3
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d005      	beq.n	80022e8 <HAL_GPIO_Init+0x40>
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f003 0303 	and.w	r3, r3, #3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d130      	bne.n	800234a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	2203      	movs	r2, #3
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	43db      	mvns	r3, r3
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	4013      	ands	r3, r2
 80022fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	68da      	ldr	r2, [r3, #12]
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	693a      	ldr	r2, [r7, #16]
 800230e:	4313      	orrs	r3, r2
 8002310:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	693a      	ldr	r2, [r7, #16]
 8002316:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800231e:	2201      	movs	r2, #1
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	43db      	mvns	r3, r3
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	4013      	ands	r3, r2
 800232c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	091b      	lsrs	r3, r3, #4
 8002334:	f003 0201 	and.w	r2, r3, #1
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	4313      	orrs	r3, r2
 8002342:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f003 0303 	and.w	r3, r3, #3
 8002352:	2b03      	cmp	r3, #3
 8002354:	d017      	beq.n	8002386 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	2203      	movs	r2, #3
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	43db      	mvns	r3, r3
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	4013      	ands	r3, r2
 800236c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	689a      	ldr	r2, [r3, #8]
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	4313      	orrs	r3, r2
 800237e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f003 0303 	and.w	r3, r3, #3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d123      	bne.n	80023da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	08da      	lsrs	r2, r3, #3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	3208      	adds	r2, #8
 800239a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800239e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	f003 0307 	and.w	r3, r3, #7
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	220f      	movs	r2, #15
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	43db      	mvns	r3, r3
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	4013      	ands	r3, r2
 80023b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	691a      	ldr	r2, [r3, #16]
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	f003 0307 	and.w	r3, r3, #7
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	08da      	lsrs	r2, r3, #3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	3208      	adds	r2, #8
 80023d4:	6939      	ldr	r1, [r7, #16]
 80023d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	2203      	movs	r2, #3
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	43db      	mvns	r3, r3
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	4013      	ands	r3, r2
 80023f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f003 0203 	and.w	r2, r3, #3
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	005b      	lsls	r3, r3, #1
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	4313      	orrs	r3, r2
 8002406:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002416:	2b00      	cmp	r3, #0
 8002418:	f000 8094 	beq.w	8002544 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800241c:	4b52      	ldr	r3, [pc, #328]	; (8002568 <HAL_GPIO_Init+0x2c0>)
 800241e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002420:	4a51      	ldr	r2, [pc, #324]	; (8002568 <HAL_GPIO_Init+0x2c0>)
 8002422:	f043 0301 	orr.w	r3, r3, #1
 8002426:	6613      	str	r3, [r2, #96]	; 0x60
 8002428:	4b4f      	ldr	r3, [pc, #316]	; (8002568 <HAL_GPIO_Init+0x2c0>)
 800242a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800242c:	f003 0301 	and.w	r3, r3, #1
 8002430:	60bb      	str	r3, [r7, #8]
 8002432:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002434:	4a4d      	ldr	r2, [pc, #308]	; (800256c <HAL_GPIO_Init+0x2c4>)
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	089b      	lsrs	r3, r3, #2
 800243a:	3302      	adds	r3, #2
 800243c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002440:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	f003 0303 	and.w	r3, r3, #3
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	220f      	movs	r2, #15
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	43db      	mvns	r3, r3
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	4013      	ands	r3, r2
 8002456:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800245e:	d00d      	beq.n	800247c <HAL_GPIO_Init+0x1d4>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a43      	ldr	r2, [pc, #268]	; (8002570 <HAL_GPIO_Init+0x2c8>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d007      	beq.n	8002478 <HAL_GPIO_Init+0x1d0>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a42      	ldr	r2, [pc, #264]	; (8002574 <HAL_GPIO_Init+0x2cc>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d101      	bne.n	8002474 <HAL_GPIO_Init+0x1cc>
 8002470:	2302      	movs	r3, #2
 8002472:	e004      	b.n	800247e <HAL_GPIO_Init+0x1d6>
 8002474:	2307      	movs	r3, #7
 8002476:	e002      	b.n	800247e <HAL_GPIO_Init+0x1d6>
 8002478:	2301      	movs	r3, #1
 800247a:	e000      	b.n	800247e <HAL_GPIO_Init+0x1d6>
 800247c:	2300      	movs	r3, #0
 800247e:	697a      	ldr	r2, [r7, #20]
 8002480:	f002 0203 	and.w	r2, r2, #3
 8002484:	0092      	lsls	r2, r2, #2
 8002486:	4093      	lsls	r3, r2
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	4313      	orrs	r3, r2
 800248c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800248e:	4937      	ldr	r1, [pc, #220]	; (800256c <HAL_GPIO_Init+0x2c4>)
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	089b      	lsrs	r3, r3, #2
 8002494:	3302      	adds	r3, #2
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800249c:	4b36      	ldr	r3, [pc, #216]	; (8002578 <HAL_GPIO_Init+0x2d0>)
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	43db      	mvns	r3, r3
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	4013      	ands	r3, r2
 80024aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d003      	beq.n	80024c0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	4313      	orrs	r3, r2
 80024be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024c0:	4a2d      	ldr	r2, [pc, #180]	; (8002578 <HAL_GPIO_Init+0x2d0>)
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80024c6:	4b2c      	ldr	r3, [pc, #176]	; (8002578 <HAL_GPIO_Init+0x2d0>)
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	43db      	mvns	r3, r3
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	4013      	ands	r3, r2
 80024d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d003      	beq.n	80024ea <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80024ea:	4a23      	ldr	r2, [pc, #140]	; (8002578 <HAL_GPIO_Init+0x2d0>)
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80024f0:	4b21      	ldr	r3, [pc, #132]	; (8002578 <HAL_GPIO_Init+0x2d0>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	43db      	mvns	r3, r3
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	4013      	ands	r3, r2
 80024fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d003      	beq.n	8002514 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	4313      	orrs	r3, r2
 8002512:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002514:	4a18      	ldr	r2, [pc, #96]	; (8002578 <HAL_GPIO_Init+0x2d0>)
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800251a:	4b17      	ldr	r3, [pc, #92]	; (8002578 <HAL_GPIO_Init+0x2d0>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	43db      	mvns	r3, r3
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	4013      	ands	r3, r2
 8002528:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d003      	beq.n	800253e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	4313      	orrs	r3, r2
 800253c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800253e:	4a0e      	ldr	r2, [pc, #56]	; (8002578 <HAL_GPIO_Init+0x2d0>)
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	3301      	adds	r3, #1
 8002548:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	fa22 f303 	lsr.w	r3, r2, r3
 8002554:	2b00      	cmp	r3, #0
 8002556:	f47f aeaf 	bne.w	80022b8 <HAL_GPIO_Init+0x10>
  }
}
 800255a:	bf00      	nop
 800255c:	bf00      	nop
 800255e:	371c      	adds	r7, #28
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr
 8002568:	40021000 	.word	0x40021000
 800256c:	40010000 	.word	0x40010000
 8002570:	48000400 	.word	0x48000400
 8002574:	48000800 	.word	0x48000800
 8002578:	40010400 	.word	0x40010400

0800257c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002580:	4b04      	ldr	r3, [pc, #16]	; (8002594 <HAL_PWREx_GetVoltageRange+0x18>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002588:	4618      	mov	r0, r3
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	40007000 	.word	0x40007000

08002598 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025a6:	d130      	bne.n	800260a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80025a8:	4b23      	ldr	r3, [pc, #140]	; (8002638 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80025b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025b4:	d038      	beq.n	8002628 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80025b6:	4b20      	ldr	r3, [pc, #128]	; (8002638 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80025be:	4a1e      	ldr	r2, [pc, #120]	; (8002638 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025c4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80025c6:	4b1d      	ldr	r3, [pc, #116]	; (800263c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2232      	movs	r2, #50	; 0x32
 80025cc:	fb02 f303 	mul.w	r3, r2, r3
 80025d0:	4a1b      	ldr	r2, [pc, #108]	; (8002640 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80025d2:	fba2 2303 	umull	r2, r3, r2, r3
 80025d6:	0c9b      	lsrs	r3, r3, #18
 80025d8:	3301      	adds	r3, #1
 80025da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025dc:	e002      	b.n	80025e4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	3b01      	subs	r3, #1
 80025e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025e4:	4b14      	ldr	r3, [pc, #80]	; (8002638 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025e6:	695b      	ldr	r3, [r3, #20]
 80025e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025f0:	d102      	bne.n	80025f8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d1f2      	bne.n	80025de <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025f8:	4b0f      	ldr	r3, [pc, #60]	; (8002638 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025fa:	695b      	ldr	r3, [r3, #20]
 80025fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002600:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002604:	d110      	bne.n	8002628 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e00f      	b.n	800262a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800260a:	4b0b      	ldr	r3, [pc, #44]	; (8002638 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002612:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002616:	d007      	beq.n	8002628 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002618:	4b07      	ldr	r3, [pc, #28]	; (8002638 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002620:	4a05      	ldr	r2, [pc, #20]	; (8002638 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002622:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002626:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	3714      	adds	r7, #20
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	40007000 	.word	0x40007000
 800263c:	20000000 	.word	0x20000000
 8002640:	431bde83 	.word	0x431bde83

08002644 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b088      	sub	sp, #32
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d102      	bne.n	8002658 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	f000 bc02 	b.w	8002e5c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002658:	4b96      	ldr	r3, [pc, #600]	; (80028b4 <HAL_RCC_OscConfig+0x270>)
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f003 030c 	and.w	r3, r3, #12
 8002660:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002662:	4b94      	ldr	r3, [pc, #592]	; (80028b4 <HAL_RCC_OscConfig+0x270>)
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	f003 0303 	and.w	r3, r3, #3
 800266a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0310 	and.w	r3, r3, #16
 8002674:	2b00      	cmp	r3, #0
 8002676:	f000 80e4 	beq.w	8002842 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d007      	beq.n	8002690 <HAL_RCC_OscConfig+0x4c>
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	2b0c      	cmp	r3, #12
 8002684:	f040 808b 	bne.w	800279e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	2b01      	cmp	r3, #1
 800268c:	f040 8087 	bne.w	800279e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002690:	4b88      	ldr	r3, [pc, #544]	; (80028b4 <HAL_RCC_OscConfig+0x270>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d005      	beq.n	80026a8 <HAL_RCC_OscConfig+0x64>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d101      	bne.n	80026a8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e3d9      	b.n	8002e5c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a1a      	ldr	r2, [r3, #32]
 80026ac:	4b81      	ldr	r3, [pc, #516]	; (80028b4 <HAL_RCC_OscConfig+0x270>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0308 	and.w	r3, r3, #8
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d004      	beq.n	80026c2 <HAL_RCC_OscConfig+0x7e>
 80026b8:	4b7e      	ldr	r3, [pc, #504]	; (80028b4 <HAL_RCC_OscConfig+0x270>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026c0:	e005      	b.n	80026ce <HAL_RCC_OscConfig+0x8a>
 80026c2:	4b7c      	ldr	r3, [pc, #496]	; (80028b4 <HAL_RCC_OscConfig+0x270>)
 80026c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026c8:	091b      	lsrs	r3, r3, #4
 80026ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d223      	bcs.n	800271a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a1b      	ldr	r3, [r3, #32]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f000 fd54 	bl	8003184 <RCC_SetFlashLatencyFromMSIRange>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e3ba      	b.n	8002e5c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026e6:	4b73      	ldr	r3, [pc, #460]	; (80028b4 <HAL_RCC_OscConfig+0x270>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a72      	ldr	r2, [pc, #456]	; (80028b4 <HAL_RCC_OscConfig+0x270>)
 80026ec:	f043 0308 	orr.w	r3, r3, #8
 80026f0:	6013      	str	r3, [r2, #0]
 80026f2:	4b70      	ldr	r3, [pc, #448]	; (80028b4 <HAL_RCC_OscConfig+0x270>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a1b      	ldr	r3, [r3, #32]
 80026fe:	496d      	ldr	r1, [pc, #436]	; (80028b4 <HAL_RCC_OscConfig+0x270>)
 8002700:	4313      	orrs	r3, r2
 8002702:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002704:	4b6b      	ldr	r3, [pc, #428]	; (80028b4 <HAL_RCC_OscConfig+0x270>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	69db      	ldr	r3, [r3, #28]
 8002710:	021b      	lsls	r3, r3, #8
 8002712:	4968      	ldr	r1, [pc, #416]	; (80028b4 <HAL_RCC_OscConfig+0x270>)
 8002714:	4313      	orrs	r3, r2
 8002716:	604b      	str	r3, [r1, #4]
 8002718:	e025      	b.n	8002766 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800271a:	4b66      	ldr	r3, [pc, #408]	; (80028b4 <HAL_RCC_OscConfig+0x270>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a65      	ldr	r2, [pc, #404]	; (80028b4 <HAL_RCC_OscConfig+0x270>)
 8002720:	f043 0308 	orr.w	r3, r3, #8
 8002724:	6013      	str	r3, [r2, #0]
 8002726:	4b63      	ldr	r3, [pc, #396]	; (80028b4 <HAL_RCC_OscConfig+0x270>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a1b      	ldr	r3, [r3, #32]
 8002732:	4960      	ldr	r1, [pc, #384]	; (80028b4 <HAL_RCC_OscConfig+0x270>)
 8002734:	4313      	orrs	r3, r2
 8002736:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002738:	4b5e      	ldr	r3, [pc, #376]	; (80028b4 <HAL_RCC_OscConfig+0x270>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	69db      	ldr	r3, [r3, #28]
 8002744:	021b      	lsls	r3, r3, #8
 8002746:	495b      	ldr	r1, [pc, #364]	; (80028b4 <HAL_RCC_OscConfig+0x270>)
 8002748:	4313      	orrs	r3, r2
 800274a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d109      	bne.n	8002766 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a1b      	ldr	r3, [r3, #32]
 8002756:	4618      	mov	r0, r3
 8002758:	f000 fd14 	bl	8003184 <RCC_SetFlashLatencyFromMSIRange>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e37a      	b.n	8002e5c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002766:	f000 fc81 	bl	800306c <HAL_RCC_GetSysClockFreq>
 800276a:	4602      	mov	r2, r0
 800276c:	4b51      	ldr	r3, [pc, #324]	; (80028b4 <HAL_RCC_OscConfig+0x270>)
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	091b      	lsrs	r3, r3, #4
 8002772:	f003 030f 	and.w	r3, r3, #15
 8002776:	4950      	ldr	r1, [pc, #320]	; (80028b8 <HAL_RCC_OscConfig+0x274>)
 8002778:	5ccb      	ldrb	r3, [r1, r3]
 800277a:	f003 031f 	and.w	r3, r3, #31
 800277e:	fa22 f303 	lsr.w	r3, r2, r3
 8002782:	4a4e      	ldr	r2, [pc, #312]	; (80028bc <HAL_RCC_OscConfig+0x278>)
 8002784:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002786:	4b4e      	ldr	r3, [pc, #312]	; (80028c0 <HAL_RCC_OscConfig+0x27c>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4618      	mov	r0, r3
 800278c:	f7fd ff82 	bl	8000694 <HAL_InitTick>
 8002790:	4603      	mov	r3, r0
 8002792:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002794:	7bfb      	ldrb	r3, [r7, #15]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d052      	beq.n	8002840 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800279a:	7bfb      	ldrb	r3, [r7, #15]
 800279c:	e35e      	b.n	8002e5c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d032      	beq.n	800280c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80027a6:	4b43      	ldr	r3, [pc, #268]	; (80028b4 <HAL_RCC_OscConfig+0x270>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a42      	ldr	r2, [pc, #264]	; (80028b4 <HAL_RCC_OscConfig+0x270>)
 80027ac:	f043 0301 	orr.w	r3, r3, #1
 80027b0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027b2:	f7fd ffbf 	bl	8000734 <HAL_GetTick>
 80027b6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027b8:	e008      	b.n	80027cc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027ba:	f7fd ffbb 	bl	8000734 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d901      	bls.n	80027cc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e347      	b.n	8002e5c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027cc:	4b39      	ldr	r3, [pc, #228]	; (80028b4 <HAL_RCC_OscConfig+0x270>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d0f0      	beq.n	80027ba <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027d8:	4b36      	ldr	r3, [pc, #216]	; (80028b4 <HAL_RCC_OscConfig+0x270>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a35      	ldr	r2, [pc, #212]	; (80028b4 <HAL_RCC_OscConfig+0x270>)
 80027de:	f043 0308 	orr.w	r3, r3, #8
 80027e2:	6013      	str	r3, [r2, #0]
 80027e4:	4b33      	ldr	r3, [pc, #204]	; (80028b4 <HAL_RCC_OscConfig+0x270>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a1b      	ldr	r3, [r3, #32]
 80027f0:	4930      	ldr	r1, [pc, #192]	; (80028b4 <HAL_RCC_OscConfig+0x270>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027f6:	4b2f      	ldr	r3, [pc, #188]	; (80028b4 <HAL_RCC_OscConfig+0x270>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	69db      	ldr	r3, [r3, #28]
 8002802:	021b      	lsls	r3, r3, #8
 8002804:	492b      	ldr	r1, [pc, #172]	; (80028b4 <HAL_RCC_OscConfig+0x270>)
 8002806:	4313      	orrs	r3, r2
 8002808:	604b      	str	r3, [r1, #4]
 800280a:	e01a      	b.n	8002842 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800280c:	4b29      	ldr	r3, [pc, #164]	; (80028b4 <HAL_RCC_OscConfig+0x270>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a28      	ldr	r2, [pc, #160]	; (80028b4 <HAL_RCC_OscConfig+0x270>)
 8002812:	f023 0301 	bic.w	r3, r3, #1
 8002816:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002818:	f7fd ff8c 	bl	8000734 <HAL_GetTick>
 800281c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800281e:	e008      	b.n	8002832 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002820:	f7fd ff88 	bl	8000734 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b02      	cmp	r3, #2
 800282c:	d901      	bls.n	8002832 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e314      	b.n	8002e5c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002832:	4b20      	ldr	r3, [pc, #128]	; (80028b4 <HAL_RCC_OscConfig+0x270>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1f0      	bne.n	8002820 <HAL_RCC_OscConfig+0x1dc>
 800283e:	e000      	b.n	8002842 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002840:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	2b00      	cmp	r3, #0
 800284c:	d073      	beq.n	8002936 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	2b08      	cmp	r3, #8
 8002852:	d005      	beq.n	8002860 <HAL_RCC_OscConfig+0x21c>
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	2b0c      	cmp	r3, #12
 8002858:	d10e      	bne.n	8002878 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	2b03      	cmp	r3, #3
 800285e:	d10b      	bne.n	8002878 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002860:	4b14      	ldr	r3, [pc, #80]	; (80028b4 <HAL_RCC_OscConfig+0x270>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d063      	beq.n	8002934 <HAL_RCC_OscConfig+0x2f0>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d15f      	bne.n	8002934 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e2f1      	b.n	8002e5c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002880:	d106      	bne.n	8002890 <HAL_RCC_OscConfig+0x24c>
 8002882:	4b0c      	ldr	r3, [pc, #48]	; (80028b4 <HAL_RCC_OscConfig+0x270>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a0b      	ldr	r2, [pc, #44]	; (80028b4 <HAL_RCC_OscConfig+0x270>)
 8002888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800288c:	6013      	str	r3, [r2, #0]
 800288e:	e025      	b.n	80028dc <HAL_RCC_OscConfig+0x298>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002898:	d114      	bne.n	80028c4 <HAL_RCC_OscConfig+0x280>
 800289a:	4b06      	ldr	r3, [pc, #24]	; (80028b4 <HAL_RCC_OscConfig+0x270>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a05      	ldr	r2, [pc, #20]	; (80028b4 <HAL_RCC_OscConfig+0x270>)
 80028a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028a4:	6013      	str	r3, [r2, #0]
 80028a6:	4b03      	ldr	r3, [pc, #12]	; (80028b4 <HAL_RCC_OscConfig+0x270>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a02      	ldr	r2, [pc, #8]	; (80028b4 <HAL_RCC_OscConfig+0x270>)
 80028ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028b0:	6013      	str	r3, [r2, #0]
 80028b2:	e013      	b.n	80028dc <HAL_RCC_OscConfig+0x298>
 80028b4:	40021000 	.word	0x40021000
 80028b8:	08003884 	.word	0x08003884
 80028bc:	20000000 	.word	0x20000000
 80028c0:	20000004 	.word	0x20000004
 80028c4:	4ba0      	ldr	r3, [pc, #640]	; (8002b48 <HAL_RCC_OscConfig+0x504>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a9f      	ldr	r2, [pc, #636]	; (8002b48 <HAL_RCC_OscConfig+0x504>)
 80028ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ce:	6013      	str	r3, [r2, #0]
 80028d0:	4b9d      	ldr	r3, [pc, #628]	; (8002b48 <HAL_RCC_OscConfig+0x504>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a9c      	ldr	r2, [pc, #624]	; (8002b48 <HAL_RCC_OscConfig+0x504>)
 80028d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d013      	beq.n	800290c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e4:	f7fd ff26 	bl	8000734 <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028ec:	f7fd ff22 	bl	8000734 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b64      	cmp	r3, #100	; 0x64
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e2ae      	b.n	8002e5c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028fe:	4b92      	ldr	r3, [pc, #584]	; (8002b48 <HAL_RCC_OscConfig+0x504>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d0f0      	beq.n	80028ec <HAL_RCC_OscConfig+0x2a8>
 800290a:	e014      	b.n	8002936 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800290c:	f7fd ff12 	bl	8000734 <HAL_GetTick>
 8002910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002912:	e008      	b.n	8002926 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002914:	f7fd ff0e 	bl	8000734 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b64      	cmp	r3, #100	; 0x64
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e29a      	b.n	8002e5c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002926:	4b88      	ldr	r3, [pc, #544]	; (8002b48 <HAL_RCC_OscConfig+0x504>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1f0      	bne.n	8002914 <HAL_RCC_OscConfig+0x2d0>
 8002932:	e000      	b.n	8002936 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002934:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d060      	beq.n	8002a04 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	2b04      	cmp	r3, #4
 8002946:	d005      	beq.n	8002954 <HAL_RCC_OscConfig+0x310>
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	2b0c      	cmp	r3, #12
 800294c:	d119      	bne.n	8002982 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	2b02      	cmp	r3, #2
 8002952:	d116      	bne.n	8002982 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002954:	4b7c      	ldr	r3, [pc, #496]	; (8002b48 <HAL_RCC_OscConfig+0x504>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800295c:	2b00      	cmp	r3, #0
 800295e:	d005      	beq.n	800296c <HAL_RCC_OscConfig+0x328>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d101      	bne.n	800296c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e277      	b.n	8002e5c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800296c:	4b76      	ldr	r3, [pc, #472]	; (8002b48 <HAL_RCC_OscConfig+0x504>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	691b      	ldr	r3, [r3, #16]
 8002978:	061b      	lsls	r3, r3, #24
 800297a:	4973      	ldr	r1, [pc, #460]	; (8002b48 <HAL_RCC_OscConfig+0x504>)
 800297c:	4313      	orrs	r3, r2
 800297e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002980:	e040      	b.n	8002a04 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d023      	beq.n	80029d2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800298a:	4b6f      	ldr	r3, [pc, #444]	; (8002b48 <HAL_RCC_OscConfig+0x504>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a6e      	ldr	r2, [pc, #440]	; (8002b48 <HAL_RCC_OscConfig+0x504>)
 8002990:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002994:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002996:	f7fd fecd 	bl	8000734 <HAL_GetTick>
 800299a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800299c:	e008      	b.n	80029b0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800299e:	f7fd fec9 	bl	8000734 <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d901      	bls.n	80029b0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e255      	b.n	8002e5c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029b0:	4b65      	ldr	r3, [pc, #404]	; (8002b48 <HAL_RCC_OscConfig+0x504>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d0f0      	beq.n	800299e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029bc:	4b62      	ldr	r3, [pc, #392]	; (8002b48 <HAL_RCC_OscConfig+0x504>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	691b      	ldr	r3, [r3, #16]
 80029c8:	061b      	lsls	r3, r3, #24
 80029ca:	495f      	ldr	r1, [pc, #380]	; (8002b48 <HAL_RCC_OscConfig+0x504>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	604b      	str	r3, [r1, #4]
 80029d0:	e018      	b.n	8002a04 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029d2:	4b5d      	ldr	r3, [pc, #372]	; (8002b48 <HAL_RCC_OscConfig+0x504>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a5c      	ldr	r2, [pc, #368]	; (8002b48 <HAL_RCC_OscConfig+0x504>)
 80029d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029de:	f7fd fea9 	bl	8000734 <HAL_GetTick>
 80029e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029e4:	e008      	b.n	80029f8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029e6:	f7fd fea5 	bl	8000734 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e231      	b.n	8002e5c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029f8:	4b53      	ldr	r3, [pc, #332]	; (8002b48 <HAL_RCC_OscConfig+0x504>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d1f0      	bne.n	80029e6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0308 	and.w	r3, r3, #8
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d03c      	beq.n	8002a8a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	695b      	ldr	r3, [r3, #20]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d01c      	beq.n	8002a52 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a18:	4b4b      	ldr	r3, [pc, #300]	; (8002b48 <HAL_RCC_OscConfig+0x504>)
 8002a1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a1e:	4a4a      	ldr	r2, [pc, #296]	; (8002b48 <HAL_RCC_OscConfig+0x504>)
 8002a20:	f043 0301 	orr.w	r3, r3, #1
 8002a24:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a28:	f7fd fe84 	bl	8000734 <HAL_GetTick>
 8002a2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a2e:	e008      	b.n	8002a42 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a30:	f7fd fe80 	bl	8000734 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e20c      	b.n	8002e5c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a42:	4b41      	ldr	r3, [pc, #260]	; (8002b48 <HAL_RCC_OscConfig+0x504>)
 8002a44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a48:	f003 0302 	and.w	r3, r3, #2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d0ef      	beq.n	8002a30 <HAL_RCC_OscConfig+0x3ec>
 8002a50:	e01b      	b.n	8002a8a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a52:	4b3d      	ldr	r3, [pc, #244]	; (8002b48 <HAL_RCC_OscConfig+0x504>)
 8002a54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a58:	4a3b      	ldr	r2, [pc, #236]	; (8002b48 <HAL_RCC_OscConfig+0x504>)
 8002a5a:	f023 0301 	bic.w	r3, r3, #1
 8002a5e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a62:	f7fd fe67 	bl	8000734 <HAL_GetTick>
 8002a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a68:	e008      	b.n	8002a7c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a6a:	f7fd fe63 	bl	8000734 <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d901      	bls.n	8002a7c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e1ef      	b.n	8002e5c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a7c:	4b32      	ldr	r3, [pc, #200]	; (8002b48 <HAL_RCC_OscConfig+0x504>)
 8002a7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1ef      	bne.n	8002a6a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0304 	and.w	r3, r3, #4
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f000 80a6 	beq.w	8002be4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002a9c:	4b2a      	ldr	r3, [pc, #168]	; (8002b48 <HAL_RCC_OscConfig+0x504>)
 8002a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d10d      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aa8:	4b27      	ldr	r3, [pc, #156]	; (8002b48 <HAL_RCC_OscConfig+0x504>)
 8002aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aac:	4a26      	ldr	r2, [pc, #152]	; (8002b48 <HAL_RCC_OscConfig+0x504>)
 8002aae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ab2:	6593      	str	r3, [r2, #88]	; 0x58
 8002ab4:	4b24      	ldr	r3, [pc, #144]	; (8002b48 <HAL_RCC_OscConfig+0x504>)
 8002ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002abc:	60bb      	str	r3, [r7, #8]
 8002abe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ac4:	4b21      	ldr	r3, [pc, #132]	; (8002b4c <HAL_RCC_OscConfig+0x508>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d118      	bne.n	8002b02 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ad0:	4b1e      	ldr	r3, [pc, #120]	; (8002b4c <HAL_RCC_OscConfig+0x508>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a1d      	ldr	r2, [pc, #116]	; (8002b4c <HAL_RCC_OscConfig+0x508>)
 8002ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ada:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002adc:	f7fd fe2a 	bl	8000734 <HAL_GetTick>
 8002ae0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ae4:	f7fd fe26 	bl	8000734 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e1b2      	b.n	8002e5c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002af6:	4b15      	ldr	r3, [pc, #84]	; (8002b4c <HAL_RCC_OscConfig+0x508>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d0f0      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d108      	bne.n	8002b1c <HAL_RCC_OscConfig+0x4d8>
 8002b0a:	4b0f      	ldr	r3, [pc, #60]	; (8002b48 <HAL_RCC_OscConfig+0x504>)
 8002b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b10:	4a0d      	ldr	r2, [pc, #52]	; (8002b48 <HAL_RCC_OscConfig+0x504>)
 8002b12:	f043 0301 	orr.w	r3, r3, #1
 8002b16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b1a:	e029      	b.n	8002b70 <HAL_RCC_OscConfig+0x52c>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	2b05      	cmp	r3, #5
 8002b22:	d115      	bne.n	8002b50 <HAL_RCC_OscConfig+0x50c>
 8002b24:	4b08      	ldr	r3, [pc, #32]	; (8002b48 <HAL_RCC_OscConfig+0x504>)
 8002b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b2a:	4a07      	ldr	r2, [pc, #28]	; (8002b48 <HAL_RCC_OscConfig+0x504>)
 8002b2c:	f043 0304 	orr.w	r3, r3, #4
 8002b30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b34:	4b04      	ldr	r3, [pc, #16]	; (8002b48 <HAL_RCC_OscConfig+0x504>)
 8002b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b3a:	4a03      	ldr	r2, [pc, #12]	; (8002b48 <HAL_RCC_OscConfig+0x504>)
 8002b3c:	f043 0301 	orr.w	r3, r3, #1
 8002b40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b44:	e014      	b.n	8002b70 <HAL_RCC_OscConfig+0x52c>
 8002b46:	bf00      	nop
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	40007000 	.word	0x40007000
 8002b50:	4b9a      	ldr	r3, [pc, #616]	; (8002dbc <HAL_RCC_OscConfig+0x778>)
 8002b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b56:	4a99      	ldr	r2, [pc, #612]	; (8002dbc <HAL_RCC_OscConfig+0x778>)
 8002b58:	f023 0301 	bic.w	r3, r3, #1
 8002b5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b60:	4b96      	ldr	r3, [pc, #600]	; (8002dbc <HAL_RCC_OscConfig+0x778>)
 8002b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b66:	4a95      	ldr	r2, [pc, #596]	; (8002dbc <HAL_RCC_OscConfig+0x778>)
 8002b68:	f023 0304 	bic.w	r3, r3, #4
 8002b6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d016      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b78:	f7fd fddc 	bl	8000734 <HAL_GetTick>
 8002b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b7e:	e00a      	b.n	8002b96 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b80:	f7fd fdd8 	bl	8000734 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e162      	b.n	8002e5c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b96:	4b89      	ldr	r3, [pc, #548]	; (8002dbc <HAL_RCC_OscConfig+0x778>)
 8002b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b9c:	f003 0302 	and.w	r3, r3, #2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d0ed      	beq.n	8002b80 <HAL_RCC_OscConfig+0x53c>
 8002ba4:	e015      	b.n	8002bd2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba6:	f7fd fdc5 	bl	8000734 <HAL_GetTick>
 8002baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bac:	e00a      	b.n	8002bc4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bae:	f7fd fdc1 	bl	8000734 <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d901      	bls.n	8002bc4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e14b      	b.n	8002e5c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bc4:	4b7d      	ldr	r3, [pc, #500]	; (8002dbc <HAL_RCC_OscConfig+0x778>)
 8002bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1ed      	bne.n	8002bae <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bd2:	7ffb      	ldrb	r3, [r7, #31]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d105      	bne.n	8002be4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bd8:	4b78      	ldr	r3, [pc, #480]	; (8002dbc <HAL_RCC_OscConfig+0x778>)
 8002bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bdc:	4a77      	ldr	r2, [pc, #476]	; (8002dbc <HAL_RCC_OscConfig+0x778>)
 8002bde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002be2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0320 	and.w	r3, r3, #32
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d03c      	beq.n	8002c6a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d01c      	beq.n	8002c32 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002bf8:	4b70      	ldr	r3, [pc, #448]	; (8002dbc <HAL_RCC_OscConfig+0x778>)
 8002bfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bfe:	4a6f      	ldr	r2, [pc, #444]	; (8002dbc <HAL_RCC_OscConfig+0x778>)
 8002c00:	f043 0301 	orr.w	r3, r3, #1
 8002c04:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c08:	f7fd fd94 	bl	8000734 <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c10:	f7fd fd90 	bl	8000734 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e11c      	b.n	8002e5c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c22:	4b66      	ldr	r3, [pc, #408]	; (8002dbc <HAL_RCC_OscConfig+0x778>)
 8002c24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d0ef      	beq.n	8002c10 <HAL_RCC_OscConfig+0x5cc>
 8002c30:	e01b      	b.n	8002c6a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c32:	4b62      	ldr	r3, [pc, #392]	; (8002dbc <HAL_RCC_OscConfig+0x778>)
 8002c34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c38:	4a60      	ldr	r2, [pc, #384]	; (8002dbc <HAL_RCC_OscConfig+0x778>)
 8002c3a:	f023 0301 	bic.w	r3, r3, #1
 8002c3e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c42:	f7fd fd77 	bl	8000734 <HAL_GetTick>
 8002c46:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c48:	e008      	b.n	8002c5c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c4a:	f7fd fd73 	bl	8000734 <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d901      	bls.n	8002c5c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e0ff      	b.n	8002e5c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c5c:	4b57      	ldr	r3, [pc, #348]	; (8002dbc <HAL_RCC_OscConfig+0x778>)
 8002c5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1ef      	bne.n	8002c4a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	f000 80f3 	beq.w	8002e5a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	f040 80c9 	bne.w	8002e10 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002c7e:	4b4f      	ldr	r3, [pc, #316]	; (8002dbc <HAL_RCC_OscConfig+0x778>)
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	f003 0203 	and.w	r2, r3, #3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d12c      	bne.n	8002cec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d123      	bne.n	8002cec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cae:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d11b      	bne.n	8002cec <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cbe:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d113      	bne.n	8002cec <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cce:	085b      	lsrs	r3, r3, #1
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d109      	bne.n	8002cec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce2:	085b      	lsrs	r3, r3, #1
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d06b      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	2b0c      	cmp	r3, #12
 8002cf0:	d062      	beq.n	8002db8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002cf2:	4b32      	ldr	r3, [pc, #200]	; (8002dbc <HAL_RCC_OscConfig+0x778>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e0ac      	b.n	8002e5c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002d02:	4b2e      	ldr	r3, [pc, #184]	; (8002dbc <HAL_RCC_OscConfig+0x778>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a2d      	ldr	r2, [pc, #180]	; (8002dbc <HAL_RCC_OscConfig+0x778>)
 8002d08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d0c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d0e:	f7fd fd11 	bl	8000734 <HAL_GetTick>
 8002d12:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d14:	e008      	b.n	8002d28 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d16:	f7fd fd0d 	bl	8000734 <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d901      	bls.n	8002d28 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e099      	b.n	8002e5c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d28:	4b24      	ldr	r3, [pc, #144]	; (8002dbc <HAL_RCC_OscConfig+0x778>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d1f0      	bne.n	8002d16 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d34:	4b21      	ldr	r3, [pc, #132]	; (8002dbc <HAL_RCC_OscConfig+0x778>)
 8002d36:	68da      	ldr	r2, [r3, #12]
 8002d38:	4b21      	ldr	r3, [pc, #132]	; (8002dc0 <HAL_RCC_OscConfig+0x77c>)
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002d44:	3a01      	subs	r2, #1
 8002d46:	0112      	lsls	r2, r2, #4
 8002d48:	4311      	orrs	r1, r2
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d4e:	0212      	lsls	r2, r2, #8
 8002d50:	4311      	orrs	r1, r2
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002d56:	0852      	lsrs	r2, r2, #1
 8002d58:	3a01      	subs	r2, #1
 8002d5a:	0552      	lsls	r2, r2, #21
 8002d5c:	4311      	orrs	r1, r2
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002d62:	0852      	lsrs	r2, r2, #1
 8002d64:	3a01      	subs	r2, #1
 8002d66:	0652      	lsls	r2, r2, #25
 8002d68:	4311      	orrs	r1, r2
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d6e:	06d2      	lsls	r2, r2, #27
 8002d70:	430a      	orrs	r2, r1
 8002d72:	4912      	ldr	r1, [pc, #72]	; (8002dbc <HAL_RCC_OscConfig+0x778>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002d78:	4b10      	ldr	r3, [pc, #64]	; (8002dbc <HAL_RCC_OscConfig+0x778>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a0f      	ldr	r2, [pc, #60]	; (8002dbc <HAL_RCC_OscConfig+0x778>)
 8002d7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d82:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d84:	4b0d      	ldr	r3, [pc, #52]	; (8002dbc <HAL_RCC_OscConfig+0x778>)
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	4a0c      	ldr	r2, [pc, #48]	; (8002dbc <HAL_RCC_OscConfig+0x778>)
 8002d8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d8e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d90:	f7fd fcd0 	bl	8000734 <HAL_GetTick>
 8002d94:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d96:	e008      	b.n	8002daa <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d98:	f7fd fccc 	bl	8000734 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e058      	b.n	8002e5c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002daa:	4b04      	ldr	r3, [pc, #16]	; (8002dbc <HAL_RCC_OscConfig+0x778>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d0f0      	beq.n	8002d98 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002db6:	e050      	b.n	8002e5a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e04f      	b.n	8002e5c <HAL_RCC_OscConfig+0x818>
 8002dbc:	40021000 	.word	0x40021000
 8002dc0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dc4:	4b27      	ldr	r3, [pc, #156]	; (8002e64 <HAL_RCC_OscConfig+0x820>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d144      	bne.n	8002e5a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002dd0:	4b24      	ldr	r3, [pc, #144]	; (8002e64 <HAL_RCC_OscConfig+0x820>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a23      	ldr	r2, [pc, #140]	; (8002e64 <HAL_RCC_OscConfig+0x820>)
 8002dd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dda:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ddc:	4b21      	ldr	r3, [pc, #132]	; (8002e64 <HAL_RCC_OscConfig+0x820>)
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	4a20      	ldr	r2, [pc, #128]	; (8002e64 <HAL_RCC_OscConfig+0x820>)
 8002de2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002de6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002de8:	f7fd fca4 	bl	8000734 <HAL_GetTick>
 8002dec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dee:	e008      	b.n	8002e02 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002df0:	f7fd fca0 	bl	8000734 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e02c      	b.n	8002e5c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e02:	4b18      	ldr	r3, [pc, #96]	; (8002e64 <HAL_RCC_OscConfig+0x820>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d0f0      	beq.n	8002df0 <HAL_RCC_OscConfig+0x7ac>
 8002e0e:	e024      	b.n	8002e5a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	2b0c      	cmp	r3, #12
 8002e14:	d01f      	beq.n	8002e56 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e16:	4b13      	ldr	r3, [pc, #76]	; (8002e64 <HAL_RCC_OscConfig+0x820>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a12      	ldr	r2, [pc, #72]	; (8002e64 <HAL_RCC_OscConfig+0x820>)
 8002e1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e22:	f7fd fc87 	bl	8000734 <HAL_GetTick>
 8002e26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e28:	e008      	b.n	8002e3c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e2a:	f7fd fc83 	bl	8000734 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d901      	bls.n	8002e3c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e00f      	b.n	8002e5c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e3c:	4b09      	ldr	r3, [pc, #36]	; (8002e64 <HAL_RCC_OscConfig+0x820>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d1f0      	bne.n	8002e2a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002e48:	4b06      	ldr	r3, [pc, #24]	; (8002e64 <HAL_RCC_OscConfig+0x820>)
 8002e4a:	68da      	ldr	r2, [r3, #12]
 8002e4c:	4905      	ldr	r1, [pc, #20]	; (8002e64 <HAL_RCC_OscConfig+0x820>)
 8002e4e:	4b06      	ldr	r3, [pc, #24]	; (8002e68 <HAL_RCC_OscConfig+0x824>)
 8002e50:	4013      	ands	r3, r2
 8002e52:	60cb      	str	r3, [r1, #12]
 8002e54:	e001      	b.n	8002e5a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e000      	b.n	8002e5c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3720      	adds	r7, #32
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	40021000 	.word	0x40021000
 8002e68:	feeefffc 	.word	0xfeeefffc

08002e6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d101      	bne.n	8002e80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e0e7      	b.n	8003050 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e80:	4b75      	ldr	r3, [pc, #468]	; (8003058 <HAL_RCC_ClockConfig+0x1ec>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0307 	and.w	r3, r3, #7
 8002e88:	683a      	ldr	r2, [r7, #0]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d910      	bls.n	8002eb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e8e:	4b72      	ldr	r3, [pc, #456]	; (8003058 <HAL_RCC_ClockConfig+0x1ec>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f023 0207 	bic.w	r2, r3, #7
 8002e96:	4970      	ldr	r1, [pc, #448]	; (8003058 <HAL_RCC_ClockConfig+0x1ec>)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e9e:	4b6e      	ldr	r3, [pc, #440]	; (8003058 <HAL_RCC_ClockConfig+0x1ec>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0307 	and.w	r3, r3, #7
 8002ea6:	683a      	ldr	r2, [r7, #0]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d001      	beq.n	8002eb0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e0cf      	b.n	8003050 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0302 	and.w	r3, r3, #2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d010      	beq.n	8002ede <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689a      	ldr	r2, [r3, #8]
 8002ec0:	4b66      	ldr	r3, [pc, #408]	; (800305c <HAL_RCC_ClockConfig+0x1f0>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d908      	bls.n	8002ede <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ecc:	4b63      	ldr	r3, [pc, #396]	; (800305c <HAL_RCC_ClockConfig+0x1f0>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	4960      	ldr	r1, [pc, #384]	; (800305c <HAL_RCC_ClockConfig+0x1f0>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d04c      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	2b03      	cmp	r3, #3
 8002ef0:	d107      	bne.n	8002f02 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ef2:	4b5a      	ldr	r3, [pc, #360]	; (800305c <HAL_RCC_ClockConfig+0x1f0>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d121      	bne.n	8002f42 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e0a6      	b.n	8003050 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d107      	bne.n	8002f1a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f0a:	4b54      	ldr	r3, [pc, #336]	; (800305c <HAL_RCC_ClockConfig+0x1f0>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d115      	bne.n	8002f42 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e09a      	b.n	8003050 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d107      	bne.n	8002f32 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f22:	4b4e      	ldr	r3, [pc, #312]	; (800305c <HAL_RCC_ClockConfig+0x1f0>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d109      	bne.n	8002f42 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e08e      	b.n	8003050 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f32:	4b4a      	ldr	r3, [pc, #296]	; (800305c <HAL_RCC_ClockConfig+0x1f0>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e086      	b.n	8003050 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f42:	4b46      	ldr	r3, [pc, #280]	; (800305c <HAL_RCC_ClockConfig+0x1f0>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f023 0203 	bic.w	r2, r3, #3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	4943      	ldr	r1, [pc, #268]	; (800305c <HAL_RCC_ClockConfig+0x1f0>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f54:	f7fd fbee 	bl	8000734 <HAL_GetTick>
 8002f58:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f5a:	e00a      	b.n	8002f72 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f5c:	f7fd fbea 	bl	8000734 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e06e      	b.n	8003050 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f72:	4b3a      	ldr	r3, [pc, #232]	; (800305c <HAL_RCC_ClockConfig+0x1f0>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f003 020c 	and.w	r2, r3, #12
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d1eb      	bne.n	8002f5c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d010      	beq.n	8002fb2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	689a      	ldr	r2, [r3, #8]
 8002f94:	4b31      	ldr	r3, [pc, #196]	; (800305c <HAL_RCC_ClockConfig+0x1f0>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d208      	bcs.n	8002fb2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fa0:	4b2e      	ldr	r3, [pc, #184]	; (800305c <HAL_RCC_ClockConfig+0x1f0>)
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	492b      	ldr	r1, [pc, #172]	; (800305c <HAL_RCC_ClockConfig+0x1f0>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fb2:	4b29      	ldr	r3, [pc, #164]	; (8003058 <HAL_RCC_ClockConfig+0x1ec>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0307 	and.w	r3, r3, #7
 8002fba:	683a      	ldr	r2, [r7, #0]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d210      	bcs.n	8002fe2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fc0:	4b25      	ldr	r3, [pc, #148]	; (8003058 <HAL_RCC_ClockConfig+0x1ec>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f023 0207 	bic.w	r2, r3, #7
 8002fc8:	4923      	ldr	r1, [pc, #140]	; (8003058 <HAL_RCC_ClockConfig+0x1ec>)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fd0:	4b21      	ldr	r3, [pc, #132]	; (8003058 <HAL_RCC_ClockConfig+0x1ec>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0307 	and.w	r3, r3, #7
 8002fd8:	683a      	ldr	r2, [r7, #0]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d001      	beq.n	8002fe2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e036      	b.n	8003050 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0304 	and.w	r3, r3, #4
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d008      	beq.n	8003000 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fee:	4b1b      	ldr	r3, [pc, #108]	; (800305c <HAL_RCC_ClockConfig+0x1f0>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	4918      	ldr	r1, [pc, #96]	; (800305c <HAL_RCC_ClockConfig+0x1f0>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0308 	and.w	r3, r3, #8
 8003008:	2b00      	cmp	r3, #0
 800300a:	d009      	beq.n	8003020 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800300c:	4b13      	ldr	r3, [pc, #76]	; (800305c <HAL_RCC_ClockConfig+0x1f0>)
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	00db      	lsls	r3, r3, #3
 800301a:	4910      	ldr	r1, [pc, #64]	; (800305c <HAL_RCC_ClockConfig+0x1f0>)
 800301c:	4313      	orrs	r3, r2
 800301e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003020:	f000 f824 	bl	800306c <HAL_RCC_GetSysClockFreq>
 8003024:	4602      	mov	r2, r0
 8003026:	4b0d      	ldr	r3, [pc, #52]	; (800305c <HAL_RCC_ClockConfig+0x1f0>)
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	091b      	lsrs	r3, r3, #4
 800302c:	f003 030f 	and.w	r3, r3, #15
 8003030:	490b      	ldr	r1, [pc, #44]	; (8003060 <HAL_RCC_ClockConfig+0x1f4>)
 8003032:	5ccb      	ldrb	r3, [r1, r3]
 8003034:	f003 031f 	and.w	r3, r3, #31
 8003038:	fa22 f303 	lsr.w	r3, r2, r3
 800303c:	4a09      	ldr	r2, [pc, #36]	; (8003064 <HAL_RCC_ClockConfig+0x1f8>)
 800303e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003040:	4b09      	ldr	r3, [pc, #36]	; (8003068 <HAL_RCC_ClockConfig+0x1fc>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4618      	mov	r0, r3
 8003046:	f7fd fb25 	bl	8000694 <HAL_InitTick>
 800304a:	4603      	mov	r3, r0
 800304c:	72fb      	strb	r3, [r7, #11]

  return status;
 800304e:	7afb      	ldrb	r3, [r7, #11]
}
 8003050:	4618      	mov	r0, r3
 8003052:	3710      	adds	r7, #16
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	40022000 	.word	0x40022000
 800305c:	40021000 	.word	0x40021000
 8003060:	08003884 	.word	0x08003884
 8003064:	20000000 	.word	0x20000000
 8003068:	20000004 	.word	0x20000004

0800306c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800306c:	b480      	push	{r7}
 800306e:	b089      	sub	sp, #36	; 0x24
 8003070:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003072:	2300      	movs	r3, #0
 8003074:	61fb      	str	r3, [r7, #28]
 8003076:	2300      	movs	r3, #0
 8003078:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800307a:	4b3e      	ldr	r3, [pc, #248]	; (8003174 <HAL_RCC_GetSysClockFreq+0x108>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f003 030c 	and.w	r3, r3, #12
 8003082:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003084:	4b3b      	ldr	r3, [pc, #236]	; (8003174 <HAL_RCC_GetSysClockFreq+0x108>)
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	f003 0303 	and.w	r3, r3, #3
 800308c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d005      	beq.n	80030a0 <HAL_RCC_GetSysClockFreq+0x34>
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	2b0c      	cmp	r3, #12
 8003098:	d121      	bne.n	80030de <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2b01      	cmp	r3, #1
 800309e:	d11e      	bne.n	80030de <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80030a0:	4b34      	ldr	r3, [pc, #208]	; (8003174 <HAL_RCC_GetSysClockFreq+0x108>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0308 	and.w	r3, r3, #8
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d107      	bne.n	80030bc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80030ac:	4b31      	ldr	r3, [pc, #196]	; (8003174 <HAL_RCC_GetSysClockFreq+0x108>)
 80030ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030b2:	0a1b      	lsrs	r3, r3, #8
 80030b4:	f003 030f 	and.w	r3, r3, #15
 80030b8:	61fb      	str	r3, [r7, #28]
 80030ba:	e005      	b.n	80030c8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80030bc:	4b2d      	ldr	r3, [pc, #180]	; (8003174 <HAL_RCC_GetSysClockFreq+0x108>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	091b      	lsrs	r3, r3, #4
 80030c2:	f003 030f 	and.w	r3, r3, #15
 80030c6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80030c8:	4a2b      	ldr	r2, [pc, #172]	; (8003178 <HAL_RCC_GetSysClockFreq+0x10c>)
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030d0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d10d      	bne.n	80030f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030dc:	e00a      	b.n	80030f4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	2b04      	cmp	r3, #4
 80030e2:	d102      	bne.n	80030ea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80030e4:	4b25      	ldr	r3, [pc, #148]	; (800317c <HAL_RCC_GetSysClockFreq+0x110>)
 80030e6:	61bb      	str	r3, [r7, #24]
 80030e8:	e004      	b.n	80030f4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	2b08      	cmp	r3, #8
 80030ee:	d101      	bne.n	80030f4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80030f0:	4b23      	ldr	r3, [pc, #140]	; (8003180 <HAL_RCC_GetSysClockFreq+0x114>)
 80030f2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	2b0c      	cmp	r3, #12
 80030f8:	d134      	bne.n	8003164 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80030fa:	4b1e      	ldr	r3, [pc, #120]	; (8003174 <HAL_RCC_GetSysClockFreq+0x108>)
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	f003 0303 	and.w	r3, r3, #3
 8003102:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	2b02      	cmp	r3, #2
 8003108:	d003      	beq.n	8003112 <HAL_RCC_GetSysClockFreq+0xa6>
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	2b03      	cmp	r3, #3
 800310e:	d003      	beq.n	8003118 <HAL_RCC_GetSysClockFreq+0xac>
 8003110:	e005      	b.n	800311e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003112:	4b1a      	ldr	r3, [pc, #104]	; (800317c <HAL_RCC_GetSysClockFreq+0x110>)
 8003114:	617b      	str	r3, [r7, #20]
      break;
 8003116:	e005      	b.n	8003124 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003118:	4b19      	ldr	r3, [pc, #100]	; (8003180 <HAL_RCC_GetSysClockFreq+0x114>)
 800311a:	617b      	str	r3, [r7, #20]
      break;
 800311c:	e002      	b.n	8003124 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	617b      	str	r3, [r7, #20]
      break;
 8003122:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003124:	4b13      	ldr	r3, [pc, #76]	; (8003174 <HAL_RCC_GetSysClockFreq+0x108>)
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	091b      	lsrs	r3, r3, #4
 800312a:	f003 0307 	and.w	r3, r3, #7
 800312e:	3301      	adds	r3, #1
 8003130:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003132:	4b10      	ldr	r3, [pc, #64]	; (8003174 <HAL_RCC_GetSysClockFreq+0x108>)
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	0a1b      	lsrs	r3, r3, #8
 8003138:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800313c:	697a      	ldr	r2, [r7, #20]
 800313e:	fb03 f202 	mul.w	r2, r3, r2
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	fbb2 f3f3 	udiv	r3, r2, r3
 8003148:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800314a:	4b0a      	ldr	r3, [pc, #40]	; (8003174 <HAL_RCC_GetSysClockFreq+0x108>)
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	0e5b      	lsrs	r3, r3, #25
 8003150:	f003 0303 	and.w	r3, r3, #3
 8003154:	3301      	adds	r3, #1
 8003156:	005b      	lsls	r3, r3, #1
 8003158:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003162:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003164:	69bb      	ldr	r3, [r7, #24]
}
 8003166:	4618      	mov	r0, r3
 8003168:	3724      	adds	r7, #36	; 0x24
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	40021000 	.word	0x40021000
 8003178:	08003894 	.word	0x08003894
 800317c:	00f42400 	.word	0x00f42400
 8003180:	007a1200 	.word	0x007a1200

08003184 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800318c:	2300      	movs	r3, #0
 800318e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003190:	4b2a      	ldr	r3, [pc, #168]	; (800323c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d003      	beq.n	80031a4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800319c:	f7ff f9ee 	bl	800257c <HAL_PWREx_GetVoltageRange>
 80031a0:	6178      	str	r0, [r7, #20]
 80031a2:	e014      	b.n	80031ce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80031a4:	4b25      	ldr	r3, [pc, #148]	; (800323c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a8:	4a24      	ldr	r2, [pc, #144]	; (800323c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031ae:	6593      	str	r3, [r2, #88]	; 0x58
 80031b0:	4b22      	ldr	r3, [pc, #136]	; (800323c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b8:	60fb      	str	r3, [r7, #12]
 80031ba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80031bc:	f7ff f9de 	bl	800257c <HAL_PWREx_GetVoltageRange>
 80031c0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80031c2:	4b1e      	ldr	r3, [pc, #120]	; (800323c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c6:	4a1d      	ldr	r2, [pc, #116]	; (800323c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031cc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031d4:	d10b      	bne.n	80031ee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2b80      	cmp	r3, #128	; 0x80
 80031da:	d919      	bls.n	8003210 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2ba0      	cmp	r3, #160	; 0xa0
 80031e0:	d902      	bls.n	80031e8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031e2:	2302      	movs	r3, #2
 80031e4:	613b      	str	r3, [r7, #16]
 80031e6:	e013      	b.n	8003210 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031e8:	2301      	movs	r3, #1
 80031ea:	613b      	str	r3, [r7, #16]
 80031ec:	e010      	b.n	8003210 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2b80      	cmp	r3, #128	; 0x80
 80031f2:	d902      	bls.n	80031fa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80031f4:	2303      	movs	r3, #3
 80031f6:	613b      	str	r3, [r7, #16]
 80031f8:	e00a      	b.n	8003210 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2b80      	cmp	r3, #128	; 0x80
 80031fe:	d102      	bne.n	8003206 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003200:	2302      	movs	r3, #2
 8003202:	613b      	str	r3, [r7, #16]
 8003204:	e004      	b.n	8003210 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2b70      	cmp	r3, #112	; 0x70
 800320a:	d101      	bne.n	8003210 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800320c:	2301      	movs	r3, #1
 800320e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003210:	4b0b      	ldr	r3, [pc, #44]	; (8003240 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f023 0207 	bic.w	r2, r3, #7
 8003218:	4909      	ldr	r1, [pc, #36]	; (8003240 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	4313      	orrs	r3, r2
 800321e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003220:	4b07      	ldr	r3, [pc, #28]	; (8003240 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0307 	and.w	r3, r3, #7
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	429a      	cmp	r2, r3
 800322c:	d001      	beq.n	8003232 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e000      	b.n	8003234 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3718      	adds	r7, #24
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	40021000 	.word	0x40021000
 8003240:	40022000 	.word	0x40022000

08003244 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800324c:	2300      	movs	r3, #0
 800324e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003250:	2300      	movs	r3, #0
 8003252:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800325c:	2b00      	cmp	r3, #0
 800325e:	d031      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003264:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003268:	d01a      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800326a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800326e:	d814      	bhi.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003270:	2b00      	cmp	r3, #0
 8003272:	d009      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003274:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003278:	d10f      	bne.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800327a:	4b5d      	ldr	r3, [pc, #372]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	4a5c      	ldr	r2, [pc, #368]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003280:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003284:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003286:	e00c      	b.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	3304      	adds	r3, #4
 800328c:	2100      	movs	r1, #0
 800328e:	4618      	mov	r0, r3
 8003290:	f000 f9ce 	bl	8003630 <RCCEx_PLLSAI1_Config>
 8003294:	4603      	mov	r3, r0
 8003296:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003298:	e003      	b.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	74fb      	strb	r3, [r7, #19]
      break;
 800329e:	e000      	b.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80032a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032a2:	7cfb      	ldrb	r3, [r7, #19]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d10b      	bne.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032a8:	4b51      	ldr	r3, [pc, #324]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80032aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b6:	494e      	ldr	r1, [pc, #312]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80032be:	e001      	b.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032c0:	7cfb      	ldrb	r3, [r7, #19]
 80032c2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f000 809e 	beq.w	800340e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032d2:	2300      	movs	r3, #0
 80032d4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80032d6:	4b46      	ldr	r3, [pc, #280]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80032d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d101      	bne.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80032e2:	2301      	movs	r3, #1
 80032e4:	e000      	b.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80032e6:	2300      	movs	r3, #0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d00d      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032ec:	4b40      	ldr	r3, [pc, #256]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80032ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f0:	4a3f      	ldr	r2, [pc, #252]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80032f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032f6:	6593      	str	r3, [r2, #88]	; 0x58
 80032f8:	4b3d      	ldr	r3, [pc, #244]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80032fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003300:	60bb      	str	r3, [r7, #8]
 8003302:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003304:	2301      	movs	r3, #1
 8003306:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003308:	4b3a      	ldr	r3, [pc, #232]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a39      	ldr	r2, [pc, #228]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800330e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003312:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003314:	f7fd fa0e 	bl	8000734 <HAL_GetTick>
 8003318:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800331a:	e009      	b.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800331c:	f7fd fa0a 	bl	8000734 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b02      	cmp	r3, #2
 8003328:	d902      	bls.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	74fb      	strb	r3, [r7, #19]
        break;
 800332e:	e005      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003330:	4b30      	ldr	r3, [pc, #192]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003338:	2b00      	cmp	r3, #0
 800333a:	d0ef      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800333c:	7cfb      	ldrb	r3, [r7, #19]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d15a      	bne.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003342:	4b2b      	ldr	r3, [pc, #172]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003348:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800334c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d01e      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003358:	697a      	ldr	r2, [r7, #20]
 800335a:	429a      	cmp	r2, r3
 800335c:	d019      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800335e:	4b24      	ldr	r3, [pc, #144]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003364:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003368:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800336a:	4b21      	ldr	r3, [pc, #132]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800336c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003370:	4a1f      	ldr	r2, [pc, #124]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003372:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003376:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800337a:	4b1d      	ldr	r3, [pc, #116]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800337c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003380:	4a1b      	ldr	r2, [pc, #108]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003382:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003386:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800338a:	4a19      	ldr	r2, [pc, #100]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	f003 0301 	and.w	r3, r3, #1
 8003398:	2b00      	cmp	r3, #0
 800339a:	d016      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800339c:	f7fd f9ca 	bl	8000734 <HAL_GetTick>
 80033a0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033a2:	e00b      	b.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033a4:	f7fd f9c6 	bl	8000734 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d902      	bls.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	74fb      	strb	r3, [r7, #19]
            break;
 80033ba:	e006      	b.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033bc:	4b0c      	ldr	r3, [pc, #48]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d0ec      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80033ca:	7cfb      	ldrb	r3, [r7, #19]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d10b      	bne.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033d0:	4b07      	ldr	r3, [pc, #28]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033de:	4904      	ldr	r1, [pc, #16]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80033e6:	e009      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80033e8:	7cfb      	ldrb	r3, [r7, #19]
 80033ea:	74bb      	strb	r3, [r7, #18]
 80033ec:	e006      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80033ee:	bf00      	nop
 80033f0:	40021000 	.word	0x40021000
 80033f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033f8:	7cfb      	ldrb	r3, [r7, #19]
 80033fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033fc:	7c7b      	ldrb	r3, [r7, #17]
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d105      	bne.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003402:	4b8a      	ldr	r3, [pc, #552]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003406:	4a89      	ldr	r2, [pc, #548]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003408:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800340c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00a      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800341a:	4b84      	ldr	r3, [pc, #528]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800341c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003420:	f023 0203 	bic.w	r2, r3, #3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a1b      	ldr	r3, [r3, #32]
 8003428:	4980      	ldr	r1, [pc, #512]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800342a:	4313      	orrs	r3, r2
 800342c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0302 	and.w	r3, r3, #2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d00a      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800343c:	4b7b      	ldr	r3, [pc, #492]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800343e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003442:	f023 020c 	bic.w	r2, r3, #12
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344a:	4978      	ldr	r1, [pc, #480]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800344c:	4313      	orrs	r3, r2
 800344e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0320 	and.w	r3, r3, #32
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00a      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800345e:	4b73      	ldr	r3, [pc, #460]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003464:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346c:	496f      	ldr	r1, [pc, #444]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800346e:	4313      	orrs	r3, r2
 8003470:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00a      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003480:	4b6a      	ldr	r3, [pc, #424]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003486:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800348e:	4967      	ldr	r1, [pc, #412]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003490:	4313      	orrs	r3, r2
 8003492:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00a      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80034a2:	4b62      	ldr	r3, [pc, #392]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80034a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b0:	495e      	ldr	r1, [pc, #376]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00a      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034c4:	4b59      	ldr	r3, [pc, #356]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80034c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d2:	4956      	ldr	r1, [pc, #344]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00a      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034e6:	4b51      	ldr	r3, [pc, #324]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80034e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f4:	494d      	ldr	r1, [pc, #308]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d028      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003508:	4b48      	ldr	r3, [pc, #288]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800350a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800350e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003516:	4945      	ldr	r1, [pc, #276]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003518:	4313      	orrs	r3, r2
 800351a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003522:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003526:	d106      	bne.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003528:	4b40      	ldr	r3, [pc, #256]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	4a3f      	ldr	r2, [pc, #252]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800352e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003532:	60d3      	str	r3, [r2, #12]
 8003534:	e011      	b.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800353e:	d10c      	bne.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	3304      	adds	r3, #4
 8003544:	2101      	movs	r1, #1
 8003546:	4618      	mov	r0, r3
 8003548:	f000 f872 	bl	8003630 <RCCEx_PLLSAI1_Config>
 800354c:	4603      	mov	r3, r0
 800354e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003550:	7cfb      	ldrb	r3, [r7, #19]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003556:	7cfb      	ldrb	r3, [r7, #19]
 8003558:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d028      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003566:	4b31      	ldr	r3, [pc, #196]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800356c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003574:	492d      	ldr	r1, [pc, #180]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003576:	4313      	orrs	r3, r2
 8003578:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003580:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003584:	d106      	bne.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003586:	4b29      	ldr	r3, [pc, #164]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	4a28      	ldr	r2, [pc, #160]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800358c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003590:	60d3      	str	r3, [r2, #12]
 8003592:	e011      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003598:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800359c:	d10c      	bne.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	3304      	adds	r3, #4
 80035a2:	2101      	movs	r1, #1
 80035a4:	4618      	mov	r0, r3
 80035a6:	f000 f843 	bl	8003630 <RCCEx_PLLSAI1_Config>
 80035aa:	4603      	mov	r3, r0
 80035ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035ae:	7cfb      	ldrb	r3, [r7, #19]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d001      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80035b4:	7cfb      	ldrb	r3, [r7, #19]
 80035b6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d01c      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035c4:	4b19      	ldr	r3, [pc, #100]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80035c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035d2:	4916      	ldr	r1, [pc, #88]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035e2:	d10c      	bne.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	3304      	adds	r3, #4
 80035e8:	2102      	movs	r1, #2
 80035ea:	4618      	mov	r0, r3
 80035ec:	f000 f820 	bl	8003630 <RCCEx_PLLSAI1_Config>
 80035f0:	4603      	mov	r3, r0
 80035f2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035f4:	7cfb      	ldrb	r3, [r7, #19]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d001      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80035fa:	7cfb      	ldrb	r3, [r7, #19]
 80035fc:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d00a      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800360a:	4b08      	ldr	r3, [pc, #32]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800360c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003610:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003618:	4904      	ldr	r1, [pc, #16]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800361a:	4313      	orrs	r3, r2
 800361c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003620:	7cbb      	ldrb	r3, [r7, #18]
}
 8003622:	4618      	mov	r0, r3
 8003624:	3718      	adds	r7, #24
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	40021000 	.word	0x40021000

08003630 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800363a:	2300      	movs	r3, #0
 800363c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800363e:	4b74      	ldr	r3, [pc, #464]	; (8003810 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	f003 0303 	and.w	r3, r3, #3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d018      	beq.n	800367c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800364a:	4b71      	ldr	r3, [pc, #452]	; (8003810 <RCCEx_PLLSAI1_Config+0x1e0>)
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	f003 0203 	and.w	r2, r3, #3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	429a      	cmp	r2, r3
 8003658:	d10d      	bne.n	8003676 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
       ||
 800365e:	2b00      	cmp	r3, #0
 8003660:	d009      	beq.n	8003676 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003662:	4b6b      	ldr	r3, [pc, #428]	; (8003810 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	091b      	lsrs	r3, r3, #4
 8003668:	f003 0307 	and.w	r3, r3, #7
 800366c:	1c5a      	adds	r2, r3, #1
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
       ||
 8003672:	429a      	cmp	r2, r3
 8003674:	d047      	beq.n	8003706 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	73fb      	strb	r3, [r7, #15]
 800367a:	e044      	b.n	8003706 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2b03      	cmp	r3, #3
 8003682:	d018      	beq.n	80036b6 <RCCEx_PLLSAI1_Config+0x86>
 8003684:	2b03      	cmp	r3, #3
 8003686:	d825      	bhi.n	80036d4 <RCCEx_PLLSAI1_Config+0xa4>
 8003688:	2b01      	cmp	r3, #1
 800368a:	d002      	beq.n	8003692 <RCCEx_PLLSAI1_Config+0x62>
 800368c:	2b02      	cmp	r3, #2
 800368e:	d009      	beq.n	80036a4 <RCCEx_PLLSAI1_Config+0x74>
 8003690:	e020      	b.n	80036d4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003692:	4b5f      	ldr	r3, [pc, #380]	; (8003810 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d11d      	bne.n	80036da <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036a2:	e01a      	b.n	80036da <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80036a4:	4b5a      	ldr	r3, [pc, #360]	; (8003810 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d116      	bne.n	80036de <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036b4:	e013      	b.n	80036de <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80036b6:	4b56      	ldr	r3, [pc, #344]	; (8003810 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d10f      	bne.n	80036e2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80036c2:	4b53      	ldr	r3, [pc, #332]	; (8003810 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d109      	bne.n	80036e2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80036d2:	e006      	b.n	80036e2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	73fb      	strb	r3, [r7, #15]
      break;
 80036d8:	e004      	b.n	80036e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80036da:	bf00      	nop
 80036dc:	e002      	b.n	80036e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80036de:	bf00      	nop
 80036e0:	e000      	b.n	80036e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80036e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80036e4:	7bfb      	ldrb	r3, [r7, #15]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d10d      	bne.n	8003706 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80036ea:	4b49      	ldr	r3, [pc, #292]	; (8003810 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6819      	ldr	r1, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	3b01      	subs	r3, #1
 80036fc:	011b      	lsls	r3, r3, #4
 80036fe:	430b      	orrs	r3, r1
 8003700:	4943      	ldr	r1, [pc, #268]	; (8003810 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003702:	4313      	orrs	r3, r2
 8003704:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003706:	7bfb      	ldrb	r3, [r7, #15]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d17c      	bne.n	8003806 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800370c:	4b40      	ldr	r3, [pc, #256]	; (8003810 <RCCEx_PLLSAI1_Config+0x1e0>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a3f      	ldr	r2, [pc, #252]	; (8003810 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003712:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003716:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003718:	f7fd f80c 	bl	8000734 <HAL_GetTick>
 800371c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800371e:	e009      	b.n	8003734 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003720:	f7fd f808 	bl	8000734 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b02      	cmp	r3, #2
 800372c:	d902      	bls.n	8003734 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	73fb      	strb	r3, [r7, #15]
        break;
 8003732:	e005      	b.n	8003740 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003734:	4b36      	ldr	r3, [pc, #216]	; (8003810 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d1ef      	bne.n	8003720 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003740:	7bfb      	ldrb	r3, [r7, #15]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d15f      	bne.n	8003806 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d110      	bne.n	800376e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800374c:	4b30      	ldr	r3, [pc, #192]	; (8003810 <RCCEx_PLLSAI1_Config+0x1e0>)
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003754:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	6892      	ldr	r2, [r2, #8]
 800375c:	0211      	lsls	r1, r2, #8
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	68d2      	ldr	r2, [r2, #12]
 8003762:	06d2      	lsls	r2, r2, #27
 8003764:	430a      	orrs	r2, r1
 8003766:	492a      	ldr	r1, [pc, #168]	; (8003810 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003768:	4313      	orrs	r3, r2
 800376a:	610b      	str	r3, [r1, #16]
 800376c:	e027      	b.n	80037be <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	2b01      	cmp	r3, #1
 8003772:	d112      	bne.n	800379a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003774:	4b26      	ldr	r3, [pc, #152]	; (8003810 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800377c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	6892      	ldr	r2, [r2, #8]
 8003784:	0211      	lsls	r1, r2, #8
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	6912      	ldr	r2, [r2, #16]
 800378a:	0852      	lsrs	r2, r2, #1
 800378c:	3a01      	subs	r2, #1
 800378e:	0552      	lsls	r2, r2, #21
 8003790:	430a      	orrs	r2, r1
 8003792:	491f      	ldr	r1, [pc, #124]	; (8003810 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003794:	4313      	orrs	r3, r2
 8003796:	610b      	str	r3, [r1, #16]
 8003798:	e011      	b.n	80037be <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800379a:	4b1d      	ldr	r3, [pc, #116]	; (8003810 <RCCEx_PLLSAI1_Config+0x1e0>)
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80037a2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	6892      	ldr	r2, [r2, #8]
 80037aa:	0211      	lsls	r1, r2, #8
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	6952      	ldr	r2, [r2, #20]
 80037b0:	0852      	lsrs	r2, r2, #1
 80037b2:	3a01      	subs	r2, #1
 80037b4:	0652      	lsls	r2, r2, #25
 80037b6:	430a      	orrs	r2, r1
 80037b8:	4915      	ldr	r1, [pc, #84]	; (8003810 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80037be:	4b14      	ldr	r3, [pc, #80]	; (8003810 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a13      	ldr	r2, [pc, #76]	; (8003810 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80037c8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ca:	f7fc ffb3 	bl	8000734 <HAL_GetTick>
 80037ce:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80037d0:	e009      	b.n	80037e6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037d2:	f7fc ffaf 	bl	8000734 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d902      	bls.n	80037e6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	73fb      	strb	r3, [r7, #15]
          break;
 80037e4:	e005      	b.n	80037f2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80037e6:	4b0a      	ldr	r3, [pc, #40]	; (8003810 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d0ef      	beq.n	80037d2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80037f2:	7bfb      	ldrb	r3, [r7, #15]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d106      	bne.n	8003806 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80037f8:	4b05      	ldr	r3, [pc, #20]	; (8003810 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037fa:	691a      	ldr	r2, [r3, #16]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	4903      	ldr	r1, [pc, #12]	; (8003810 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003802:	4313      	orrs	r3, r2
 8003804:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003806:	7bfb      	ldrb	r3, [r7, #15]
}
 8003808:	4618      	mov	r0, r3
 800380a:	3710      	adds	r7, #16
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	40021000 	.word	0x40021000

08003814 <__libc_init_array>:
 8003814:	b570      	push	{r4, r5, r6, lr}
 8003816:	4d0d      	ldr	r5, [pc, #52]	; (800384c <__libc_init_array+0x38>)
 8003818:	4c0d      	ldr	r4, [pc, #52]	; (8003850 <__libc_init_array+0x3c>)
 800381a:	1b64      	subs	r4, r4, r5
 800381c:	10a4      	asrs	r4, r4, #2
 800381e:	2600      	movs	r6, #0
 8003820:	42a6      	cmp	r6, r4
 8003822:	d109      	bne.n	8003838 <__libc_init_array+0x24>
 8003824:	4d0b      	ldr	r5, [pc, #44]	; (8003854 <__libc_init_array+0x40>)
 8003826:	4c0c      	ldr	r4, [pc, #48]	; (8003858 <__libc_init_array+0x44>)
 8003828:	f000 f820 	bl	800386c <_init>
 800382c:	1b64      	subs	r4, r4, r5
 800382e:	10a4      	asrs	r4, r4, #2
 8003830:	2600      	movs	r6, #0
 8003832:	42a6      	cmp	r6, r4
 8003834:	d105      	bne.n	8003842 <__libc_init_array+0x2e>
 8003836:	bd70      	pop	{r4, r5, r6, pc}
 8003838:	f855 3b04 	ldr.w	r3, [r5], #4
 800383c:	4798      	blx	r3
 800383e:	3601      	adds	r6, #1
 8003840:	e7ee      	b.n	8003820 <__libc_init_array+0xc>
 8003842:	f855 3b04 	ldr.w	r3, [r5], #4
 8003846:	4798      	blx	r3
 8003848:	3601      	adds	r6, #1
 800384a:	e7f2      	b.n	8003832 <__libc_init_array+0x1e>
 800384c:	080038c4 	.word	0x080038c4
 8003850:	080038c4 	.word	0x080038c4
 8003854:	080038c4 	.word	0x080038c4
 8003858:	080038c8 	.word	0x080038c8

0800385c <memset>:
 800385c:	4402      	add	r2, r0
 800385e:	4603      	mov	r3, r0
 8003860:	4293      	cmp	r3, r2
 8003862:	d100      	bne.n	8003866 <memset+0xa>
 8003864:	4770      	bx	lr
 8003866:	f803 1b01 	strb.w	r1, [r3], #1
 800386a:	e7f9      	b.n	8003860 <memset+0x4>

0800386c <_init>:
 800386c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800386e:	bf00      	nop
 8003870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003872:	bc08      	pop	{r3}
 8003874:	469e      	mov	lr, r3
 8003876:	4770      	bx	lr

08003878 <_fini>:
 8003878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800387a:	bf00      	nop
 800387c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800387e:	bc08      	pop	{r3}
 8003880:	469e      	mov	lr, r3
 8003882:	4770      	bx	lr
