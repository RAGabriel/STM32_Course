
M08A03_PushButton.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016b4  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001840  08001840  00011840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001880  08001880  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001880  08001880  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001880  08001880  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001880  08001880  00011880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001884  08001884  00011884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001888  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001894  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001894  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004900  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000112c  00000000  00000000  0002493c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000550  00000000  00000000  00025a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000004a8  00000000  00000000  00025fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e6b6  00000000  00000000  00026460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005ea9  00000000  00000000  00044b16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b77f1  00000000  00000000  0004a9bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001021b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001300  00000000  00000000  00102200  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08001828 	.word	0x08001828

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08001828 	.word	0x08001828

080001cc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b088      	sub	sp, #32
 80001d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001d2:	f107 030c 	add.w	r3, r7, #12
 80001d6:	2200      	movs	r2, #0
 80001d8:	601a      	str	r2, [r3, #0]
 80001da:	605a      	str	r2, [r3, #4]
 80001dc:	609a      	str	r2, [r3, #8]
 80001de:	60da      	str	r2, [r3, #12]
 80001e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001e2:	4b24      	ldr	r3, [pc, #144]	; (8000274 <MX_GPIO_Init+0xa8>)
 80001e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001e6:	4a23      	ldr	r2, [pc, #140]	; (8000274 <MX_GPIO_Init+0xa8>)
 80001e8:	f043 0302 	orr.w	r3, r3, #2
 80001ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80001ee:	4b21      	ldr	r3, [pc, #132]	; (8000274 <MX_GPIO_Init+0xa8>)
 80001f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001f2:	f003 0302 	and.w	r3, r3, #2
 80001f6:	60bb      	str	r3, [r7, #8]
 80001f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001fa:	4b1e      	ldr	r3, [pc, #120]	; (8000274 <MX_GPIO_Init+0xa8>)
 80001fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001fe:	4a1d      	ldr	r2, [pc, #116]	; (8000274 <MX_GPIO_Init+0xa8>)
 8000200:	f043 0301 	orr.w	r3, r3, #1
 8000204:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000206:	4b1b      	ldr	r3, [pc, #108]	; (8000274 <MX_GPIO_Init+0xa8>)
 8000208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800020a:	f003 0301 	and.w	r3, r3, #1
 800020e:	607b      	str	r3, [r7, #4]
 8000210:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000212:	2200      	movs	r2, #0
 8000214:	2108      	movs	r1, #8
 8000216:	4818      	ldr	r0, [pc, #96]	; (8000278 <MX_GPIO_Init+0xac>)
 8000218:	f000 fc44 	bl	8000aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800021c:	2301      	movs	r3, #1
 800021e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000220:	2300      	movs	r3, #0
 8000222:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000224:	2301      	movs	r3, #1
 8000226:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000228:	f107 030c 	add.w	r3, r7, #12
 800022c:	4619      	mov	r1, r3
 800022e:	4812      	ldr	r0, [pc, #72]	; (8000278 <MX_GPIO_Init+0xac>)
 8000230:	f000 fab6 	bl	80007a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000234:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000238:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800023a:	2300      	movs	r3, #0
 800023c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800023e:	2301      	movs	r3, #1
 8000240:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000242:	f107 030c 	add.w	r3, r7, #12
 8000246:	4619      	mov	r1, r3
 8000248:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800024c:	f000 faa8 	bl	80007a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000250:	2308      	movs	r3, #8
 8000252:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000254:	2301      	movs	r3, #1
 8000256:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000258:	2300      	movs	r3, #0
 800025a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800025c:	2300      	movs	r3, #0
 800025e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000260:	f107 030c 	add.w	r3, r7, #12
 8000264:	4619      	mov	r1, r3
 8000266:	4804      	ldr	r0, [pc, #16]	; (8000278 <MX_GPIO_Init+0xac>)
 8000268:	f000 fa9a 	bl	80007a0 <HAL_GPIO_Init>

}
 800026c:	bf00      	nop
 800026e:	3720      	adds	r7, #32
 8000270:	46bd      	mov	sp, r7
 8000272:	bd80      	pop	{r7, pc}
 8000274:	40021000 	.word	0x40021000
 8000278:	48000400 	.word	0x48000400

0800027c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b082      	sub	sp, #8
 8000280:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000282:	f000 f90e 	bl	80004a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000286:	f000 f82b 	bl	80002e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028a:	f7ff ff9f 	bl	80001cc <MX_GPIO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12)) {
 800028e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000292:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000296:	f000 fbed 	bl	8000a74 <HAL_GPIO_ReadPin>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d103      	bne.n	80002a8 <main+0x2c>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 80002a0:	2108      	movs	r1, #8
 80002a2:	480e      	ldr	r0, [pc, #56]	; (80002dc <main+0x60>)
 80002a4:	f000 fc16 	bl	8000ad4 <HAL_GPIO_TogglePin>
		//HAL_Delay(500);
	}
	if (!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0)) {
 80002a8:	2101      	movs	r1, #1
 80002aa:	480c      	ldr	r0, [pc, #48]	; (80002dc <main+0x60>)
 80002ac:	f000 fbe2 	bl	8000a74 <HAL_GPIO_ReadPin>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d1eb      	bne.n	800028e <main+0x12>
		for (int i = 0; i < 10; i++) {
 80002b6:	2300      	movs	r3, #0
 80002b8:	607b      	str	r3, [r7, #4]
 80002ba:	e00a      	b.n	80002d2 <main+0x56>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 80002bc:	2108      	movs	r1, #8
 80002be:	4807      	ldr	r0, [pc, #28]	; (80002dc <main+0x60>)
 80002c0:	f000 fc08 	bl	8000ad4 <HAL_GPIO_TogglePin>
			HAL_Delay(500);
 80002c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002c8:	f000 f960 	bl	800058c <HAL_Delay>
		for (int i = 0; i < 10; i++) {
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	3301      	adds	r3, #1
 80002d0:	607b      	str	r3, [r7, #4]
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	2b09      	cmp	r3, #9
 80002d6:	ddf1      	ble.n	80002bc <main+0x40>
	if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12)) {
 80002d8:	e7d9      	b.n	800028e <main+0x12>
 80002da:	bf00      	nop
 80002dc:	48000400 	.word	0x48000400

080002e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b096      	sub	sp, #88	; 0x58
 80002e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002e6:	f107 0314 	add.w	r3, r7, #20
 80002ea:	2244      	movs	r2, #68	; 0x44
 80002ec:	2100      	movs	r1, #0
 80002ee:	4618      	mov	r0, r3
 80002f0:	f001 fa92 	bl	8001818 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002f4:	463b      	mov	r3, r7
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]
 80002fa:	605a      	str	r2, [r3, #4]
 80002fc:	609a      	str	r2, [r3, #8]
 80002fe:	60da      	str	r2, [r3, #12]
 8000300:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000302:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000306:	f000 fc0d 	bl	8000b24 <HAL_PWREx_ControlVoltageScaling>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000310:	f000 f838 	bl	8000384 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000314:	2310      	movs	r3, #16
 8000316:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000318:	2301      	movs	r3, #1
 800031a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800031c:	2300      	movs	r3, #0
 800031e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000320:	2360      	movs	r3, #96	; 0x60
 8000322:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000324:	2302      	movs	r3, #2
 8000326:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000328:	2301      	movs	r3, #1
 800032a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800032c:	2301      	movs	r3, #1
 800032e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000330:	2310      	movs	r3, #16
 8000332:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000334:	2307      	movs	r3, #7
 8000336:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000338:	2302      	movs	r3, #2
 800033a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800033c:	2302      	movs	r3, #2
 800033e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000340:	f107 0314 	add.w	r3, r7, #20
 8000344:	4618      	mov	r0, r3
 8000346:	f000 fc43 	bl	8000bd0 <HAL_RCC_OscConfig>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000350:	f000 f818 	bl	8000384 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000354:	230f      	movs	r3, #15
 8000356:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000358:	2303      	movs	r3, #3
 800035a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800035c:	2300      	movs	r3, #0
 800035e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000360:	2300      	movs	r3, #0
 8000362:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000364:	2300      	movs	r3, #0
 8000366:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000368:	463b      	mov	r3, r7
 800036a:	2101      	movs	r1, #1
 800036c:	4618      	mov	r0, r3
 800036e:	f001 f843 	bl	80013f8 <HAL_RCC_ClockConfig>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000378:	f000 f804 	bl	8000384 <Error_Handler>
  }
}
 800037c:	bf00      	nop
 800037e:	3758      	adds	r7, #88	; 0x58
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}

08000384 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000388:	b672      	cpsid	i
}
 800038a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800038c:	e7fe      	b.n	800038c <Error_Handler+0x8>
	...

08000390 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000396:	4b0f      	ldr	r3, [pc, #60]	; (80003d4 <HAL_MspInit+0x44>)
 8000398:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800039a:	4a0e      	ldr	r2, [pc, #56]	; (80003d4 <HAL_MspInit+0x44>)
 800039c:	f043 0301 	orr.w	r3, r3, #1
 80003a0:	6613      	str	r3, [r2, #96]	; 0x60
 80003a2:	4b0c      	ldr	r3, [pc, #48]	; (80003d4 <HAL_MspInit+0x44>)
 80003a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003a6:	f003 0301 	and.w	r3, r3, #1
 80003aa:	607b      	str	r3, [r7, #4]
 80003ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ae:	4b09      	ldr	r3, [pc, #36]	; (80003d4 <HAL_MspInit+0x44>)
 80003b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003b2:	4a08      	ldr	r2, [pc, #32]	; (80003d4 <HAL_MspInit+0x44>)
 80003b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003b8:	6593      	str	r3, [r2, #88]	; 0x58
 80003ba:	4b06      	ldr	r3, [pc, #24]	; (80003d4 <HAL_MspInit+0x44>)
 80003bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003c2:	603b      	str	r3, [r7, #0]
 80003c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003c6:	bf00      	nop
 80003c8:	370c      	adds	r7, #12
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop
 80003d4:	40021000 	.word	0x40021000

080003d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003dc:	e7fe      	b.n	80003dc <NMI_Handler+0x4>

080003de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003de:	b480      	push	{r7}
 80003e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003e2:	e7fe      	b.n	80003e2 <HardFault_Handler+0x4>

080003e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003e8:	e7fe      	b.n	80003e8 <MemManage_Handler+0x4>

080003ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003ea:	b480      	push	{r7}
 80003ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003ee:	e7fe      	b.n	80003ee <BusFault_Handler+0x4>

080003f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003f4:	e7fe      	b.n	80003f4 <UsageFault_Handler+0x4>

080003f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003f6:	b480      	push	{r7}
 80003f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003fa:	bf00      	nop
 80003fc:	46bd      	mov	sp, r7
 80003fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000402:	4770      	bx	lr

08000404 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000408:	bf00      	nop
 800040a:	46bd      	mov	sp, r7
 800040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000410:	4770      	bx	lr

08000412 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000412:	b480      	push	{r7}
 8000414:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000416:	bf00      	nop
 8000418:	46bd      	mov	sp, r7
 800041a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041e:	4770      	bx	lr

08000420 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000424:	f000 f892 	bl	800054c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000428:	bf00      	nop
 800042a:	bd80      	pop	{r7, pc}

0800042c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000430:	4b06      	ldr	r3, [pc, #24]	; (800044c <SystemInit+0x20>)
 8000432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000436:	4a05      	ldr	r2, [pc, #20]	; (800044c <SystemInit+0x20>)
 8000438:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800043c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000440:	bf00      	nop
 8000442:	46bd      	mov	sp, r7
 8000444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000448:	4770      	bx	lr
 800044a:	bf00      	nop
 800044c:	e000ed00 	.word	0xe000ed00

08000450 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000450:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000488 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000454:	f7ff ffea 	bl	800042c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000458:	480c      	ldr	r0, [pc, #48]	; (800048c <LoopForever+0x6>)
  ldr r1, =_edata
 800045a:	490d      	ldr	r1, [pc, #52]	; (8000490 <LoopForever+0xa>)
  ldr r2, =_sidata
 800045c:	4a0d      	ldr	r2, [pc, #52]	; (8000494 <LoopForever+0xe>)
  movs r3, #0
 800045e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000460:	e002      	b.n	8000468 <LoopCopyDataInit>

08000462 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000462:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000464:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000466:	3304      	adds	r3, #4

08000468 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000468:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800046a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800046c:	d3f9      	bcc.n	8000462 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800046e:	4a0a      	ldr	r2, [pc, #40]	; (8000498 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000470:	4c0a      	ldr	r4, [pc, #40]	; (800049c <LoopForever+0x16>)
  movs r3, #0
 8000472:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000474:	e001      	b.n	800047a <LoopFillZerobss>

08000476 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000476:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000478:	3204      	adds	r2, #4

0800047a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800047a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800047c:	d3fb      	bcc.n	8000476 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800047e:	f001 f9a7 	bl	80017d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000482:	f7ff fefb 	bl	800027c <main>

08000486 <LoopForever>:

LoopForever:
    b LoopForever
 8000486:	e7fe      	b.n	8000486 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000488:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800048c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000490:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000494:	08001888 	.word	0x08001888
  ldr r2, =_sbss
 8000498:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800049c:	2000002c 	.word	0x2000002c

080004a0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80004a0:	e7fe      	b.n	80004a0 <ADC1_IRQHandler>

080004a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004a2:	b580      	push	{r7, lr}
 80004a4:	b082      	sub	sp, #8
 80004a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80004a8:	2300      	movs	r3, #0
 80004aa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004ac:	2003      	movs	r0, #3
 80004ae:	f000 f943 	bl	8000738 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004b2:	2000      	movs	r0, #0
 80004b4:	f000 f80e 	bl	80004d4 <HAL_InitTick>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d002      	beq.n	80004c4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80004be:	2301      	movs	r3, #1
 80004c0:	71fb      	strb	r3, [r7, #7]
 80004c2:	e001      	b.n	80004c8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80004c4:	f7ff ff64 	bl	8000390 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80004c8:	79fb      	ldrb	r3, [r7, #7]
}
 80004ca:	4618      	mov	r0, r3
 80004cc:	3708      	adds	r7, #8
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
	...

080004d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b084      	sub	sp, #16
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80004dc:	2300      	movs	r3, #0
 80004de:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80004e0:	4b17      	ldr	r3, [pc, #92]	; (8000540 <HAL_InitTick+0x6c>)
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d023      	beq.n	8000530 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80004e8:	4b16      	ldr	r3, [pc, #88]	; (8000544 <HAL_InitTick+0x70>)
 80004ea:	681a      	ldr	r2, [r3, #0]
 80004ec:	4b14      	ldr	r3, [pc, #80]	; (8000540 <HAL_InitTick+0x6c>)
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	4619      	mov	r1, r3
 80004f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80004fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80004fe:	4618      	mov	r0, r3
 8000500:	f000 f941 	bl	8000786 <HAL_SYSTICK_Config>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d10f      	bne.n	800052a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	2b0f      	cmp	r3, #15
 800050e:	d809      	bhi.n	8000524 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000510:	2200      	movs	r2, #0
 8000512:	6879      	ldr	r1, [r7, #4]
 8000514:	f04f 30ff 	mov.w	r0, #4294967295
 8000518:	f000 f919 	bl	800074e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800051c:	4a0a      	ldr	r2, [pc, #40]	; (8000548 <HAL_InitTick+0x74>)
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	6013      	str	r3, [r2, #0]
 8000522:	e007      	b.n	8000534 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000524:	2301      	movs	r3, #1
 8000526:	73fb      	strb	r3, [r7, #15]
 8000528:	e004      	b.n	8000534 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800052a:	2301      	movs	r3, #1
 800052c:	73fb      	strb	r3, [r7, #15]
 800052e:	e001      	b.n	8000534 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000530:	2301      	movs	r3, #1
 8000532:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000534:	7bfb      	ldrb	r3, [r7, #15]
}
 8000536:	4618      	mov	r0, r3
 8000538:	3710      	adds	r7, #16
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	20000008 	.word	0x20000008
 8000544:	20000000 	.word	0x20000000
 8000548:	20000004 	.word	0x20000004

0800054c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000550:	4b06      	ldr	r3, [pc, #24]	; (800056c <HAL_IncTick+0x20>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	461a      	mov	r2, r3
 8000556:	4b06      	ldr	r3, [pc, #24]	; (8000570 <HAL_IncTick+0x24>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	4413      	add	r3, r2
 800055c:	4a04      	ldr	r2, [pc, #16]	; (8000570 <HAL_IncTick+0x24>)
 800055e:	6013      	str	r3, [r2, #0]
}
 8000560:	bf00      	nop
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	20000008 	.word	0x20000008
 8000570:	20000028 	.word	0x20000028

08000574 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  return uwTick;
 8000578:	4b03      	ldr	r3, [pc, #12]	; (8000588 <HAL_GetTick+0x14>)
 800057a:	681b      	ldr	r3, [r3, #0]
}
 800057c:	4618      	mov	r0, r3
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	20000028 	.word	0x20000028

0800058c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000594:	f7ff ffee 	bl	8000574 <HAL_GetTick>
 8000598:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005a4:	d005      	beq.n	80005b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80005a6:	4b0a      	ldr	r3, [pc, #40]	; (80005d0 <HAL_Delay+0x44>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	461a      	mov	r2, r3
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	4413      	add	r3, r2
 80005b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005b2:	bf00      	nop
 80005b4:	f7ff ffde 	bl	8000574 <HAL_GetTick>
 80005b8:	4602      	mov	r2, r0
 80005ba:	68bb      	ldr	r3, [r7, #8]
 80005bc:	1ad3      	subs	r3, r2, r3
 80005be:	68fa      	ldr	r2, [r7, #12]
 80005c0:	429a      	cmp	r2, r3
 80005c2:	d8f7      	bhi.n	80005b4 <HAL_Delay+0x28>
  {
  }
}
 80005c4:	bf00      	nop
 80005c6:	bf00      	nop
 80005c8:	3710      	adds	r7, #16
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	20000008 	.word	0x20000008

080005d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b085      	sub	sp, #20
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	f003 0307 	and.w	r3, r3, #7
 80005e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005e4:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <__NVIC_SetPriorityGrouping+0x44>)
 80005e6:	68db      	ldr	r3, [r3, #12]
 80005e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005ea:	68ba      	ldr	r2, [r7, #8]
 80005ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005f0:	4013      	ands	r3, r2
 80005f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000600:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000604:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000606:	4a04      	ldr	r2, [pc, #16]	; (8000618 <__NVIC_SetPriorityGrouping+0x44>)
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	60d3      	str	r3, [r2, #12]
}
 800060c:	bf00      	nop
 800060e:	3714      	adds	r7, #20
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr
 8000618:	e000ed00 	.word	0xe000ed00

0800061c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000620:	4b04      	ldr	r3, [pc, #16]	; (8000634 <__NVIC_GetPriorityGrouping+0x18>)
 8000622:	68db      	ldr	r3, [r3, #12]
 8000624:	0a1b      	lsrs	r3, r3, #8
 8000626:	f003 0307 	and.w	r3, r3, #7
}
 800062a:	4618      	mov	r0, r3
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	e000ed00 	.word	0xe000ed00

08000638 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	6039      	str	r1, [r7, #0]
 8000642:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000648:	2b00      	cmp	r3, #0
 800064a:	db0a      	blt.n	8000662 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	b2da      	uxtb	r2, r3
 8000650:	490c      	ldr	r1, [pc, #48]	; (8000684 <__NVIC_SetPriority+0x4c>)
 8000652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000656:	0112      	lsls	r2, r2, #4
 8000658:	b2d2      	uxtb	r2, r2
 800065a:	440b      	add	r3, r1
 800065c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000660:	e00a      	b.n	8000678 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	b2da      	uxtb	r2, r3
 8000666:	4908      	ldr	r1, [pc, #32]	; (8000688 <__NVIC_SetPriority+0x50>)
 8000668:	79fb      	ldrb	r3, [r7, #7]
 800066a:	f003 030f 	and.w	r3, r3, #15
 800066e:	3b04      	subs	r3, #4
 8000670:	0112      	lsls	r2, r2, #4
 8000672:	b2d2      	uxtb	r2, r2
 8000674:	440b      	add	r3, r1
 8000676:	761a      	strb	r2, [r3, #24]
}
 8000678:	bf00      	nop
 800067a:	370c      	adds	r7, #12
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	e000e100 	.word	0xe000e100
 8000688:	e000ed00 	.word	0xe000ed00

0800068c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800068c:	b480      	push	{r7}
 800068e:	b089      	sub	sp, #36	; 0x24
 8000690:	af00      	add	r7, sp, #0
 8000692:	60f8      	str	r0, [r7, #12]
 8000694:	60b9      	str	r1, [r7, #8]
 8000696:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	f003 0307 	and.w	r3, r3, #7
 800069e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006a0:	69fb      	ldr	r3, [r7, #28]
 80006a2:	f1c3 0307 	rsb	r3, r3, #7
 80006a6:	2b04      	cmp	r3, #4
 80006a8:	bf28      	it	cs
 80006aa:	2304      	movcs	r3, #4
 80006ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ae:	69fb      	ldr	r3, [r7, #28]
 80006b0:	3304      	adds	r3, #4
 80006b2:	2b06      	cmp	r3, #6
 80006b4:	d902      	bls.n	80006bc <NVIC_EncodePriority+0x30>
 80006b6:	69fb      	ldr	r3, [r7, #28]
 80006b8:	3b03      	subs	r3, #3
 80006ba:	e000      	b.n	80006be <NVIC_EncodePriority+0x32>
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c0:	f04f 32ff 	mov.w	r2, #4294967295
 80006c4:	69bb      	ldr	r3, [r7, #24]
 80006c6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ca:	43da      	mvns	r2, r3
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	401a      	ands	r2, r3
 80006d0:	697b      	ldr	r3, [r7, #20]
 80006d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006d4:	f04f 31ff 	mov.w	r1, #4294967295
 80006d8:	697b      	ldr	r3, [r7, #20]
 80006da:	fa01 f303 	lsl.w	r3, r1, r3
 80006de:	43d9      	mvns	r1, r3
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e4:	4313      	orrs	r3, r2
         );
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	3724      	adds	r7, #36	; 0x24
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
	...

080006f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	3b01      	subs	r3, #1
 8000700:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000704:	d301      	bcc.n	800070a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000706:	2301      	movs	r3, #1
 8000708:	e00f      	b.n	800072a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800070a:	4a0a      	ldr	r2, [pc, #40]	; (8000734 <SysTick_Config+0x40>)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	3b01      	subs	r3, #1
 8000710:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000712:	210f      	movs	r1, #15
 8000714:	f04f 30ff 	mov.w	r0, #4294967295
 8000718:	f7ff ff8e 	bl	8000638 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800071c:	4b05      	ldr	r3, [pc, #20]	; (8000734 <SysTick_Config+0x40>)
 800071e:	2200      	movs	r2, #0
 8000720:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000722:	4b04      	ldr	r3, [pc, #16]	; (8000734 <SysTick_Config+0x40>)
 8000724:	2207      	movs	r2, #7
 8000726:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000728:	2300      	movs	r3, #0
}
 800072a:	4618      	mov	r0, r3
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	e000e010 	.word	0xe000e010

08000738 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000740:	6878      	ldr	r0, [r7, #4]
 8000742:	f7ff ff47 	bl	80005d4 <__NVIC_SetPriorityGrouping>
}
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}

0800074e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800074e:	b580      	push	{r7, lr}
 8000750:	b086      	sub	sp, #24
 8000752:	af00      	add	r7, sp, #0
 8000754:	4603      	mov	r3, r0
 8000756:	60b9      	str	r1, [r7, #8]
 8000758:	607a      	str	r2, [r7, #4]
 800075a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800075c:	2300      	movs	r3, #0
 800075e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000760:	f7ff ff5c 	bl	800061c <__NVIC_GetPriorityGrouping>
 8000764:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000766:	687a      	ldr	r2, [r7, #4]
 8000768:	68b9      	ldr	r1, [r7, #8]
 800076a:	6978      	ldr	r0, [r7, #20]
 800076c:	f7ff ff8e 	bl	800068c <NVIC_EncodePriority>
 8000770:	4602      	mov	r2, r0
 8000772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000776:	4611      	mov	r1, r2
 8000778:	4618      	mov	r0, r3
 800077a:	f7ff ff5d 	bl	8000638 <__NVIC_SetPriority>
}
 800077e:	bf00      	nop
 8000780:	3718      	adds	r7, #24
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}

08000786 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000786:	b580      	push	{r7, lr}
 8000788:	b082      	sub	sp, #8
 800078a:	af00      	add	r7, sp, #0
 800078c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800078e:	6878      	ldr	r0, [r7, #4]
 8000790:	f7ff ffb0 	bl	80006f4 <SysTick_Config>
 8000794:	4603      	mov	r3, r0
}
 8000796:	4618      	mov	r0, r3
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
	...

080007a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b087      	sub	sp, #28
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007aa:	2300      	movs	r3, #0
 80007ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007ae:	e148      	b.n	8000a42 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	681a      	ldr	r2, [r3, #0]
 80007b4:	2101      	movs	r1, #1
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	fa01 f303 	lsl.w	r3, r1, r3
 80007bc:	4013      	ands	r3, r2
 80007be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	f000 813a 	beq.w	8000a3c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	685b      	ldr	r3, [r3, #4]
 80007cc:	f003 0303 	and.w	r3, r3, #3
 80007d0:	2b01      	cmp	r3, #1
 80007d2:	d005      	beq.n	80007e0 <HAL_GPIO_Init+0x40>
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	f003 0303 	and.w	r3, r3, #3
 80007dc:	2b02      	cmp	r3, #2
 80007de:	d130      	bne.n	8000842 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	689b      	ldr	r3, [r3, #8]
 80007e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80007e6:	697b      	ldr	r3, [r7, #20]
 80007e8:	005b      	lsls	r3, r3, #1
 80007ea:	2203      	movs	r2, #3
 80007ec:	fa02 f303 	lsl.w	r3, r2, r3
 80007f0:	43db      	mvns	r3, r3
 80007f2:	693a      	ldr	r2, [r7, #16]
 80007f4:	4013      	ands	r3, r2
 80007f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	68da      	ldr	r2, [r3, #12]
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	005b      	lsls	r3, r3, #1
 8000800:	fa02 f303 	lsl.w	r3, r2, r3
 8000804:	693a      	ldr	r2, [r7, #16]
 8000806:	4313      	orrs	r3, r2
 8000808:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	693a      	ldr	r2, [r7, #16]
 800080e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000816:	2201      	movs	r2, #1
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	fa02 f303 	lsl.w	r3, r2, r3
 800081e:	43db      	mvns	r3, r3
 8000820:	693a      	ldr	r2, [r7, #16]
 8000822:	4013      	ands	r3, r2
 8000824:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	091b      	lsrs	r3, r3, #4
 800082c:	f003 0201 	and.w	r2, r3, #1
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	fa02 f303 	lsl.w	r3, r2, r3
 8000836:	693a      	ldr	r2, [r7, #16]
 8000838:	4313      	orrs	r3, r2
 800083a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	693a      	ldr	r2, [r7, #16]
 8000840:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	685b      	ldr	r3, [r3, #4]
 8000846:	f003 0303 	and.w	r3, r3, #3
 800084a:	2b03      	cmp	r3, #3
 800084c:	d017      	beq.n	800087e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	68db      	ldr	r3, [r3, #12]
 8000852:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	005b      	lsls	r3, r3, #1
 8000858:	2203      	movs	r2, #3
 800085a:	fa02 f303 	lsl.w	r3, r2, r3
 800085e:	43db      	mvns	r3, r3
 8000860:	693a      	ldr	r2, [r7, #16]
 8000862:	4013      	ands	r3, r2
 8000864:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	689a      	ldr	r2, [r3, #8]
 800086a:	697b      	ldr	r3, [r7, #20]
 800086c:	005b      	lsls	r3, r3, #1
 800086e:	fa02 f303 	lsl.w	r3, r2, r3
 8000872:	693a      	ldr	r2, [r7, #16]
 8000874:	4313      	orrs	r3, r2
 8000876:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	693a      	ldr	r2, [r7, #16]
 800087c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	685b      	ldr	r3, [r3, #4]
 8000882:	f003 0303 	and.w	r3, r3, #3
 8000886:	2b02      	cmp	r3, #2
 8000888:	d123      	bne.n	80008d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	08da      	lsrs	r2, r3, #3
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	3208      	adds	r2, #8
 8000892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000896:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	f003 0307 	and.w	r3, r3, #7
 800089e:	009b      	lsls	r3, r3, #2
 80008a0:	220f      	movs	r2, #15
 80008a2:	fa02 f303 	lsl.w	r3, r2, r3
 80008a6:	43db      	mvns	r3, r3
 80008a8:	693a      	ldr	r2, [r7, #16]
 80008aa:	4013      	ands	r3, r2
 80008ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	691a      	ldr	r2, [r3, #16]
 80008b2:	697b      	ldr	r3, [r7, #20]
 80008b4:	f003 0307 	and.w	r3, r3, #7
 80008b8:	009b      	lsls	r3, r3, #2
 80008ba:	fa02 f303 	lsl.w	r3, r2, r3
 80008be:	693a      	ldr	r2, [r7, #16]
 80008c0:	4313      	orrs	r3, r2
 80008c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	08da      	lsrs	r2, r3, #3
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	3208      	adds	r2, #8
 80008cc:	6939      	ldr	r1, [r7, #16]
 80008ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	005b      	lsls	r3, r3, #1
 80008dc:	2203      	movs	r2, #3
 80008de:	fa02 f303 	lsl.w	r3, r2, r3
 80008e2:	43db      	mvns	r3, r3
 80008e4:	693a      	ldr	r2, [r7, #16]
 80008e6:	4013      	ands	r3, r2
 80008e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	f003 0203 	and.w	r2, r3, #3
 80008f2:	697b      	ldr	r3, [r7, #20]
 80008f4:	005b      	lsls	r3, r3, #1
 80008f6:	fa02 f303 	lsl.w	r3, r2, r3
 80008fa:	693a      	ldr	r2, [r7, #16]
 80008fc:	4313      	orrs	r3, r2
 80008fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	693a      	ldr	r2, [r7, #16]
 8000904:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	685b      	ldr	r3, [r3, #4]
 800090a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800090e:	2b00      	cmp	r3, #0
 8000910:	f000 8094 	beq.w	8000a3c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000914:	4b52      	ldr	r3, [pc, #328]	; (8000a60 <HAL_GPIO_Init+0x2c0>)
 8000916:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000918:	4a51      	ldr	r2, [pc, #324]	; (8000a60 <HAL_GPIO_Init+0x2c0>)
 800091a:	f043 0301 	orr.w	r3, r3, #1
 800091e:	6613      	str	r3, [r2, #96]	; 0x60
 8000920:	4b4f      	ldr	r3, [pc, #316]	; (8000a60 <HAL_GPIO_Init+0x2c0>)
 8000922:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000924:	f003 0301 	and.w	r3, r3, #1
 8000928:	60bb      	str	r3, [r7, #8]
 800092a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800092c:	4a4d      	ldr	r2, [pc, #308]	; (8000a64 <HAL_GPIO_Init+0x2c4>)
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	089b      	lsrs	r3, r3, #2
 8000932:	3302      	adds	r3, #2
 8000934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000938:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	f003 0303 	and.w	r3, r3, #3
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	220f      	movs	r2, #15
 8000944:	fa02 f303 	lsl.w	r3, r2, r3
 8000948:	43db      	mvns	r3, r3
 800094a:	693a      	ldr	r2, [r7, #16]
 800094c:	4013      	ands	r3, r2
 800094e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000956:	d00d      	beq.n	8000974 <HAL_GPIO_Init+0x1d4>
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4a43      	ldr	r2, [pc, #268]	; (8000a68 <HAL_GPIO_Init+0x2c8>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d007      	beq.n	8000970 <HAL_GPIO_Init+0x1d0>
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	4a42      	ldr	r2, [pc, #264]	; (8000a6c <HAL_GPIO_Init+0x2cc>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d101      	bne.n	800096c <HAL_GPIO_Init+0x1cc>
 8000968:	2302      	movs	r3, #2
 800096a:	e004      	b.n	8000976 <HAL_GPIO_Init+0x1d6>
 800096c:	2307      	movs	r3, #7
 800096e:	e002      	b.n	8000976 <HAL_GPIO_Init+0x1d6>
 8000970:	2301      	movs	r3, #1
 8000972:	e000      	b.n	8000976 <HAL_GPIO_Init+0x1d6>
 8000974:	2300      	movs	r3, #0
 8000976:	697a      	ldr	r2, [r7, #20]
 8000978:	f002 0203 	and.w	r2, r2, #3
 800097c:	0092      	lsls	r2, r2, #2
 800097e:	4093      	lsls	r3, r2
 8000980:	693a      	ldr	r2, [r7, #16]
 8000982:	4313      	orrs	r3, r2
 8000984:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000986:	4937      	ldr	r1, [pc, #220]	; (8000a64 <HAL_GPIO_Init+0x2c4>)
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	089b      	lsrs	r3, r3, #2
 800098c:	3302      	adds	r3, #2
 800098e:	693a      	ldr	r2, [r7, #16]
 8000990:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000994:	4b36      	ldr	r3, [pc, #216]	; (8000a70 <HAL_GPIO_Init+0x2d0>)
 8000996:	689b      	ldr	r3, [r3, #8]
 8000998:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	43db      	mvns	r3, r3
 800099e:	693a      	ldr	r2, [r7, #16]
 80009a0:	4013      	ands	r3, r2
 80009a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	685b      	ldr	r3, [r3, #4]
 80009a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d003      	beq.n	80009b8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80009b0:	693a      	ldr	r2, [r7, #16]
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	4313      	orrs	r3, r2
 80009b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80009b8:	4a2d      	ldr	r2, [pc, #180]	; (8000a70 <HAL_GPIO_Init+0x2d0>)
 80009ba:	693b      	ldr	r3, [r7, #16]
 80009bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80009be:	4b2c      	ldr	r3, [pc, #176]	; (8000a70 <HAL_GPIO_Init+0x2d0>)
 80009c0:	68db      	ldr	r3, [r3, #12]
 80009c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	43db      	mvns	r3, r3
 80009c8:	693a      	ldr	r2, [r7, #16]
 80009ca:	4013      	ands	r3, r2
 80009cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d003      	beq.n	80009e2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80009da:	693a      	ldr	r2, [r7, #16]
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	4313      	orrs	r3, r2
 80009e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80009e2:	4a23      	ldr	r2, [pc, #140]	; (8000a70 <HAL_GPIO_Init+0x2d0>)
 80009e4:	693b      	ldr	r3, [r7, #16]
 80009e6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80009e8:	4b21      	ldr	r3, [pc, #132]	; (8000a70 <HAL_GPIO_Init+0x2d0>)
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	43db      	mvns	r3, r3
 80009f2:	693a      	ldr	r2, [r7, #16]
 80009f4:	4013      	ands	r3, r2
 80009f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d003      	beq.n	8000a0c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000a04:	693a      	ldr	r2, [r7, #16]
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000a0c:	4a18      	ldr	r2, [pc, #96]	; (8000a70 <HAL_GPIO_Init+0x2d0>)
 8000a0e:	693b      	ldr	r3, [r7, #16]
 8000a10:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000a12:	4b17      	ldr	r3, [pc, #92]	; (8000a70 <HAL_GPIO_Init+0x2d0>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	43db      	mvns	r3, r3
 8000a1c:	693a      	ldr	r2, [r7, #16]
 8000a1e:	4013      	ands	r3, r2
 8000a20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d003      	beq.n	8000a36 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8000a2e:	693a      	ldr	r2, [r7, #16]
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	4313      	orrs	r3, r2
 8000a34:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000a36:	4a0e      	ldr	r2, [pc, #56]	; (8000a70 <HAL_GPIO_Init+0x2d0>)
 8000a38:	693b      	ldr	r3, [r7, #16]
 8000a3a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	681a      	ldr	r2, [r3, #0]
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	fa22 f303 	lsr.w	r3, r2, r3
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	f47f aeaf 	bne.w	80007b0 <HAL_GPIO_Init+0x10>
  }
}
 8000a52:	bf00      	nop
 8000a54:	bf00      	nop
 8000a56:	371c      	adds	r7, #28
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	40021000 	.word	0x40021000
 8000a64:	40010000 	.word	0x40010000
 8000a68:	48000400 	.word	0x48000400
 8000a6c:	48000800 	.word	0x48000800
 8000a70:	40010400 	.word	0x40010400

08000a74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
 8000a7c:	460b      	mov	r3, r1
 8000a7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	691a      	ldr	r2, [r3, #16]
 8000a84:	887b      	ldrh	r3, [r7, #2]
 8000a86:	4013      	ands	r3, r2
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d002      	beq.n	8000a92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	73fb      	strb	r3, [r7, #15]
 8000a90:	e001      	b.n	8000a96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000a92:	2300      	movs	r3, #0
 8000a94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3714      	adds	r7, #20
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	460b      	mov	r3, r1
 8000aae:	807b      	strh	r3, [r7, #2]
 8000ab0:	4613      	mov	r3, r2
 8000ab2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ab4:	787b      	ldrb	r3, [r7, #1]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d003      	beq.n	8000ac2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000aba:	887a      	ldrh	r2, [r7, #2]
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ac0:	e002      	b.n	8000ac8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ac2:	887a      	ldrh	r2, [r7, #2]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ac8:	bf00      	nop
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	460b      	mov	r3, r1
 8000ade:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	695b      	ldr	r3, [r3, #20]
 8000ae4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ae6:	887a      	ldrh	r2, [r7, #2]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	4013      	ands	r3, r2
 8000aec:	041a      	lsls	r2, r3, #16
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	43d9      	mvns	r1, r3
 8000af2:	887b      	ldrh	r3, [r7, #2]
 8000af4:	400b      	ands	r3, r1
 8000af6:	431a      	orrs	r2, r3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	619a      	str	r2, [r3, #24]
}
 8000afc:	bf00      	nop
 8000afe:	3714      	adds	r7, #20
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr

08000b08 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000b0c:	4b04      	ldr	r3, [pc, #16]	; (8000b20 <HAL_PWREx_GetVoltageRange+0x18>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	40007000 	.word	0x40007000

08000b24 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b085      	sub	sp, #20
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b32:	d130      	bne.n	8000b96 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000b34:	4b23      	ldr	r3, [pc, #140]	; (8000bc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000b3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b40:	d038      	beq.n	8000bb4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b42:	4b20      	ldr	r3, [pc, #128]	; (8000bc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000b4a:	4a1e      	ldr	r2, [pc, #120]	; (8000bc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b4c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b50:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000b52:	4b1d      	ldr	r3, [pc, #116]	; (8000bc8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	2232      	movs	r2, #50	; 0x32
 8000b58:	fb02 f303 	mul.w	r3, r2, r3
 8000b5c:	4a1b      	ldr	r2, [pc, #108]	; (8000bcc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b62:	0c9b      	lsrs	r3, r3, #18
 8000b64:	3301      	adds	r3, #1
 8000b66:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000b68:	e002      	b.n	8000b70 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	3b01      	subs	r3, #1
 8000b6e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000b70:	4b14      	ldr	r3, [pc, #80]	; (8000bc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b72:	695b      	ldr	r3, [r3, #20]
 8000b74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b7c:	d102      	bne.n	8000b84 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d1f2      	bne.n	8000b6a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000b84:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b86:	695b      	ldr	r3, [r3, #20]
 8000b88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b90:	d110      	bne.n	8000bb4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000b92:	2303      	movs	r3, #3
 8000b94:	e00f      	b.n	8000bb6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000b96:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000b9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ba2:	d007      	beq.n	8000bb4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ba4:	4b07      	ldr	r3, [pc, #28]	; (8000bc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000bac:	4a05      	ldr	r2, [pc, #20]	; (8000bc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bb2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000bb4:	2300      	movs	r3, #0
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3714      	adds	r7, #20
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	40007000 	.word	0x40007000
 8000bc8:	20000000 	.word	0x20000000
 8000bcc:	431bde83 	.word	0x431bde83

08000bd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b088      	sub	sp, #32
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d102      	bne.n	8000be4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
 8000be0:	f000 bc02 	b.w	80013e8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000be4:	4b96      	ldr	r3, [pc, #600]	; (8000e40 <HAL_RCC_OscConfig+0x270>)
 8000be6:	689b      	ldr	r3, [r3, #8]
 8000be8:	f003 030c 	and.w	r3, r3, #12
 8000bec:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000bee:	4b94      	ldr	r3, [pc, #592]	; (8000e40 <HAL_RCC_OscConfig+0x270>)
 8000bf0:	68db      	ldr	r3, [r3, #12]
 8000bf2:	f003 0303 	and.w	r3, r3, #3
 8000bf6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f003 0310 	and.w	r3, r3, #16
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	f000 80e4 	beq.w	8000dce <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000c06:	69bb      	ldr	r3, [r7, #24]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d007      	beq.n	8000c1c <HAL_RCC_OscConfig+0x4c>
 8000c0c:	69bb      	ldr	r3, [r7, #24]
 8000c0e:	2b0c      	cmp	r3, #12
 8000c10:	f040 808b 	bne.w	8000d2a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	f040 8087 	bne.w	8000d2a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000c1c:	4b88      	ldr	r3, [pc, #544]	; (8000e40 <HAL_RCC_OscConfig+0x270>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f003 0302 	and.w	r3, r3, #2
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d005      	beq.n	8000c34 <HAL_RCC_OscConfig+0x64>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d101      	bne.n	8000c34 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000c30:	2301      	movs	r3, #1
 8000c32:	e3d9      	b.n	80013e8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6a1a      	ldr	r2, [r3, #32]
 8000c38:	4b81      	ldr	r3, [pc, #516]	; (8000e40 <HAL_RCC_OscConfig+0x270>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f003 0308 	and.w	r3, r3, #8
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d004      	beq.n	8000c4e <HAL_RCC_OscConfig+0x7e>
 8000c44:	4b7e      	ldr	r3, [pc, #504]	; (8000e40 <HAL_RCC_OscConfig+0x270>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000c4c:	e005      	b.n	8000c5a <HAL_RCC_OscConfig+0x8a>
 8000c4e:	4b7c      	ldr	r3, [pc, #496]	; (8000e40 <HAL_RCC_OscConfig+0x270>)
 8000c50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000c54:	091b      	lsrs	r3, r3, #4
 8000c56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d223      	bcs.n	8000ca6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6a1b      	ldr	r3, [r3, #32]
 8000c62:	4618      	mov	r0, r3
 8000c64:	f000 fd54 	bl	8001710 <RCC_SetFlashLatencyFromMSIRange>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e3ba      	b.n	80013e8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000c72:	4b73      	ldr	r3, [pc, #460]	; (8000e40 <HAL_RCC_OscConfig+0x270>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a72      	ldr	r2, [pc, #456]	; (8000e40 <HAL_RCC_OscConfig+0x270>)
 8000c78:	f043 0308 	orr.w	r3, r3, #8
 8000c7c:	6013      	str	r3, [r2, #0]
 8000c7e:	4b70      	ldr	r3, [pc, #448]	; (8000e40 <HAL_RCC_OscConfig+0x270>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6a1b      	ldr	r3, [r3, #32]
 8000c8a:	496d      	ldr	r1, [pc, #436]	; (8000e40 <HAL_RCC_OscConfig+0x270>)
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000c90:	4b6b      	ldr	r3, [pc, #428]	; (8000e40 <HAL_RCC_OscConfig+0x270>)
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	69db      	ldr	r3, [r3, #28]
 8000c9c:	021b      	lsls	r3, r3, #8
 8000c9e:	4968      	ldr	r1, [pc, #416]	; (8000e40 <HAL_RCC_OscConfig+0x270>)
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	604b      	str	r3, [r1, #4]
 8000ca4:	e025      	b.n	8000cf2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ca6:	4b66      	ldr	r3, [pc, #408]	; (8000e40 <HAL_RCC_OscConfig+0x270>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a65      	ldr	r2, [pc, #404]	; (8000e40 <HAL_RCC_OscConfig+0x270>)
 8000cac:	f043 0308 	orr.w	r3, r3, #8
 8000cb0:	6013      	str	r3, [r2, #0]
 8000cb2:	4b63      	ldr	r3, [pc, #396]	; (8000e40 <HAL_RCC_OscConfig+0x270>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6a1b      	ldr	r3, [r3, #32]
 8000cbe:	4960      	ldr	r1, [pc, #384]	; (8000e40 <HAL_RCC_OscConfig+0x270>)
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000cc4:	4b5e      	ldr	r3, [pc, #376]	; (8000e40 <HAL_RCC_OscConfig+0x270>)
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	69db      	ldr	r3, [r3, #28]
 8000cd0:	021b      	lsls	r3, r3, #8
 8000cd2:	495b      	ldr	r1, [pc, #364]	; (8000e40 <HAL_RCC_OscConfig+0x270>)
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000cd8:	69bb      	ldr	r3, [r7, #24]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d109      	bne.n	8000cf2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6a1b      	ldr	r3, [r3, #32]
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f000 fd14 	bl	8001710 <RCC_SetFlashLatencyFromMSIRange>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e37a      	b.n	80013e8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000cf2:	f000 fc81 	bl	80015f8 <HAL_RCC_GetSysClockFreq>
 8000cf6:	4602      	mov	r2, r0
 8000cf8:	4b51      	ldr	r3, [pc, #324]	; (8000e40 <HAL_RCC_OscConfig+0x270>)
 8000cfa:	689b      	ldr	r3, [r3, #8]
 8000cfc:	091b      	lsrs	r3, r3, #4
 8000cfe:	f003 030f 	and.w	r3, r3, #15
 8000d02:	4950      	ldr	r1, [pc, #320]	; (8000e44 <HAL_RCC_OscConfig+0x274>)
 8000d04:	5ccb      	ldrb	r3, [r1, r3]
 8000d06:	f003 031f 	and.w	r3, r3, #31
 8000d0a:	fa22 f303 	lsr.w	r3, r2, r3
 8000d0e:	4a4e      	ldr	r2, [pc, #312]	; (8000e48 <HAL_RCC_OscConfig+0x278>)
 8000d10:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000d12:	4b4e      	ldr	r3, [pc, #312]	; (8000e4c <HAL_RCC_OscConfig+0x27c>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff fbdc 	bl	80004d4 <HAL_InitTick>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000d20:	7bfb      	ldrb	r3, [r7, #15]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d052      	beq.n	8000dcc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000d26:	7bfb      	ldrb	r3, [r7, #15]
 8000d28:	e35e      	b.n	80013e8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	699b      	ldr	r3, [r3, #24]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d032      	beq.n	8000d98 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000d32:	4b43      	ldr	r3, [pc, #268]	; (8000e40 <HAL_RCC_OscConfig+0x270>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a42      	ldr	r2, [pc, #264]	; (8000e40 <HAL_RCC_OscConfig+0x270>)
 8000d38:	f043 0301 	orr.w	r3, r3, #1
 8000d3c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000d3e:	f7ff fc19 	bl	8000574 <HAL_GetTick>
 8000d42:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000d44:	e008      	b.n	8000d58 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000d46:	f7ff fc15 	bl	8000574 <HAL_GetTick>
 8000d4a:	4602      	mov	r2, r0
 8000d4c:	693b      	ldr	r3, [r7, #16]
 8000d4e:	1ad3      	subs	r3, r2, r3
 8000d50:	2b02      	cmp	r3, #2
 8000d52:	d901      	bls.n	8000d58 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000d54:	2303      	movs	r3, #3
 8000d56:	e347      	b.n	80013e8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000d58:	4b39      	ldr	r3, [pc, #228]	; (8000e40 <HAL_RCC_OscConfig+0x270>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f003 0302 	and.w	r3, r3, #2
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d0f0      	beq.n	8000d46 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d64:	4b36      	ldr	r3, [pc, #216]	; (8000e40 <HAL_RCC_OscConfig+0x270>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a35      	ldr	r2, [pc, #212]	; (8000e40 <HAL_RCC_OscConfig+0x270>)
 8000d6a:	f043 0308 	orr.w	r3, r3, #8
 8000d6e:	6013      	str	r3, [r2, #0]
 8000d70:	4b33      	ldr	r3, [pc, #204]	; (8000e40 <HAL_RCC_OscConfig+0x270>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6a1b      	ldr	r3, [r3, #32]
 8000d7c:	4930      	ldr	r1, [pc, #192]	; (8000e40 <HAL_RCC_OscConfig+0x270>)
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d82:	4b2f      	ldr	r3, [pc, #188]	; (8000e40 <HAL_RCC_OscConfig+0x270>)
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	69db      	ldr	r3, [r3, #28]
 8000d8e:	021b      	lsls	r3, r3, #8
 8000d90:	492b      	ldr	r1, [pc, #172]	; (8000e40 <HAL_RCC_OscConfig+0x270>)
 8000d92:	4313      	orrs	r3, r2
 8000d94:	604b      	str	r3, [r1, #4]
 8000d96:	e01a      	b.n	8000dce <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000d98:	4b29      	ldr	r3, [pc, #164]	; (8000e40 <HAL_RCC_OscConfig+0x270>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a28      	ldr	r2, [pc, #160]	; (8000e40 <HAL_RCC_OscConfig+0x270>)
 8000d9e:	f023 0301 	bic.w	r3, r3, #1
 8000da2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000da4:	f7ff fbe6 	bl	8000574 <HAL_GetTick>
 8000da8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000daa:	e008      	b.n	8000dbe <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000dac:	f7ff fbe2 	bl	8000574 <HAL_GetTick>
 8000db0:	4602      	mov	r2, r0
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	2b02      	cmp	r3, #2
 8000db8:	d901      	bls.n	8000dbe <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	e314      	b.n	80013e8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000dbe:	4b20      	ldr	r3, [pc, #128]	; (8000e40 <HAL_RCC_OscConfig+0x270>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f003 0302 	and.w	r3, r3, #2
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d1f0      	bne.n	8000dac <HAL_RCC_OscConfig+0x1dc>
 8000dca:	e000      	b.n	8000dce <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000dcc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d073      	beq.n	8000ec2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000dda:	69bb      	ldr	r3, [r7, #24]
 8000ddc:	2b08      	cmp	r3, #8
 8000dde:	d005      	beq.n	8000dec <HAL_RCC_OscConfig+0x21c>
 8000de0:	69bb      	ldr	r3, [r7, #24]
 8000de2:	2b0c      	cmp	r3, #12
 8000de4:	d10e      	bne.n	8000e04 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	2b03      	cmp	r3, #3
 8000dea:	d10b      	bne.n	8000e04 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dec:	4b14      	ldr	r3, [pc, #80]	; (8000e40 <HAL_RCC_OscConfig+0x270>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d063      	beq.n	8000ec0 <HAL_RCC_OscConfig+0x2f0>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d15f      	bne.n	8000ec0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000e00:	2301      	movs	r3, #1
 8000e02:	e2f1      	b.n	80013e8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e0c:	d106      	bne.n	8000e1c <HAL_RCC_OscConfig+0x24c>
 8000e0e:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <HAL_RCC_OscConfig+0x270>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a0b      	ldr	r2, [pc, #44]	; (8000e40 <HAL_RCC_OscConfig+0x270>)
 8000e14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e18:	6013      	str	r3, [r2, #0]
 8000e1a:	e025      	b.n	8000e68 <HAL_RCC_OscConfig+0x298>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e24:	d114      	bne.n	8000e50 <HAL_RCC_OscConfig+0x280>
 8000e26:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <HAL_RCC_OscConfig+0x270>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a05      	ldr	r2, [pc, #20]	; (8000e40 <HAL_RCC_OscConfig+0x270>)
 8000e2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e30:	6013      	str	r3, [r2, #0]
 8000e32:	4b03      	ldr	r3, [pc, #12]	; (8000e40 <HAL_RCC_OscConfig+0x270>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a02      	ldr	r2, [pc, #8]	; (8000e40 <HAL_RCC_OscConfig+0x270>)
 8000e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e3c:	6013      	str	r3, [r2, #0]
 8000e3e:	e013      	b.n	8000e68 <HAL_RCC_OscConfig+0x298>
 8000e40:	40021000 	.word	0x40021000
 8000e44:	08001840 	.word	0x08001840
 8000e48:	20000000 	.word	0x20000000
 8000e4c:	20000004 	.word	0x20000004
 8000e50:	4ba0      	ldr	r3, [pc, #640]	; (80010d4 <HAL_RCC_OscConfig+0x504>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a9f      	ldr	r2, [pc, #636]	; (80010d4 <HAL_RCC_OscConfig+0x504>)
 8000e56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e5a:	6013      	str	r3, [r2, #0]
 8000e5c:	4b9d      	ldr	r3, [pc, #628]	; (80010d4 <HAL_RCC_OscConfig+0x504>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a9c      	ldr	r2, [pc, #624]	; (80010d4 <HAL_RCC_OscConfig+0x504>)
 8000e62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d013      	beq.n	8000e98 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e70:	f7ff fb80 	bl	8000574 <HAL_GetTick>
 8000e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e76:	e008      	b.n	8000e8a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e78:	f7ff fb7c 	bl	8000574 <HAL_GetTick>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	693b      	ldr	r3, [r7, #16]
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	2b64      	cmp	r3, #100	; 0x64
 8000e84:	d901      	bls.n	8000e8a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000e86:	2303      	movs	r3, #3
 8000e88:	e2ae      	b.n	80013e8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e8a:	4b92      	ldr	r3, [pc, #584]	; (80010d4 <HAL_RCC_OscConfig+0x504>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d0f0      	beq.n	8000e78 <HAL_RCC_OscConfig+0x2a8>
 8000e96:	e014      	b.n	8000ec2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e98:	f7ff fb6c 	bl	8000574 <HAL_GetTick>
 8000e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e9e:	e008      	b.n	8000eb2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ea0:	f7ff fb68 	bl	8000574 <HAL_GetTick>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	2b64      	cmp	r3, #100	; 0x64
 8000eac:	d901      	bls.n	8000eb2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	e29a      	b.n	80013e8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000eb2:	4b88      	ldr	r3, [pc, #544]	; (80010d4 <HAL_RCC_OscConfig+0x504>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d1f0      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x2d0>
 8000ebe:	e000      	b.n	8000ec2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ec0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f003 0302 	and.w	r3, r3, #2
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d060      	beq.n	8000f90 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000ece:	69bb      	ldr	r3, [r7, #24]
 8000ed0:	2b04      	cmp	r3, #4
 8000ed2:	d005      	beq.n	8000ee0 <HAL_RCC_OscConfig+0x310>
 8000ed4:	69bb      	ldr	r3, [r7, #24]
 8000ed6:	2b0c      	cmp	r3, #12
 8000ed8:	d119      	bne.n	8000f0e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	2b02      	cmp	r3, #2
 8000ede:	d116      	bne.n	8000f0e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ee0:	4b7c      	ldr	r3, [pc, #496]	; (80010d4 <HAL_RCC_OscConfig+0x504>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d005      	beq.n	8000ef8 <HAL_RCC_OscConfig+0x328>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d101      	bne.n	8000ef8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e277      	b.n	80013e8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ef8:	4b76      	ldr	r3, [pc, #472]	; (80010d4 <HAL_RCC_OscConfig+0x504>)
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	691b      	ldr	r3, [r3, #16]
 8000f04:	061b      	lsls	r3, r3, #24
 8000f06:	4973      	ldr	r1, [pc, #460]	; (80010d4 <HAL_RCC_OscConfig+0x504>)
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f0c:	e040      	b.n	8000f90 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	68db      	ldr	r3, [r3, #12]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d023      	beq.n	8000f5e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f16:	4b6f      	ldr	r3, [pc, #444]	; (80010d4 <HAL_RCC_OscConfig+0x504>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a6e      	ldr	r2, [pc, #440]	; (80010d4 <HAL_RCC_OscConfig+0x504>)
 8000f1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f22:	f7ff fb27 	bl	8000574 <HAL_GetTick>
 8000f26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f28:	e008      	b.n	8000f3c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f2a:	f7ff fb23 	bl	8000574 <HAL_GetTick>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	d901      	bls.n	8000f3c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	e255      	b.n	80013e8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f3c:	4b65      	ldr	r3, [pc, #404]	; (80010d4 <HAL_RCC_OscConfig+0x504>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d0f0      	beq.n	8000f2a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f48:	4b62      	ldr	r3, [pc, #392]	; (80010d4 <HAL_RCC_OscConfig+0x504>)
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	691b      	ldr	r3, [r3, #16]
 8000f54:	061b      	lsls	r3, r3, #24
 8000f56:	495f      	ldr	r1, [pc, #380]	; (80010d4 <HAL_RCC_OscConfig+0x504>)
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	604b      	str	r3, [r1, #4]
 8000f5c:	e018      	b.n	8000f90 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f5e:	4b5d      	ldr	r3, [pc, #372]	; (80010d4 <HAL_RCC_OscConfig+0x504>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a5c      	ldr	r2, [pc, #368]	; (80010d4 <HAL_RCC_OscConfig+0x504>)
 8000f64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f6a:	f7ff fb03 	bl	8000574 <HAL_GetTick>
 8000f6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000f70:	e008      	b.n	8000f84 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f72:	f7ff faff 	bl	8000574 <HAL_GetTick>
 8000f76:	4602      	mov	r2, r0
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	1ad3      	subs	r3, r2, r3
 8000f7c:	2b02      	cmp	r3, #2
 8000f7e:	d901      	bls.n	8000f84 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8000f80:	2303      	movs	r3, #3
 8000f82:	e231      	b.n	80013e8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000f84:	4b53      	ldr	r3, [pc, #332]	; (80010d4 <HAL_RCC_OscConfig+0x504>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d1f0      	bne.n	8000f72 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f003 0308 	and.w	r3, r3, #8
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d03c      	beq.n	8001016 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	695b      	ldr	r3, [r3, #20]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d01c      	beq.n	8000fde <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fa4:	4b4b      	ldr	r3, [pc, #300]	; (80010d4 <HAL_RCC_OscConfig+0x504>)
 8000fa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000faa:	4a4a      	ldr	r2, [pc, #296]	; (80010d4 <HAL_RCC_OscConfig+0x504>)
 8000fac:	f043 0301 	orr.w	r3, r3, #1
 8000fb0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fb4:	f7ff fade 	bl	8000574 <HAL_GetTick>
 8000fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000fba:	e008      	b.n	8000fce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fbc:	f7ff fada 	bl	8000574 <HAL_GetTick>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d901      	bls.n	8000fce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	e20c      	b.n	80013e8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000fce:	4b41      	ldr	r3, [pc, #260]	; (80010d4 <HAL_RCC_OscConfig+0x504>)
 8000fd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fd4:	f003 0302 	and.w	r3, r3, #2
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d0ef      	beq.n	8000fbc <HAL_RCC_OscConfig+0x3ec>
 8000fdc:	e01b      	b.n	8001016 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fde:	4b3d      	ldr	r3, [pc, #244]	; (80010d4 <HAL_RCC_OscConfig+0x504>)
 8000fe0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fe4:	4a3b      	ldr	r2, [pc, #236]	; (80010d4 <HAL_RCC_OscConfig+0x504>)
 8000fe6:	f023 0301 	bic.w	r3, r3, #1
 8000fea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fee:	f7ff fac1 	bl	8000574 <HAL_GetTick>
 8000ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000ff4:	e008      	b.n	8001008 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ff6:	f7ff fabd 	bl	8000574 <HAL_GetTick>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	2b02      	cmp	r3, #2
 8001002:	d901      	bls.n	8001008 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001004:	2303      	movs	r3, #3
 8001006:	e1ef      	b.n	80013e8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001008:	4b32      	ldr	r3, [pc, #200]	; (80010d4 <HAL_RCC_OscConfig+0x504>)
 800100a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800100e:	f003 0302 	and.w	r3, r3, #2
 8001012:	2b00      	cmp	r3, #0
 8001014:	d1ef      	bne.n	8000ff6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f003 0304 	and.w	r3, r3, #4
 800101e:	2b00      	cmp	r3, #0
 8001020:	f000 80a6 	beq.w	8001170 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001024:	2300      	movs	r3, #0
 8001026:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001028:	4b2a      	ldr	r3, [pc, #168]	; (80010d4 <HAL_RCC_OscConfig+0x504>)
 800102a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800102c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001030:	2b00      	cmp	r3, #0
 8001032:	d10d      	bne.n	8001050 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001034:	4b27      	ldr	r3, [pc, #156]	; (80010d4 <HAL_RCC_OscConfig+0x504>)
 8001036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001038:	4a26      	ldr	r2, [pc, #152]	; (80010d4 <HAL_RCC_OscConfig+0x504>)
 800103a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800103e:	6593      	str	r3, [r2, #88]	; 0x58
 8001040:	4b24      	ldr	r3, [pc, #144]	; (80010d4 <HAL_RCC_OscConfig+0x504>)
 8001042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001044:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001048:	60bb      	str	r3, [r7, #8]
 800104a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800104c:	2301      	movs	r3, #1
 800104e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001050:	4b21      	ldr	r3, [pc, #132]	; (80010d8 <HAL_RCC_OscConfig+0x508>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001058:	2b00      	cmp	r3, #0
 800105a:	d118      	bne.n	800108e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800105c:	4b1e      	ldr	r3, [pc, #120]	; (80010d8 <HAL_RCC_OscConfig+0x508>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a1d      	ldr	r2, [pc, #116]	; (80010d8 <HAL_RCC_OscConfig+0x508>)
 8001062:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001066:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001068:	f7ff fa84 	bl	8000574 <HAL_GetTick>
 800106c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800106e:	e008      	b.n	8001082 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001070:	f7ff fa80 	bl	8000574 <HAL_GetTick>
 8001074:	4602      	mov	r2, r0
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	2b02      	cmp	r3, #2
 800107c:	d901      	bls.n	8001082 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800107e:	2303      	movs	r3, #3
 8001080:	e1b2      	b.n	80013e8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001082:	4b15      	ldr	r3, [pc, #84]	; (80010d8 <HAL_RCC_OscConfig+0x508>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800108a:	2b00      	cmp	r3, #0
 800108c:	d0f0      	beq.n	8001070 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	2b01      	cmp	r3, #1
 8001094:	d108      	bne.n	80010a8 <HAL_RCC_OscConfig+0x4d8>
 8001096:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <HAL_RCC_OscConfig+0x504>)
 8001098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800109c:	4a0d      	ldr	r2, [pc, #52]	; (80010d4 <HAL_RCC_OscConfig+0x504>)
 800109e:	f043 0301 	orr.w	r3, r3, #1
 80010a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80010a6:	e029      	b.n	80010fc <HAL_RCC_OscConfig+0x52c>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	2b05      	cmp	r3, #5
 80010ae:	d115      	bne.n	80010dc <HAL_RCC_OscConfig+0x50c>
 80010b0:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <HAL_RCC_OscConfig+0x504>)
 80010b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010b6:	4a07      	ldr	r2, [pc, #28]	; (80010d4 <HAL_RCC_OscConfig+0x504>)
 80010b8:	f043 0304 	orr.w	r3, r3, #4
 80010bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80010c0:	4b04      	ldr	r3, [pc, #16]	; (80010d4 <HAL_RCC_OscConfig+0x504>)
 80010c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010c6:	4a03      	ldr	r2, [pc, #12]	; (80010d4 <HAL_RCC_OscConfig+0x504>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80010d0:	e014      	b.n	80010fc <HAL_RCC_OscConfig+0x52c>
 80010d2:	bf00      	nop
 80010d4:	40021000 	.word	0x40021000
 80010d8:	40007000 	.word	0x40007000
 80010dc:	4b9a      	ldr	r3, [pc, #616]	; (8001348 <HAL_RCC_OscConfig+0x778>)
 80010de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010e2:	4a99      	ldr	r2, [pc, #612]	; (8001348 <HAL_RCC_OscConfig+0x778>)
 80010e4:	f023 0301 	bic.w	r3, r3, #1
 80010e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80010ec:	4b96      	ldr	r3, [pc, #600]	; (8001348 <HAL_RCC_OscConfig+0x778>)
 80010ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010f2:	4a95      	ldr	r2, [pc, #596]	; (8001348 <HAL_RCC_OscConfig+0x778>)
 80010f4:	f023 0304 	bic.w	r3, r3, #4
 80010f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d016      	beq.n	8001132 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001104:	f7ff fa36 	bl	8000574 <HAL_GetTick>
 8001108:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800110a:	e00a      	b.n	8001122 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800110c:	f7ff fa32 	bl	8000574 <HAL_GetTick>
 8001110:	4602      	mov	r2, r0
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	f241 3288 	movw	r2, #5000	; 0x1388
 800111a:	4293      	cmp	r3, r2
 800111c:	d901      	bls.n	8001122 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800111e:	2303      	movs	r3, #3
 8001120:	e162      	b.n	80013e8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001122:	4b89      	ldr	r3, [pc, #548]	; (8001348 <HAL_RCC_OscConfig+0x778>)
 8001124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001128:	f003 0302 	and.w	r3, r3, #2
 800112c:	2b00      	cmp	r3, #0
 800112e:	d0ed      	beq.n	800110c <HAL_RCC_OscConfig+0x53c>
 8001130:	e015      	b.n	800115e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001132:	f7ff fa1f 	bl	8000574 <HAL_GetTick>
 8001136:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001138:	e00a      	b.n	8001150 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800113a:	f7ff fa1b 	bl	8000574 <HAL_GetTick>
 800113e:	4602      	mov	r2, r0
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	f241 3288 	movw	r2, #5000	; 0x1388
 8001148:	4293      	cmp	r3, r2
 800114a:	d901      	bls.n	8001150 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800114c:	2303      	movs	r3, #3
 800114e:	e14b      	b.n	80013e8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001150:	4b7d      	ldr	r3, [pc, #500]	; (8001348 <HAL_RCC_OscConfig+0x778>)
 8001152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001156:	f003 0302 	and.w	r3, r3, #2
 800115a:	2b00      	cmp	r3, #0
 800115c:	d1ed      	bne.n	800113a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800115e:	7ffb      	ldrb	r3, [r7, #31]
 8001160:	2b01      	cmp	r3, #1
 8001162:	d105      	bne.n	8001170 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001164:	4b78      	ldr	r3, [pc, #480]	; (8001348 <HAL_RCC_OscConfig+0x778>)
 8001166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001168:	4a77      	ldr	r2, [pc, #476]	; (8001348 <HAL_RCC_OscConfig+0x778>)
 800116a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800116e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f003 0320 	and.w	r3, r3, #32
 8001178:	2b00      	cmp	r3, #0
 800117a:	d03c      	beq.n	80011f6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001180:	2b00      	cmp	r3, #0
 8001182:	d01c      	beq.n	80011be <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001184:	4b70      	ldr	r3, [pc, #448]	; (8001348 <HAL_RCC_OscConfig+0x778>)
 8001186:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800118a:	4a6f      	ldr	r2, [pc, #444]	; (8001348 <HAL_RCC_OscConfig+0x778>)
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001194:	f7ff f9ee 	bl	8000574 <HAL_GetTick>
 8001198:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800119a:	e008      	b.n	80011ae <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800119c:	f7ff f9ea 	bl	8000574 <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d901      	bls.n	80011ae <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80011aa:	2303      	movs	r3, #3
 80011ac:	e11c      	b.n	80013e8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80011ae:	4b66      	ldr	r3, [pc, #408]	; (8001348 <HAL_RCC_OscConfig+0x778>)
 80011b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80011b4:	f003 0302 	and.w	r3, r3, #2
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d0ef      	beq.n	800119c <HAL_RCC_OscConfig+0x5cc>
 80011bc:	e01b      	b.n	80011f6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80011be:	4b62      	ldr	r3, [pc, #392]	; (8001348 <HAL_RCC_OscConfig+0x778>)
 80011c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80011c4:	4a60      	ldr	r2, [pc, #384]	; (8001348 <HAL_RCC_OscConfig+0x778>)
 80011c6:	f023 0301 	bic.w	r3, r3, #1
 80011ca:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011ce:	f7ff f9d1 	bl	8000574 <HAL_GetTick>
 80011d2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80011d4:	e008      	b.n	80011e8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80011d6:	f7ff f9cd 	bl	8000574 <HAL_GetTick>
 80011da:	4602      	mov	r2, r0
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d901      	bls.n	80011e8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80011e4:	2303      	movs	r3, #3
 80011e6:	e0ff      	b.n	80013e8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80011e8:	4b57      	ldr	r3, [pc, #348]	; (8001348 <HAL_RCC_OscConfig+0x778>)
 80011ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80011ee:	f003 0302 	and.w	r3, r3, #2
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d1ef      	bne.n	80011d6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	f000 80f3 	beq.w	80013e6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001204:	2b02      	cmp	r3, #2
 8001206:	f040 80c9 	bne.w	800139c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800120a:	4b4f      	ldr	r3, [pc, #316]	; (8001348 <HAL_RCC_OscConfig+0x778>)
 800120c:	68db      	ldr	r3, [r3, #12]
 800120e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	f003 0203 	and.w	r2, r3, #3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800121a:	429a      	cmp	r2, r3
 800121c:	d12c      	bne.n	8001278 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001228:	3b01      	subs	r3, #1
 800122a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800122c:	429a      	cmp	r2, r3
 800122e:	d123      	bne.n	8001278 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800123a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800123c:	429a      	cmp	r2, r3
 800123e:	d11b      	bne.n	8001278 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800124a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800124c:	429a      	cmp	r2, r3
 800124e:	d113      	bne.n	8001278 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800125a:	085b      	lsrs	r3, r3, #1
 800125c:	3b01      	subs	r3, #1
 800125e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001260:	429a      	cmp	r2, r3
 8001262:	d109      	bne.n	8001278 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126e:	085b      	lsrs	r3, r3, #1
 8001270:	3b01      	subs	r3, #1
 8001272:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001274:	429a      	cmp	r2, r3
 8001276:	d06b      	beq.n	8001350 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	2b0c      	cmp	r3, #12
 800127c:	d062      	beq.n	8001344 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800127e:	4b32      	ldr	r3, [pc, #200]	; (8001348 <HAL_RCC_OscConfig+0x778>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e0ac      	b.n	80013e8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800128e:	4b2e      	ldr	r3, [pc, #184]	; (8001348 <HAL_RCC_OscConfig+0x778>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a2d      	ldr	r2, [pc, #180]	; (8001348 <HAL_RCC_OscConfig+0x778>)
 8001294:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001298:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800129a:	f7ff f96b 	bl	8000574 <HAL_GetTick>
 800129e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012a0:	e008      	b.n	80012b4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012a2:	f7ff f967 	bl	8000574 <HAL_GetTick>
 80012a6:	4602      	mov	r2, r0
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d901      	bls.n	80012b4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80012b0:	2303      	movs	r3, #3
 80012b2:	e099      	b.n	80013e8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012b4:	4b24      	ldr	r3, [pc, #144]	; (8001348 <HAL_RCC_OscConfig+0x778>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d1f0      	bne.n	80012a2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012c0:	4b21      	ldr	r3, [pc, #132]	; (8001348 <HAL_RCC_OscConfig+0x778>)
 80012c2:	68da      	ldr	r2, [r3, #12]
 80012c4:	4b21      	ldr	r3, [pc, #132]	; (800134c <HAL_RCC_OscConfig+0x77c>)
 80012c6:	4013      	ands	r3, r2
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80012d0:	3a01      	subs	r2, #1
 80012d2:	0112      	lsls	r2, r2, #4
 80012d4:	4311      	orrs	r1, r2
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80012da:	0212      	lsls	r2, r2, #8
 80012dc:	4311      	orrs	r1, r2
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80012e2:	0852      	lsrs	r2, r2, #1
 80012e4:	3a01      	subs	r2, #1
 80012e6:	0552      	lsls	r2, r2, #21
 80012e8:	4311      	orrs	r1, r2
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80012ee:	0852      	lsrs	r2, r2, #1
 80012f0:	3a01      	subs	r2, #1
 80012f2:	0652      	lsls	r2, r2, #25
 80012f4:	4311      	orrs	r1, r2
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80012fa:	06d2      	lsls	r2, r2, #27
 80012fc:	430a      	orrs	r2, r1
 80012fe:	4912      	ldr	r1, [pc, #72]	; (8001348 <HAL_RCC_OscConfig+0x778>)
 8001300:	4313      	orrs	r3, r2
 8001302:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001304:	4b10      	ldr	r3, [pc, #64]	; (8001348 <HAL_RCC_OscConfig+0x778>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a0f      	ldr	r2, [pc, #60]	; (8001348 <HAL_RCC_OscConfig+0x778>)
 800130a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800130e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001310:	4b0d      	ldr	r3, [pc, #52]	; (8001348 <HAL_RCC_OscConfig+0x778>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	4a0c      	ldr	r2, [pc, #48]	; (8001348 <HAL_RCC_OscConfig+0x778>)
 8001316:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800131a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800131c:	f7ff f92a 	bl	8000574 <HAL_GetTick>
 8001320:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001322:	e008      	b.n	8001336 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001324:	f7ff f926 	bl	8000574 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b02      	cmp	r3, #2
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e058      	b.n	80013e8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001336:	4b04      	ldr	r3, [pc, #16]	; (8001348 <HAL_RCC_OscConfig+0x778>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d0f0      	beq.n	8001324 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001342:	e050      	b.n	80013e6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	e04f      	b.n	80013e8 <HAL_RCC_OscConfig+0x818>
 8001348:	40021000 	.word	0x40021000
 800134c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001350:	4b27      	ldr	r3, [pc, #156]	; (80013f0 <HAL_RCC_OscConfig+0x820>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d144      	bne.n	80013e6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800135c:	4b24      	ldr	r3, [pc, #144]	; (80013f0 <HAL_RCC_OscConfig+0x820>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a23      	ldr	r2, [pc, #140]	; (80013f0 <HAL_RCC_OscConfig+0x820>)
 8001362:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001366:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001368:	4b21      	ldr	r3, [pc, #132]	; (80013f0 <HAL_RCC_OscConfig+0x820>)
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	4a20      	ldr	r2, [pc, #128]	; (80013f0 <HAL_RCC_OscConfig+0x820>)
 800136e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001372:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001374:	f7ff f8fe 	bl	8000574 <HAL_GetTick>
 8001378:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800137a:	e008      	b.n	800138e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800137c:	f7ff f8fa 	bl	8000574 <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	2b02      	cmp	r3, #2
 8001388:	d901      	bls.n	800138e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e02c      	b.n	80013e8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800138e:	4b18      	ldr	r3, [pc, #96]	; (80013f0 <HAL_RCC_OscConfig+0x820>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d0f0      	beq.n	800137c <HAL_RCC_OscConfig+0x7ac>
 800139a:	e024      	b.n	80013e6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	2b0c      	cmp	r3, #12
 80013a0:	d01f      	beq.n	80013e2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013a2:	4b13      	ldr	r3, [pc, #76]	; (80013f0 <HAL_RCC_OscConfig+0x820>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a12      	ldr	r2, [pc, #72]	; (80013f0 <HAL_RCC_OscConfig+0x820>)
 80013a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ae:	f7ff f8e1 	bl	8000574 <HAL_GetTick>
 80013b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013b4:	e008      	b.n	80013c8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013b6:	f7ff f8dd 	bl	8000574 <HAL_GetTick>
 80013ba:	4602      	mov	r2, r0
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d901      	bls.n	80013c8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e00f      	b.n	80013e8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013c8:	4b09      	ldr	r3, [pc, #36]	; (80013f0 <HAL_RCC_OscConfig+0x820>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d1f0      	bne.n	80013b6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80013d4:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <HAL_RCC_OscConfig+0x820>)
 80013d6:	68da      	ldr	r2, [r3, #12]
 80013d8:	4905      	ldr	r1, [pc, #20]	; (80013f0 <HAL_RCC_OscConfig+0x820>)
 80013da:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <HAL_RCC_OscConfig+0x824>)
 80013dc:	4013      	ands	r3, r2
 80013de:	60cb      	str	r3, [r1, #12]
 80013e0:	e001      	b.n	80013e6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e000      	b.n	80013e8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80013e6:	2300      	movs	r3, #0
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3720      	adds	r7, #32
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40021000 	.word	0x40021000
 80013f4:	feeefffc 	.word	0xfeeefffc

080013f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d101      	bne.n	800140c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e0e7      	b.n	80015dc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800140c:	4b75      	ldr	r3, [pc, #468]	; (80015e4 <HAL_RCC_ClockConfig+0x1ec>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0307 	and.w	r3, r3, #7
 8001414:	683a      	ldr	r2, [r7, #0]
 8001416:	429a      	cmp	r2, r3
 8001418:	d910      	bls.n	800143c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800141a:	4b72      	ldr	r3, [pc, #456]	; (80015e4 <HAL_RCC_ClockConfig+0x1ec>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f023 0207 	bic.w	r2, r3, #7
 8001422:	4970      	ldr	r1, [pc, #448]	; (80015e4 <HAL_RCC_ClockConfig+0x1ec>)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	4313      	orrs	r3, r2
 8001428:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800142a:	4b6e      	ldr	r3, [pc, #440]	; (80015e4 <HAL_RCC_ClockConfig+0x1ec>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0307 	and.w	r3, r3, #7
 8001432:	683a      	ldr	r2, [r7, #0]
 8001434:	429a      	cmp	r2, r3
 8001436:	d001      	beq.n	800143c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e0cf      	b.n	80015dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0302 	and.w	r3, r3, #2
 8001444:	2b00      	cmp	r3, #0
 8001446:	d010      	beq.n	800146a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689a      	ldr	r2, [r3, #8]
 800144c:	4b66      	ldr	r3, [pc, #408]	; (80015e8 <HAL_RCC_ClockConfig+0x1f0>)
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001454:	429a      	cmp	r2, r3
 8001456:	d908      	bls.n	800146a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001458:	4b63      	ldr	r3, [pc, #396]	; (80015e8 <HAL_RCC_ClockConfig+0x1f0>)
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	4960      	ldr	r1, [pc, #384]	; (80015e8 <HAL_RCC_ClockConfig+0x1f0>)
 8001466:	4313      	orrs	r3, r2
 8001468:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	2b00      	cmp	r3, #0
 8001474:	d04c      	beq.n	8001510 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	2b03      	cmp	r3, #3
 800147c:	d107      	bne.n	800148e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800147e:	4b5a      	ldr	r3, [pc, #360]	; (80015e8 <HAL_RCC_ClockConfig+0x1f0>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d121      	bne.n	80014ce <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e0a6      	b.n	80015dc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	2b02      	cmp	r3, #2
 8001494:	d107      	bne.n	80014a6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001496:	4b54      	ldr	r3, [pc, #336]	; (80015e8 <HAL_RCC_ClockConfig+0x1f0>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d115      	bne.n	80014ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e09a      	b.n	80015dc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d107      	bne.n	80014be <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014ae:	4b4e      	ldr	r3, [pc, #312]	; (80015e8 <HAL_RCC_ClockConfig+0x1f0>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d109      	bne.n	80014ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e08e      	b.n	80015dc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014be:	4b4a      	ldr	r3, [pc, #296]	; (80015e8 <HAL_RCC_ClockConfig+0x1f0>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d101      	bne.n	80014ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e086      	b.n	80015dc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80014ce:	4b46      	ldr	r3, [pc, #280]	; (80015e8 <HAL_RCC_ClockConfig+0x1f0>)
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	f023 0203 	bic.w	r2, r3, #3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	4943      	ldr	r1, [pc, #268]	; (80015e8 <HAL_RCC_ClockConfig+0x1f0>)
 80014dc:	4313      	orrs	r3, r2
 80014de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80014e0:	f7ff f848 	bl	8000574 <HAL_GetTick>
 80014e4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014e6:	e00a      	b.n	80014fe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014e8:	f7ff f844 	bl	8000574 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e06e      	b.n	80015dc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014fe:	4b3a      	ldr	r3, [pc, #232]	; (80015e8 <HAL_RCC_ClockConfig+0x1f0>)
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	f003 020c 	and.w	r2, r3, #12
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	429a      	cmp	r2, r3
 800150e:	d1eb      	bne.n	80014e8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	2b00      	cmp	r3, #0
 800151a:	d010      	beq.n	800153e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	689a      	ldr	r2, [r3, #8]
 8001520:	4b31      	ldr	r3, [pc, #196]	; (80015e8 <HAL_RCC_ClockConfig+0x1f0>)
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001528:	429a      	cmp	r2, r3
 800152a:	d208      	bcs.n	800153e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800152c:	4b2e      	ldr	r3, [pc, #184]	; (80015e8 <HAL_RCC_ClockConfig+0x1f0>)
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	492b      	ldr	r1, [pc, #172]	; (80015e8 <HAL_RCC_ClockConfig+0x1f0>)
 800153a:	4313      	orrs	r3, r2
 800153c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800153e:	4b29      	ldr	r3, [pc, #164]	; (80015e4 <HAL_RCC_ClockConfig+0x1ec>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0307 	and.w	r3, r3, #7
 8001546:	683a      	ldr	r2, [r7, #0]
 8001548:	429a      	cmp	r2, r3
 800154a:	d210      	bcs.n	800156e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800154c:	4b25      	ldr	r3, [pc, #148]	; (80015e4 <HAL_RCC_ClockConfig+0x1ec>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f023 0207 	bic.w	r2, r3, #7
 8001554:	4923      	ldr	r1, [pc, #140]	; (80015e4 <HAL_RCC_ClockConfig+0x1ec>)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	4313      	orrs	r3, r2
 800155a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800155c:	4b21      	ldr	r3, [pc, #132]	; (80015e4 <HAL_RCC_ClockConfig+0x1ec>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0307 	and.w	r3, r3, #7
 8001564:	683a      	ldr	r2, [r7, #0]
 8001566:	429a      	cmp	r2, r3
 8001568:	d001      	beq.n	800156e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e036      	b.n	80015dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0304 	and.w	r3, r3, #4
 8001576:	2b00      	cmp	r3, #0
 8001578:	d008      	beq.n	800158c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800157a:	4b1b      	ldr	r3, [pc, #108]	; (80015e8 <HAL_RCC_ClockConfig+0x1f0>)
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	4918      	ldr	r1, [pc, #96]	; (80015e8 <HAL_RCC_ClockConfig+0x1f0>)
 8001588:	4313      	orrs	r3, r2
 800158a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0308 	and.w	r3, r3, #8
 8001594:	2b00      	cmp	r3, #0
 8001596:	d009      	beq.n	80015ac <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001598:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <HAL_RCC_ClockConfig+0x1f0>)
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	691b      	ldr	r3, [r3, #16]
 80015a4:	00db      	lsls	r3, r3, #3
 80015a6:	4910      	ldr	r1, [pc, #64]	; (80015e8 <HAL_RCC_ClockConfig+0x1f0>)
 80015a8:	4313      	orrs	r3, r2
 80015aa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015ac:	f000 f824 	bl	80015f8 <HAL_RCC_GetSysClockFreq>
 80015b0:	4602      	mov	r2, r0
 80015b2:	4b0d      	ldr	r3, [pc, #52]	; (80015e8 <HAL_RCC_ClockConfig+0x1f0>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	091b      	lsrs	r3, r3, #4
 80015b8:	f003 030f 	and.w	r3, r3, #15
 80015bc:	490b      	ldr	r1, [pc, #44]	; (80015ec <HAL_RCC_ClockConfig+0x1f4>)
 80015be:	5ccb      	ldrb	r3, [r1, r3]
 80015c0:	f003 031f 	and.w	r3, r3, #31
 80015c4:	fa22 f303 	lsr.w	r3, r2, r3
 80015c8:	4a09      	ldr	r2, [pc, #36]	; (80015f0 <HAL_RCC_ClockConfig+0x1f8>)
 80015ca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80015cc:	4b09      	ldr	r3, [pc, #36]	; (80015f4 <HAL_RCC_ClockConfig+0x1fc>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7fe ff7f 	bl	80004d4 <HAL_InitTick>
 80015d6:	4603      	mov	r3, r0
 80015d8:	72fb      	strb	r3, [r7, #11]

  return status;
 80015da:	7afb      	ldrb	r3, [r7, #11]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3710      	adds	r7, #16
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	40022000 	.word	0x40022000
 80015e8:	40021000 	.word	0x40021000
 80015ec:	08001840 	.word	0x08001840
 80015f0:	20000000 	.word	0x20000000
 80015f4:	20000004 	.word	0x20000004

080015f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b089      	sub	sp, #36	; 0x24
 80015fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80015fe:	2300      	movs	r3, #0
 8001600:	61fb      	str	r3, [r7, #28]
 8001602:	2300      	movs	r3, #0
 8001604:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001606:	4b3e      	ldr	r3, [pc, #248]	; (8001700 <HAL_RCC_GetSysClockFreq+0x108>)
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	f003 030c 	and.w	r3, r3, #12
 800160e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001610:	4b3b      	ldr	r3, [pc, #236]	; (8001700 <HAL_RCC_GetSysClockFreq+0x108>)
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	f003 0303 	and.w	r3, r3, #3
 8001618:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d005      	beq.n	800162c <HAL_RCC_GetSysClockFreq+0x34>
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	2b0c      	cmp	r3, #12
 8001624:	d121      	bne.n	800166a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d11e      	bne.n	800166a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800162c:	4b34      	ldr	r3, [pc, #208]	; (8001700 <HAL_RCC_GetSysClockFreq+0x108>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0308 	and.w	r3, r3, #8
 8001634:	2b00      	cmp	r3, #0
 8001636:	d107      	bne.n	8001648 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001638:	4b31      	ldr	r3, [pc, #196]	; (8001700 <HAL_RCC_GetSysClockFreq+0x108>)
 800163a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800163e:	0a1b      	lsrs	r3, r3, #8
 8001640:	f003 030f 	and.w	r3, r3, #15
 8001644:	61fb      	str	r3, [r7, #28]
 8001646:	e005      	b.n	8001654 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001648:	4b2d      	ldr	r3, [pc, #180]	; (8001700 <HAL_RCC_GetSysClockFreq+0x108>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	091b      	lsrs	r3, r3, #4
 800164e:	f003 030f 	and.w	r3, r3, #15
 8001652:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001654:	4a2b      	ldr	r2, [pc, #172]	; (8001704 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800165c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d10d      	bne.n	8001680 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001668:	e00a      	b.n	8001680 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	2b04      	cmp	r3, #4
 800166e:	d102      	bne.n	8001676 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001670:	4b25      	ldr	r3, [pc, #148]	; (8001708 <HAL_RCC_GetSysClockFreq+0x110>)
 8001672:	61bb      	str	r3, [r7, #24]
 8001674:	e004      	b.n	8001680 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	2b08      	cmp	r3, #8
 800167a:	d101      	bne.n	8001680 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800167c:	4b23      	ldr	r3, [pc, #140]	; (800170c <HAL_RCC_GetSysClockFreq+0x114>)
 800167e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	2b0c      	cmp	r3, #12
 8001684:	d134      	bne.n	80016f0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001686:	4b1e      	ldr	r3, [pc, #120]	; (8001700 <HAL_RCC_GetSysClockFreq+0x108>)
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	f003 0303 	and.w	r3, r3, #3
 800168e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	2b02      	cmp	r3, #2
 8001694:	d003      	beq.n	800169e <HAL_RCC_GetSysClockFreq+0xa6>
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	2b03      	cmp	r3, #3
 800169a:	d003      	beq.n	80016a4 <HAL_RCC_GetSysClockFreq+0xac>
 800169c:	e005      	b.n	80016aa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800169e:	4b1a      	ldr	r3, [pc, #104]	; (8001708 <HAL_RCC_GetSysClockFreq+0x110>)
 80016a0:	617b      	str	r3, [r7, #20]
      break;
 80016a2:	e005      	b.n	80016b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80016a4:	4b19      	ldr	r3, [pc, #100]	; (800170c <HAL_RCC_GetSysClockFreq+0x114>)
 80016a6:	617b      	str	r3, [r7, #20]
      break;
 80016a8:	e002      	b.n	80016b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	617b      	str	r3, [r7, #20]
      break;
 80016ae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80016b0:	4b13      	ldr	r3, [pc, #76]	; (8001700 <HAL_RCC_GetSysClockFreq+0x108>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	091b      	lsrs	r3, r3, #4
 80016b6:	f003 0307 	and.w	r3, r3, #7
 80016ba:	3301      	adds	r3, #1
 80016bc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80016be:	4b10      	ldr	r3, [pc, #64]	; (8001700 <HAL_RCC_GetSysClockFreq+0x108>)
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	0a1b      	lsrs	r3, r3, #8
 80016c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80016c8:	697a      	ldr	r2, [r7, #20]
 80016ca:	fb03 f202 	mul.w	r2, r3, r2
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80016d4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80016d6:	4b0a      	ldr	r3, [pc, #40]	; (8001700 <HAL_RCC_GetSysClockFreq+0x108>)
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	0e5b      	lsrs	r3, r3, #25
 80016dc:	f003 0303 	and.w	r3, r3, #3
 80016e0:	3301      	adds	r3, #1
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80016e6:	697a      	ldr	r2, [r7, #20]
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80016f0:	69bb      	ldr	r3, [r7, #24]
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3724      	adds	r7, #36	; 0x24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	40021000 	.word	0x40021000
 8001704:	08001850 	.word	0x08001850
 8001708:	00f42400 	.word	0x00f42400
 800170c:	007a1200 	.word	0x007a1200

08001710 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001718:	2300      	movs	r3, #0
 800171a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800171c:	4b2a      	ldr	r3, [pc, #168]	; (80017c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800171e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d003      	beq.n	8001730 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001728:	f7ff f9ee 	bl	8000b08 <HAL_PWREx_GetVoltageRange>
 800172c:	6178      	str	r0, [r7, #20]
 800172e:	e014      	b.n	800175a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001730:	4b25      	ldr	r3, [pc, #148]	; (80017c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001734:	4a24      	ldr	r2, [pc, #144]	; (80017c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800173a:	6593      	str	r3, [r2, #88]	; 0x58
 800173c:	4b22      	ldr	r3, [pc, #136]	; (80017c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800173e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001748:	f7ff f9de 	bl	8000b08 <HAL_PWREx_GetVoltageRange>
 800174c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800174e:	4b1e      	ldr	r3, [pc, #120]	; (80017c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001752:	4a1d      	ldr	r2, [pc, #116]	; (80017c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001754:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001758:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001760:	d10b      	bne.n	800177a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2b80      	cmp	r3, #128	; 0x80
 8001766:	d919      	bls.n	800179c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2ba0      	cmp	r3, #160	; 0xa0
 800176c:	d902      	bls.n	8001774 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800176e:	2302      	movs	r3, #2
 8001770:	613b      	str	r3, [r7, #16]
 8001772:	e013      	b.n	800179c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001774:	2301      	movs	r3, #1
 8001776:	613b      	str	r3, [r7, #16]
 8001778:	e010      	b.n	800179c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2b80      	cmp	r3, #128	; 0x80
 800177e:	d902      	bls.n	8001786 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001780:	2303      	movs	r3, #3
 8001782:	613b      	str	r3, [r7, #16]
 8001784:	e00a      	b.n	800179c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2b80      	cmp	r3, #128	; 0x80
 800178a:	d102      	bne.n	8001792 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800178c:	2302      	movs	r3, #2
 800178e:	613b      	str	r3, [r7, #16]
 8001790:	e004      	b.n	800179c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2b70      	cmp	r3, #112	; 0x70
 8001796:	d101      	bne.n	800179c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001798:	2301      	movs	r3, #1
 800179a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800179c:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f023 0207 	bic.w	r2, r3, #7
 80017a4:	4909      	ldr	r1, [pc, #36]	; (80017cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80017ac:	4b07      	ldr	r3, [pc, #28]	; (80017cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0307 	and.w	r3, r3, #7
 80017b4:	693a      	ldr	r2, [r7, #16]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d001      	beq.n	80017be <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e000      	b.n	80017c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80017be:	2300      	movs	r3, #0
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3718      	adds	r7, #24
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40021000 	.word	0x40021000
 80017cc:	40022000 	.word	0x40022000

080017d0 <__libc_init_array>:
 80017d0:	b570      	push	{r4, r5, r6, lr}
 80017d2:	4d0d      	ldr	r5, [pc, #52]	; (8001808 <__libc_init_array+0x38>)
 80017d4:	4c0d      	ldr	r4, [pc, #52]	; (800180c <__libc_init_array+0x3c>)
 80017d6:	1b64      	subs	r4, r4, r5
 80017d8:	10a4      	asrs	r4, r4, #2
 80017da:	2600      	movs	r6, #0
 80017dc:	42a6      	cmp	r6, r4
 80017de:	d109      	bne.n	80017f4 <__libc_init_array+0x24>
 80017e0:	4d0b      	ldr	r5, [pc, #44]	; (8001810 <__libc_init_array+0x40>)
 80017e2:	4c0c      	ldr	r4, [pc, #48]	; (8001814 <__libc_init_array+0x44>)
 80017e4:	f000 f820 	bl	8001828 <_init>
 80017e8:	1b64      	subs	r4, r4, r5
 80017ea:	10a4      	asrs	r4, r4, #2
 80017ec:	2600      	movs	r6, #0
 80017ee:	42a6      	cmp	r6, r4
 80017f0:	d105      	bne.n	80017fe <__libc_init_array+0x2e>
 80017f2:	bd70      	pop	{r4, r5, r6, pc}
 80017f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80017f8:	4798      	blx	r3
 80017fa:	3601      	adds	r6, #1
 80017fc:	e7ee      	b.n	80017dc <__libc_init_array+0xc>
 80017fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8001802:	4798      	blx	r3
 8001804:	3601      	adds	r6, #1
 8001806:	e7f2      	b.n	80017ee <__libc_init_array+0x1e>
 8001808:	08001880 	.word	0x08001880
 800180c:	08001880 	.word	0x08001880
 8001810:	08001880 	.word	0x08001880
 8001814:	08001884 	.word	0x08001884

08001818 <memset>:
 8001818:	4402      	add	r2, r0
 800181a:	4603      	mov	r3, r0
 800181c:	4293      	cmp	r3, r2
 800181e:	d100      	bne.n	8001822 <memset+0xa>
 8001820:	4770      	bx	lr
 8001822:	f803 1b01 	strb.w	r1, [r3], #1
 8001826:	e7f9      	b.n	800181c <memset+0x4>

08001828 <_init>:
 8001828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800182a:	bf00      	nop
 800182c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800182e:	bc08      	pop	{r3}
 8001830:	469e      	mov	lr, r3
 8001832:	4770      	bx	lr

08001834 <_fini>:
 8001834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001836:	bf00      	nop
 8001838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800183a:	bc08      	pop	{r3}
 800183c:	469e      	mov	lr, r3
 800183e:	4770      	bx	lr
